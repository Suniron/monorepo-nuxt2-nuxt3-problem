id, oid, burp_id, name, description, remediation, insight, affected, vulndetect, cluster_id
"1",,"16777728","Unencrypted communications","<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>\n<p>\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\n</p>\n<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>","<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>",,,,"21"
"2",,"5245344","Frameable response (potential Clickjacking)","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",,,,"218"
"3",,"3145984","Cleartext submission of password","<p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>",,,,"42"
"4",,"4196352","Long redirection response","<p>The application returned a redirection response containing a ""long"" message body. Ordinarily, this content is not displayed to the user, because the browser automatically follows the redirection.</p>\n<p>Occasionally, redirection responses contain sensitive data. For example, if the user requests a page that they are not authorized to view, then an application might issue a redirection to a different page, but also include the contents of the prohibited page.</p>\n<p>You should review the contents of the response to determine whether it contains anything sensitive. </p>","<p>In cases where the application handles requests for unauthorized content by redirecting to a different URL, the application should ensure that no sensitive content is included within the redirection response. Depending on the application and the platform, this might involve checking for proper authorization earlier in the request handling logic, or using a different API to perform the redirection.</p>",,,,"140"
"5",,"5243904","Cross-domain Referer leakage","<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the ""Referer"" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>","<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\n</p>",,,,"95"
"6",,"5244928","Password field with autocomplete enabled","<p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.</p>\n<p>The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. </p>","<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=""off""</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p>\n<p>Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>",,,,"147"
"7",,"8389120","HTML does not specify charset","<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>","<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",,,,"266"
"8",,"6291968","Email addresses disclosed","<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>","<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",,,,"198"
"9",,"5244160","Cross-domain script include","<p>When an application includes a script from an external domain, this script is executed by the browser within the security context of the invoking application. The script can therefore do anything that the application's own scripts can do, such as accessing application data and performing actions within the context of the current user.</p>\n<p>If you include a script from an external domain, then you are trusting that domain with the data and functionality of your application, and you are trusting the domain's own security to prevent an attacker from modifying the script to perform malicious actions within your application. </p>","<p>Scripts should ideally not be included from untrusted domains. Applications that rely on static third-party scripts should consider using Subresource Integrity to make browsers verify them, or copying the contents of these scripts onto their own domain and including them from there. If that is not possible (e.g. for licensing reasons) then consider reimplementing the script's functionality within application code.</p>",,,,"131"
"10",,"4197376","Input returned in response (reflected)","<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",,,,,"8"
"11",,"1049088","SQL injection","<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>","<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\n<ul>\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>\n  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\n</ul>",,,,"81"
"12",,"2097960","Path-relative style sheet import","<p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p>\n<ol>\n<li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li>\n<li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol>\n<p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate.</p>\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\n<ul>\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p>\n<ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li>\n<li>Setting the HTTP response header ""X-Content-Type-Options: nosniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>",,,,"104"
"13",,"6291672","Backup file","<p>Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.</p>","<p>Review the file to identify whether it's intended to be publicly accessible, and remove it from the server's web root if it isn't. It may also be worth auditing the server contents to find other outdated files, and taking measures to prevent the problem from recurring.</p>",,,,"244"
"14",,"2098944","Cross-site request forgery","<p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p>\n<ul>\n<li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li>\n<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li>\n<li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>","<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>\n<p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>",,,,"222"
"15",,"4194592","User agent-dependent response","<p>Application responses may depend systematically on the value of the User-Agent header in requests. This behavior does not itself constitute a security vulnerability, but may point towards additional attack surface within the application, which may contain vulnerabilities.</p>\n<p>This behavior often arises because applications provide different user interfaces for desktop and mobile users. Mobile interfaces have often been less thoroughly tested for vulnerabilities such as cross-site scripting, and often have simpler authentication and session handling mechanisms that may contain problems that are not present in the full interface.</p>\n<p>To review the interface provided by the alternate User-Agent header, you can configure a match/replace rule in Burp Proxy to modify the User-Agent header in all requests, and then browse the application in the normal way using your normal browser. </p>",,,,,"8"
"16","1.3.6.1.4.1.25623.1.0.117197",,"Adobe Flash Player End of Life (EOL) Detection","The Adobe Flash Player on the remote host has reached the End of Life (EOL)  / is discontinued and should not be used anymore.","No solution was made available by the vendor. General solution options are to upgrade  to a newer release, disable respective features, remove the product or replace the product by another one.\n\n  Note: The product has reached its EOL.",,,"Checks if the target host is using an EOL / discontinued product.","205"
"17","1.3.6.1.4.1.25623.1.0.100072",,"Check if Mailserver answer to VRFY and EXPN requests","The Mailserver on this host answers to VRFY and/or EXPN requests.","Disable VRFY and/or EXPN on your Mailserver.\n\n  For postfix add 'disable_vrfy_command=yes' in 'main.cf'.\n\n  For Sendmail add the option 'O PrivacyOptions=goaway'.\n\n  It is suggested that, if you really want to publish this type of information, you use a mechanism  that legitimate users actually know about, such as Finger or HTTP.","VRFY and EXPN ask the server for information about an address. They are  inherently unusable through firewalls, gateways, mail exchangers for part-time hosts, etc.",,,"249"
"18","1.3.6.1.4.1.25623.1.0.108440",,"Cleartext Transmission of Sensitive Information via HTTP","The host / application transmits sensitive information (username, passwords) in  cleartext via HTTP.","Enforce the transmission of sensitive data via an encrypted SSL/TLS connection.  Additionally make sure the host / application is redirecting all users to the secured SSL/TLS connection before  allowing to input sensitive data into the mentioned functions.",,"Hosts / applications which doesn't enforce the transmission of sensitive data via an  encrypted SSL/TLS connection.","Evaluate previous collected information and check if the host / application is not  enforcing the transmission of sensitive data via an encrypted SSL/TLS connection.\n\n  The script is currently checking the following:\n\n  - HTTP Basic Authentication (Basic Auth)\n\n  - HTTP Forms (e.g. Login) with input field of type 'password'","72"
"19","1.3.6.1.4.1.25623.1.0.10736",,"DCE/RPC and MSRPC Services Enumeration Reporting","Distributed Computing Environment / Remote Procedure Calls (DCE/RPC) or MSRPC services running  on the remote host can be enumerated by connecting on port 135 and doing the appropriate queries.","Filter incoming traffic to this ports.",,,,"299"
"20","1.3.6.1.4.1.25623.1.0.892487",,"Debian LTS: Security Advisory for apt (DLA-2487-1)","The remote host is missing an update for the 'apt'  package(s) announced via the DLA-2487-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.4.11.\n\nWe recommend that you upgrade your apt packages.","It was discovered that missing input validation in the ar/tarimplementations of APT, the high level package manager, could causeout-of-bounds reads or infinite loops, resulting in denial of servicewhen processing malformed deb files.","'apt' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","172"
"21","1.3.6.1.4.1.25623.1.0.892568",,"Debian LTS: Security Advisory for bind9 (DLA-2568-1)","The remote host is missing an update for the 'bind9'  package(s) announced via the DLA-2568-1 advisory.","For Debian 9 'Stretch', this problem has been fixed in version1:9.10.3.dfsg.P4-12.3+deb9u8.\n\nWe recommend that you upgrade your bind9 packages.","It was discovered that there was a buffer overflow attack in thebind9 DNS server caused by an issue in the GSSAPI ('Generic SecurityServices') security policy negotiation.","'bind9' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","94"
"22","1.3.6.1.4.1.25623.1.0.892647",,"Debian LTS: Security Advisory for bind9 (DLA-2647-1)","The remote host is missing an update for the 'bind9'  package(s) announced via the DLA-2647-1 advisory.","For Debian 9 stretch, these problems have been fixed in version1:9.10.3.dfsg.P4-12.3+deb9u9.\n\nWe recommend that you upgrade your bind9 packages.","Several vulnerabilities were discovered in BIND, a DNS serverimplementation.\n\nCVE-2021-25214\n\nGreg Kuechle discovered that a malformed incoming IXFR transfercould trigger an assertion failure in named, resulting in denialof service.\n\nCVE-2021-25215\n\nSiva Kakarla discovered that named could crash when a DNAME recordplaced in the ANSWER section during DNAME chasing turned out to bethe final answer to a client query.\n\nCVE-2021-25216\n\nIt was discovered that the SPNEGO implementation used by BIND isprone to a buffer overflow vulnerability. This update switches touse the SPNEGO implementation from the Kerberos libraries.","'bind9' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","169"
"23","1.3.6.1.4.1.25623.1.0.892559",,"Debian LTS: Security Advisory for busybox (DLA-2559-1)","The remote host is missing an update for the 'busybox'  package(s) announced via the DLA-2559-1 advisory.","For Debian 9 stretch, these problems have been fixed in version1:1.22.0-19+deb9u1.\n\nWe recommend that you upgrade your busybox packages.","Busybox, utility programs for small and embedded systems, was affectedby several security vulnerabilities. The Common Vulnerabilities andExposures project identifies the following issues.\n\nCVE-2011-5325\n\nA path traversal vulnerability was found in Busybox implementationof tar. tar will extract a symlink that points outside of thecurrent working directory and then follow that symlink whenextracting other files. This allows for a directory traversalattack when extracting untrusted tarballs.\n\nCVE-2013-1813\n\nWhen device node or symlink in /dev should be created inside2-or-deeper subdirectory (/dev/dir1/dir2.../node), the intermediatedirectories are created with incorrect permissions.\n\nCVE-2014-4607\n\nAn integer overflow may occur when processing any variant of a'literal run' in the lzo1x_decompress_safe function. Each of thesethree locations is subject to an integer overflow when processingzero bytes. This exposes the code that copies literals to memorycorruption.\n\nCVE-2014-9645\n\nThe add_probe function in modutils/modprobe.c in BusyBox allowslocal users to bypass intended restrictions on loading kernelmodules via a / (slash) character in a module name, as demonstratedby an 'ifconfig /usbserial up' command or a 'mount -t /snd_pcm none/' command.\n\nCVE-2016-2147\n\nInteger overflow in the DHCP client (udhcpc) in BusyBox allowsremote attackers to cause a denial of service (crash) via amalformed RFC1035-encoded domain name, which triggers anout-of-bounds heap write.\n\nCVE-2016-2148\n\nHeap-based buffer overflow in the DHCP client (udhcpc) in BusyBoxallows remote attackers to have unspecified impact via vectorsinvolving OPTION_6RD parsing.\n\nCVE-2017-15873\n\nThe get_next_block function in archival/libarchive/decompress_bunzip2.c in BusyBox has an Integer Overflow that maylead to a write access violation.\n\nCVE-2017-16544\n\nIn the add_match function in libbb/lineedit.c in BusyBox, the tabautocomplete feature of the shell, used to get a list of filenamesin a directory, does not sanitize filenames and results in executingany escape sequence in the terminal. This could potentially resultin code execution, arbitrary file writes, or other attacks.\n\nCVE-2018-1000517\n\nBusyBox contains a Buffer Overflow vulnerability inBusybox wget that can result in a heap-based buffer overflow.This attack appears to be exploitable via network connectivity.\n\nCVE-2015-9621\n\nUnziping a specially crafted zip file results in a computation of aninvalid pointer and a crash reading an invalid address.","'busybox' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","48"
"24","1.3.6.1.4.1.25623.1.0.892614",,"Debian LTS: Security Advisory for busybox (DLA-2614-1)","The remote host is missing an update for the 'busybox'  package(s) announced via the DLA-2614-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1:1.22.0-19+deb9u2.\n\nWe recommend that you upgrade your busybox packages.","The gunzip decompressor of Busybox, tiny utilities for small and embeddedsystems, mishandled the error bit on the huft_build result pointer, with aresultant invalid free or segmentation fault, via malformed gzip data.","'busybox' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","36"
"25","1.3.6.1.4.1.25623.1.0.892593",,"Debian LTS: Security Advisory for ca-certificates (DLA-2593-1)","The remote host is missing an update for the 'ca-certificates'  package(s) announced via the DLA-2593-1 advisory.","For Debian 9 stretch, this problem has been fixed in version20200601~deb9u2.\n\nWe recommend that you upgrade your ca-certificates packages.","This update reverts the Symantec CA blacklist (which was originally#911289). The following root certificates were added back (+):\n\n+ 'GeoTrust Global CA'\n\n+ 'GeoTrust Primary Certification Authority'\n\n+ 'GeoTrust Primary Certification Authority - G2'\n\n+ 'GeoTrust Primary Certification Authority - G3'\n\n+ 'GeoTrust Universal CA'\n\n+ 'thawte Primary Root CA'\n\n+ 'thawte Primary Root CA - G2'\n\n+ 'thawte Primary Root CA - G3'\n\n+ 'VeriSign Class 3 Public Primary Certification Authority - G4'\n\n+ 'VeriSign Class 3 Public Primary Certification Authority - G5'\n\n+ 'VeriSign Universal Root Certification Authority'\n\nNOTE: due to bug #743339, CA certificates added back in this versionwon't automatically be trusted again on upgrade. Affected users mayneed to reconfigure the package to restore the desired state.","'ca-certificates' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","230"
"26","1.3.6.1.4.1.25623.1.0.892518",,"Debian LTS: Security Advisory for cairo (DLA-2518-1)","The remote host is missing an update for the 'cairo'  package(s) announced via the DLA-2518-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.14.8-1+deb9u1.\n\nWe recommend that you upgrade your cairo packages.","LibreOffice slideshow aborts with stack smashing in cairo'scomposite_boxes.","'cairo' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","272"
"27","1.3.6.1.4.1.25623.1.0.892500",,"Debian LTS: Security Advisory for curl (DLA-2500-1)","The remote host is missing an update for the 'curl'  package(s) announced via the DLA-2500-1 advisory.","For Debian 9 stretch, these problems have been fixed in version7.52.1-5+deb9u13.\n\nWe recommend that you upgrade your curl packages.","Several vulnerabilities were discovered in curl, a command line tool fortransferring data with URL syntax and an easy-to-use client-side URLtransfer library.\n\nCVE-2020-8284\n\nWhen curl performs a passive FTP transfer, it first tries the EPSVcommand and if that is not supported, it falls back to using PASV.Passive mode is what curl uses by default. A server response to aPASV command includes the (IPv4) address and port number for theclient to connect back to in order to perform the actual datatransfer. This is how the FTP protocol is designed to work. Amalicious server can use the PASV response to trick curl intoconnecting back to a given IP address and port, and this waypotentially make curl extract information about services that areotherwise private and not disclosed, for example doing port scanningand service banner extractions.\n\nThe IP address part of the response is now ignored by default, bymaking CURLOPT_FTP_SKIP_PASV_IP default to 1L instead of previouslybeing 0L. This has the minor drawback that a small fraction of usecases might break, when a server truly needs the client to connectback to a different IP address than what the control connection usesand for those CURLOPT_FTP_SKIP_PASV_IP can be set to 0L. The samegoes for the command line tool, which then might need --no-ftp-skip-pasv-ipset to prevent curl from ignoring the address in the server response.\n\nCVE-2020-8285\n\nlibcurl offers a wildcard matching functionality, which allows acallback (set with CURLOPT_CHUNK_BGN_FUNCTION) to return informationback to libcurl on how to handle a specific entry in a directorywhen libcurl iterates over a list of all available entries. Whenthis callback returns CURL_CHUNK_BGN_FUNC_SKIP, to tell libcurl tonot deal with that file, the internal function in libcurl then callsitself recursively to handle the next directory entry. If there's asufficient amount of file entries and if the callback returns 'skip'enough number of times, libcurl runs out of stack space. The exactamount will of course vary with platforms, compilers and otherenvironmental factors. The content of the remote directory is notkept on the stack, so it seems hard for the attacker to controlexactly what data that overwrites the stack - however it remains aDenial-Of-Service vector as a malicious user who controls a serverthat a libcurl-using application works with under these premises cantrigger a crash.\n\nThe internal function is rewritten to instead and more appropriatelyuse an ordinary loop instead of the recursive approach. This way,the stack use will remain the same no matter how many files that areskipped.\n\nCVE-202 ...\n\n  Description truncated. Please see the references for more information.","'curl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","126"
"28","1.3.6.1.4.1.25623.1.0.892537",,"Debian LTS: Security Advisory for ffmpeg (DLA-2537-1)","The remote host is missing an update for the 'ffmpeg'  package(s) announced via the DLA-2537-1 advisory.","For Debian 9 stretch, these problems have been fixed in version7:3.2.15-0+deb9u2.\n\nWe recommend that you upgrade your ffmpeg packages.","Two vulnerabilities have been discovered in ffmpeg, a widely usedmultimedia framework.\n\nCVE-2019-17539\n\na NULL pointer dereference and possibly unspecified other impactwhen there is no valid close function pointer\n\nCVE-2020-35965\n\nan out-of-bounds write because of errors in calculations of when toperform memset zero operations","'ffmpeg' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","226"
"29","1.3.6.1.4.1.25623.1.0.892514",,"Debian LTS: Security Advisory for flac (DLA-2514-1)","The remote host is missing an update for the 'flac'  package(s) announced via the DLA-2514-1 advisory.","For Debian 9 stretch, these problems have been fixed in version1.3.2-2+deb9u1.\n\nWe recommend that you upgrade your flac packages.","Two vulnerabilities were fixed in flac, the library for theFree Lossless Audio Codec.\n\nCVE-2017-6888\n\nMemory leak via a specially crafted FLAC file\n\nCVE-2020-0499\n\nOut of bounds read due to a heap buffer overflow","'flac' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","268"
"30","1.3.6.1.4.1.25623.1.0.892523",,"Debian LTS: Security Advisory for imagemagick (DLA-2523-1)","The remote host is missing an update for the 'imagemagick'  package(s) announced via the DLA-2523-1 advisory.","For Debian 9 stretch, these problems have been fixed in version8:6.9.7.4+dfsg-11+deb9u11.\n\nWe recommend that you upgrade your imagemagick packages.","Several security vulnerabilities were found in ImageMagick, a suite ofimage manipulation programs. An attacker could cause denial of serviceand execution of arbitrary code when a crafted image file isprocessed.\n\nCVE-2017-14528\n\nThe TIFFSetProfiles function in coders/tiff.c has incorrectexpectations about whether LibTIFF TIFFGetField return valuesimply that data validation has occurred, which allows remoteattackers to cause a denial of service (use-after-free after aninvalid call to TIFFSetField, and application crash) via a craftedfile.\n\nCVE-2020-19667\n\nStack-based buffer overflow and unconditional jump in ReadXPMImagein coders/xpm.c\n\nCVE-2020-25665\n\nThe PALM image coder at coders/palm.c makes an improper call toAcquireQuantumMemory() in routine WritePALMImage() because itneeds to be offset by 256. This can cause a out-of-bounds readlater on in the routine. This could cause impact to reliability.\n\nCVE-2020-25674\n\nWriteOnePNGImage() from coders/png.c (the PNG coder) has a forloop with an improper exit condition that can allow anout-of-bounds READ via heap-buffer-overflow. This occurs becauseit is possible for the colormap to have less than 256 valid valuesbut the loop condition will loop 256 times, attempting to passinvalid colormap data to the event logger.\n\nCVE-2020-27560\n\nImageMagick allows Division by Zero in OptimizeLayerFrames inMagickCore/layer.c, which may cause a denial of service.\n\nCVE-2020-27750\n\nA flaw was found in MagickCore/colorspace-private.h andMagickCore/quantum.h. An attacker who submits a crafted file thatis processedcould trigger undefined behavior in the form of valuesoutside the range of type `unsigned char` and math division byzero. This would most likely lead to an impact to applicationavailability, but could potentially cause other problems relatedto undefined behavior.\n\nCVE-2020-27760\n\nIn `GammaImage()` of /MagickCore/enhance.c, depending on the`gamma` value, it's possible to trigger a divide-by-zero conditionwhen a crafted input file is processed by ImageMagick. This couldlead to an impact to application availability.\n\nCVE-2020-27763\n\nA flaw was found in MagickCore/resize.c. An attacker who submits acrafted file that is processed by ImageMagick could triggerundefined behavior in the form of math division by zero. Thiswould most likely lead to an impact to application availability,but could potentially cause other problems related to undefinedbehavior.\n\nCVE-2020-27765\n\nA flaw was found in MagickCore/segment.c. An attacker who submitsa crafted file that is processed by ImageMagick could triggerundefined behavior in the form of math division by zero. This ...\n\n  Description truncated. Please see the references for more information.","'imagemagick' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","123"
"31","1.3.6.1.4.1.25623.1.0.892602",,"Debian LTS: Security Advisory for imagemagick (DLA-2602-1)","The remote host is missing an update for the 'imagemagick'  package(s) announced via the DLA-2602-1 advisory.","For Debian 9 stretch, these problems have been fixed in version8:6.9.7.4+dfsg-11+deb9u12.\n\nWe recommend that you upgrade your imagemagick packages.","Multiple security vulnerabilities were found in Imagemagick. Missing orincomplete input sanitizing may lead to undefined behavior which can resultin denial of service (application crash) or other unspecified impact.","'imagemagick' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","142"
"32","1.3.6.1.4.1.25623.1.0.892608",,"Debian LTS: Security Advisory for jquery (DLA-2608-1)","The remote host is missing an update for the 'jquery'  package(s) announced via the DLA-2608-1 advisory.","For Debian 9 stretch, these problems have been fixed in version3.1.1-2+deb9u2.\n\nWe recommend that you upgrade your jquery packages.","Two vulnerabilities have been discovered in jquery's handling ofuntrusted HTML which may result in execution of untrusted code.","'jquery' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","189"
"33","1.3.6.1.4.1.25623.1.0.892437",,"Debian LTS: Security Advisory for krb5 (DLA-2437-1)","The remote host is missing an update for the 'krb5'  package(s) announced via the DLA-2437-1 advisory.","For Debian 9 'Stretch', this problem has been fixed in version1.15-1+deb9u2.\n\nWe recommend that you upgrade your krb5 packages.","It was discovered that there was a denial of service vulnerability inthe MIT Kerberos network authentication system, krb5. The lack of alimit in the ASN.1 decoder could lead to infinite recursion and allowan attacker to overrun the stack and cause the process to crash.","'krb5' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","274"
"34","1.3.6.1.4.1.25623.1.0.892566",,"Debian LTS: Security Advisory for libbsd (DLA-2566-1)","The remote host is missing an update for the 'libbsd'  package(s) announced via the DLA-2566-1 advisory.","For Debian 9 stretch, this problem has been fixed in version0.8.3-1+deb9u1.\n\nWe recommend that you upgrade your libbsd packages.","An issue has been found in libbsd, a library with utility functions fromBSD systems.A non-NUL terminated symbol name in the string table might result in anout-of-bounds read.","'libbsd' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","237"
"35","1.3.6.1.4.1.25623.1.0.892510",,"Debian LTS: Security Advisory for libdatetime-timezone-perl (DLA-2510-1)","The remote host is missing an update for the 'libdatetime-timezone-perl'  package(s) announced via the DLA-2510-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1:2.09-1+2020e.\n\nWe recommend that you upgrade your libdatetime-timezone-perl packages.","This update includes the changes in tzdata 2020e for thePerl bindings. For the list of changes, see DLA-2510-1.","'libdatetime-timezone-perl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","242"
"36","1.3.6.1.4.1.25623.1.0.892450",,"Debian LTS: Security Advisory for libproxy (DLA-2450-1)","The remote host is missing an update for the 'libproxy'  package(s) announced via the DLA-2450-1 advisory.","For Debian 9 stretch, this problem has been fixed in version0.4.14-2+deb9u2.\n\nWe recommend that you upgrade your libproxy packages.","Li Fei found that libproxy, a library for automatic proxy configurationmanagement, was vulnerable to a buffer overflow vulnerability whenreceiving a large PAC file from a server without a Content-Length headerin the response.","'libproxy' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","157"
"37","1.3.6.1.4.1.25623.1.0.892653",,"Debian LTS: Security Advisory for libxml2 (DLA-2653-1)","The remote host is missing an update for the 'libxml2'  package(s) announced via the DLA-2653-1 advisory.","For Debian 9 stretch, these problems have been fixed in version2.9.4+dfsg1-2.2+deb9u4.\n\nWe recommend that you upgrade your libxml2 packages.","Several vulnerabilities were discovered in libxml2, a library providingsupport to read, modify and write XML and HTML files, which could causedenial of service via application crash when parsing specially craftedfiles.","'libxml2' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","175"
"38","1.3.6.1.4.1.25623.1.0.892494",,"Debian LTS: Security Advisory for linux (DLA-2494-1)","The remote host is missing an update for the 'linux'  package(s) announced via the DLA-2494-1 advisory.","For Debian 9 stretch, these problems have been fixed in version4.9.246-2.\n\nWe recommend that you upgrade your linux packages.","Several vulnerabilities have been discovered in the Linux kernel thatmay lead to the execution of arbitrary code, privilege escalation,denial of service or information leaks.\n\nCVE-2020-0427\n\nElena Petrova reported a bug in the pinctrl subsystem that canlead to a use-after-free after a device is renamed. The securityimpact of this is unclear.\n\nCVE-2020-8694\n\nMultiple researchers discovered that the powercap subsystemallowed all users to read CPU energy meters, by default. Onsystems using Intel CPUs, this provided a side channel that couldleak sensitive information between user processes, or from thekernel to user processes. The energy meters are now readable onlyby root, by default.\n\nThis issue can be mitigated by running:\n\nchmod go-r /sys/devices/virtual/powercap/*/*/energy_uj\n\nThis needs to be repeated each time the system is booted withan unfixed kernel version.\n\nCVE-2020-14351\n\nA race condition was discovered in the performance eventssubsystem, which could lead to a use-after-free. A local userpermitted to access performance events could use this to cause adenial of service (crash or memory corruption) or possibly forprivilege escalation.\n\nDebian's kernel configuration does not allow unprivileged users toaccess performance events by default, which fully mitigates thisissue.\n\nCVE-2020-25645\n\nA flaw was discovered in the interface driver for GENEVEencapsulated traffic when combined with IPsec. If IPsec isconfigured to encrypt traffic for the specific UDP port used by theGENEVE tunnel, tunneled data isn't correctly routed over theencrypted link and sent unencrypted instead.\n\nCVE-2020-25656\n\nYuan Ming and Bodong Zhao discovered a race condition in thevirtual terminal (vt) driver that could lead to a use-after-free.A local user with the CAP_SYS_TTY_CONFIG capability could use thisto cause a denial of service (crash or memory corruption) orpossibly for privilege escalation.\n\nCVE-2020-25668\n\nYuan Ming and Bodong Zhao discovered a race condition in thevirtual terminal (vt) driver that could lead to a use-after-free.A local user with access to a virtual terminal, or with theCAP_SYS_TTY_CONFIG capability, could use this to cause a denial ofservice (crash or memory corruption) or possibly for privilegeescalation.\n\nCVE-2020-25669\n\nBodong Zhao discovered a bug in the Sun keyboard driver (sunkbd)that could lead to a use-after-free. On a system using thisdriver, a local user could use this to cause a denial of service(crash or memory corruption) or possibly for privilege escalation.\n\nCVE-2020-25704\n\nkiyini discovered a potential memory leak in the performanceevents subsystem. A local user perm ...\n\n  Description truncated. Please see the references for more information.","'linux' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","97"
"39","1.3.6.1.4.1.25623.1.0.892586",,"Debian LTS: Security Advisory for linux (DLA-2586-1)","The remote host is missing an update for the 'linux'  package(s) announced via the DLA-2586-1 advisory.","For Debian 9 stretch, these problems have been fixed in version4.9.258-1.\n\nWe recommend that you upgrade your linux packages.","Several vulnerabilities have been discovered in the Linux kernel thatmay lead to a privilege escalation, denial of service or informationleaks.\n\nCVE-2019-19318, CVE-2019-19813, CVE-2019-19816\n\n'Team bobfuzzer' reported bugs in Btrfs that could lead to ause-after-free or heap buffer overflow, and could be triggered bycrafted filesystem images. A user permitted to mount and accessarbitrary filesystems could use these to cause a denial of service(crash or memory corruption) or possibly for privilege escalation.\n\nCVE-2020-27815\n\nA flaw was reported in the JFS filesystem code allowing a localattacker with the ability to set extended attributes to cause adenial of service.\n\nCVE-2020-27825\n\nAdam 'pi3' Zabrocki reported a use-after-free flaw in the ftracering buffer resizing logic due to a race condition, which couldresult in denial of service or information leak.\n\nCVE-2020-28374\n\nDavid Disseldorp discovered that the LIO SCSI target implementationperformed insufficient checking in certain XCOPY requests. Anattacker with access to a LUN and knowledge of Unit Serial Numberassignments can take advantage of this flaw to read and write to anyLIO backstore, regardless of the SCSI transport settings.\n\nCVE-2020-29568 (XSA-349)\n\nMichael Kurth and Pawel Wieczorkiewicz reported that frontends cantrigger OOM in backends by updating a watched path.\n\nCVE-2020-29569 (XSA-350)\n\nOlivier Benjamin and Pawel Wieczorkiewicz reported a use-after-freeflaw which can be triggered by a block frontend in Linux blkback. Amisbehaving guest can trigger a dom0 crash by continuouslyconnecting / disconnecting a block frontend.\n\nCVE-2020-29660\n\nJann Horn reported a locking inconsistency issue in the ttysubsystem which may allow a local attacker to mount aread-after-free attack against TIOCGSID.\n\nCVE-2020-29661\n\nJann Horn reported a locking issue in the tty subsystem which canresult in a use-after-free. A local attacker can take advantage ofthis flaw for memory corruption or privilege escalation.\n\nCVE-2020-36158\n\nA buffer overflow flaw was discovered in the mwifiex WiFi driverwhich could result in denial of service or the execution ofarbitrary code via a long SSID value.\n\nCVE-2021-3178\n\nWu Yi reported an information leak in the NFSv3 server. When onlya subdirectory of a filesystem volume is exported, an NFS clientlisting the exported directory would obtain a file handle to theparent directory, allowing it to access files that were not meantto be exported.\n\nEven after this update, it is still possible for NFSv3 clients toguess valid file handles and access files outside an exportedsubdirectory, unless the 'subtree_check' expor ...\n\n  Description truncated. Please see the references for more information.","'linux' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","40"
"40","1.3.6.1.4.1.25623.1.0.892467",,"Debian LTS: Security Advisory for lxml (DLA-2467-1)","The remote host is missing an update for the 'lxml'  package(s) announced via the DLA-2467-1 advisory.","For Debian 9 stretch, these problems have been fixed in version3.7.1-1+deb9u1.\n\nWe recommend that you upgrade your lxml packages.","CVE-2018-19787\n\nIt was discovered that there was a XSS injection vulnerability inthe LXML HTML/XSS manipulation library for Python.\n\nCVE-2020-27783\n\njavascript escaping through the <noscript> and <style> combinations.","'lxml' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","51"
"41","1.3.6.1.4.1.25623.1.0.892606",,"Debian LTS: Security Advisory for lxml (DLA-2606-1)","The remote host is missing an update for the 'lxml'  package(s) announced via the DLA-2606-1 advisory.","For Debian 9 stretch, this problem has been fixed in version3.7.1-1+deb9u4.\n\nWe recommend that you upgrade your lxml packages.","An issue has been found in lxml, a pythonic binding for the libxml2 andlibxslt libraries.\n\nDue to missing input sanitization, XSS is possible for the HTML5formaction attribute.","'lxml' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","122"
"42","1.3.6.1.4.1.25623.1.0.892605",,"Debian LTS: Security Advisory for mariadb-10.1 (DLA-2605-1)","The remote host is missing an update for the 'mariadb-10.1'  package(s) announced via the DLA-2605-1 advisory.","For Debian 9 stretch, this problem has been fixed in version10.1.48-0+deb9u2.\n\nWe recommend that you upgrade your mariadb-10.1 packages.","A remote code execution issue was discovered in MariaDB. An untrusted searchpath leads to eval injection, in which a database SUPER user can execute OScommands after modifying wsrep_provider and wsrep_notify_cmd.","'mariadb-10.1' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","34"
"43","1.3.6.1.4.1.25623.1.0.892472",,"Debian LTS: Security Advisory for mutt (DLA-2472-1)","The remote host is missing an update for the 'mutt'  package(s) announced via the DLA-2472-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.7.2-1+deb9u4.\n\nWe recommend that you upgrade your mutt packages.","In Mutt, a text-based Mail User Agent, invalid IMAP server responseswere not properly handled, potentially resulting in authenticationcredentials being exposed or man-in-the-middle attacks.","'mutt' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","57"
"44","1.3.6.1.4.1.25623.1.0.892529",,"Debian LTS: Security Advisory for mutt (DLA-2529-1)","The remote host is missing an update for the 'mutt'  package(s) announced via the DLA-2529-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.7.2-1+deb9u5.\n\nWe recommend that you upgrade your mutt packages.","rfc822.c in Mutt through 2.0.4 allows remote attackers tocause a denial of service (mailbox unavailability) by sendingemail messages with sequences of semicolon characters inRFC822 address fields (aka terminators of empty groups).\n\nA small email message from the attacker can cause largememory consumption, and the victim may then be unable tosee email messages from other persons.","'mutt' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","10"
"45","1.3.6.1.4.1.25623.1.0.892491",,"Debian LTS: Security Advisory for openexr (DLA-2491-1)","The remote host is missing an update for the 'openexr'  package(s) announced via the DLA-2491-1 advisory.","For Debian 9 'Stretch', these problems has been fixed in version2.2.0-11+deb9u2.\n\nWe recommend that you upgrade your openexr packages.","Two issues were discovered in openexr, a set of tools to manipulateOpenEXR image files, often in the computer-graphics industry forvisual effects and animation.","'openexr' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","292"
"46","1.3.6.1.4.1.25623.1.0.892550",,"Debian LTS: Security Advisory for openjpeg2 (DLA-2550-1)","The remote host is missing an update for the 'openjpeg2'  package(s) announced via the DLA-2550-1 advisory.","For Debian 9 stretch, these problems have been fixed in version2.1.2-1.1+deb9u6.\n\nWe recommend that you upgrade your openjpeg2 packages.","Various overflow errors were identified and fixed.\n\nCVE-2020-27814\n\nA heap-buffer overflow was found in the way openjpeg2 handled certain PNG format files.\n\nCVE-2020-27823\n\nWrong computation of x1,y1 if -d option is used, resulting in heap bufferoverflow.\n\nCVE-2020-27824\n\nGlobal buffer overflow on irreversible conversion when too manydecomposition levels are specified.\n\nCVE-2020-27841\n\nCrafted input to be processed by the openjpeg encoder could cause anout-of-bounds read.\n\nCVE-2020-27844\n\nCrafted input to be processed by the openjpeg encoder could cause anout-of-bounds write.\n\nCVE-2020-27845\n\nCrafted input can cause out-of-bounds-read.","'openjpeg2' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","108"
"47","1.3.6.1.4.1.25623.1.0.892481",,"Debian LTS: Security Advisory for openldap (DLA-2481-1)","The remote host is missing an update for the 'openldap'  package(s) announced via the DLA-2481-1 advisory.","For Debian 9 stretch, these problems have been fixed in version2.4.44+dfsg-5+deb9u6.\n\nWe recommend that you upgrade your openldap packages.","Two vulnerabilities in the certificate list syntax verification andin the handling of CSN normalization were discovered in OpenLDAP, afree implementation of the Lightweight Directory Access Protocol.An unauthenticated remote attacker can take advantage of theseflaws to cause a denial of service (slapd daemon crash) viaspecially crafted packets.","'openldap' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","171"
"48","1.3.6.1.4.1.25623.1.0.892544",,"Debian LTS: Security Advisory for openldap (DLA-2544-1)","The remote host is missing an update for the 'openldap'  package(s) announced via the DLA-2544-1 advisory.","For Debian 9 stretch, these problems have been fixed in version2.4.44+dfsg-5+deb9u7.\n\nWe recommend that you upgrade your openldap packages.","Several vulnerabilities were discovered in OpenLDAP, a freeimplementation of the Lightweight Directory Access Protocol. Anunauthenticated remote attacker can take advantage of these flaws tocause a denial of service (slapd daemon crash, infinite loops) viaspecially crafted packets.","'openldap' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","153"
"49","1.3.6.1.4.1.25623.1.0.892574",,"Debian LTS: Security Advisory for openldap (DLA-2574-1)","The remote host is missing an update for the 'openldap'  package(s) announced via the DLA-2574-1 advisory.","For Debian 9 stretch, this problem has been fixed in version2.4.44+dfsg-5+deb9u8.\n\nWe recommend that you upgrade your openldap packages.","A vulnerability in the Certificate List Exact Assertion validationwas discovered in OpenLDAP, a free implementation of the LightweightDirectory Access Protocol. An unauthenticated remote attacker cantake advantage of this flaw to cause a denial of service (slapddaemon crash) via specially crafted packets.","'openldap' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","170"
"50","1.3.6.1.4.1.25623.1.0.892492",,"Debian LTS: Security Advisory for openssl (DLA-2492-1)","The remote host is missing an update for the 'openssl'  package(s) announced via the DLA-2492-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.1.0l-1~deb9u2.\n\nWe recommend that you upgrade your openssl packages.","David Benjamin discovered a flaw in the GENERAL_NAME_cmp() functionwhich could cause a NULL dereference, resulting in denial of service.","'openssl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","87"
"51","1.3.6.1.4.1.25623.1.0.892563",,"Debian LTS: Security Advisory for openssl (DLA-2563-1)","The remote host is missing an update for the 'openssl'  package(s) announced via the DLA-2563-1 advisory.","For Debian 9 'Stretch', these problems have been fixed in version1.1.0l-1~deb9u3.\n\nWe recommend that you upgrade your openssl packages.","It was discovered that there were two issues in the opensslcryptographic system:\n\n  * CVE-2021-23840: Prevent an issue where 'Digital EnVeloPe'EVP-related calls could cause applications to behave incorrectlyor even crash.\n\n  * CVE-2021-23841: Prevent an issue in the X509 certificate parsingcaused by the lack of error handling while ingesting the 'issuer'field.","'openssl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","290"
"52","1.3.6.1.4.1.25623.1.0.892493",,"Debian LTS: Security Advisory for openssl1.0 (DLA-2493-1)","The remote host is missing an update for the 'openssl1.0'  package(s) announced via the DLA-2493-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.0.2u-1~deb9u3.\n\nWe recommend that you upgrade your openssl1.0 packages.","David Benjamin discovered a flaw in the GENERAL_NAME_cmp() functionwhich could cause a NULL dereference, resulting in denial of service.","'openssl1.0' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","223"
"53","1.3.6.1.4.1.25623.1.0.892565",,"Debian LTS: Security Advisory for openssl1.0 (DLA-2565-1)","The remote host is missing an update for the 'openssl1.0'  package(s) announced via the DLA-2565-1 advisory.","For Debian 9 'Stretch', these problems have been fixed in version1.0.2u-1~deb9u4. For the equivalent changes for the 1.1 branch ofOpenSSL, please see DLA-2563-1.\n\nWe recommend that you upgrade your openssl1.0 packages.","It was discovered that there were two issues in the 1.0 branch of theOpenSSL cryptographic system:\n\n  * CVE-2021-23840: Prevent an issue where 'Digital EnVeloPe'EVP-related calls could cause applications to behave incorrectlyor even crash.\n\n  * CVE-2021-23841: Prevent an issue in the X509 certificatehandling caused by the lack of error handling whilst parsing'issuer' fields.","'openssl1.0' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","234"
"54","1.3.6.1.4.1.25623.1.0.892513",,"Debian LTS: Security Advisory for p11-kit (DLA-2513-1)","The remote host is missing an update for the 'p11-kit'  package(s) announced via the DLA-2513-1 advisory.","For Debian 9 stretch, these problems have been fixed in version0.23.3-2+deb9u1.\n\nWe recommend that you upgrade your p11-kit packages.","Several memory safety issues affecting the RPC protocol were fixed inp11-kit, a library providing a way to load and enumerate PKCS#11modules.\n\nCVE-2020-29361\n\nMultiple integer overflows\n\nCVE-2020-29362\n\nHeap-based buffer over-read","'p11-kit' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","73"
"55","1.3.6.1.4.1.25623.1.0.892478",,"Debian LTS: Security Advisory for postgresql-9.6 (DLA-2478-1)","The remote host is missing an update for the 'postgresql-9.6'  package(s) announced via the DLA-2478-1 advisory.","For Debian 9 stretch, these problems have been fixed in version9.6.20-0+deb9u1.\n\nWe recommend that you upgrade your postgresql-9.6 packages.","Several vulnerabilities have been found in the PostgreSQL database system.\n\nCVE-2020-25694\n\nPeter Eisentraut found that database reconnections may drop optionsfrom the original connection, such as encryption, which could leadto information disclosure or a man-in-the-middle attack.\n\nCVE-2020-25695\n\nEtienne Stalmans reported that a user with permissions to createnon-temporary objects in an schema can execute arbitrary SQLfunctions as a superuser.\n\nCVE-2020-25696\n\nNick Cleaton found that the \\gset command modified variables thatcontrol the psql behaviour, which could result in a compromised ormalicious server executing arbitrary code in the user session.","'postgresql-9.6' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","204"
"56","1.3.6.1.4.1.25623.1.0.892488",,"Debian LTS: Security Advisory for python-apt (DLA-2488-1)","The remote host is missing an update for the 'python-apt'  package(s) announced via the DLA-2488-1 advisory.","For Debian 9 stretch, this problem has been fixed in version1.4.2.\n\nWe recommend that you upgrade your python-apt packages.","Various memory and file descriptor leaks were discovered in the Pythoninterface to the APT package management runtime library, which couldresult in denial of service.","'python-apt' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","132"
"57","1.3.6.1.4.1.25623.1.0.892540",,"Debian LTS: Security Advisory for python-django (DLA-2540-1)","The remote host is missing an update for the 'python-django'  package(s) announced via the DLA-2540-1 advisory.","For Debian 9 'Stretch', this problem has been fixed in version1:1.10.7-2+deb9u10.\n\nWe recommend that you upgrade your python-django packages.","It was discovered that there was a potential directory-traversal inDjango, a Python-based web development framework.","'python-django' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","199"
"58","1.3.6.1.4.1.25623.1.0.892569",,"Debian LTS: Security Advisory for python-django (DLA-2569-1)","The remote host is missing an update for the 'python-django'  package(s) announced via the DLA-2569-1 advisory.","For Debian 9 'Stretch', this problem has been fixed in version1:1.10.7-2+deb9u11.\n\nWe recommend that you upgrade your python-django packages.","It was discovered that there was a web cache poisoning attack inDjango, a popular Python-based web development framework.\n\nThis was caused by the unsafe handling of semicolon characters in Python'surllib.parse.parse_qsl method which had been backported to Django'scodebase to fix some other security issues in the past.","'python-django' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","49"
"59","1.3.6.1.4.1.25623.1.0.892622",,"Debian LTS: Security Advisory for python-django (DLA-2622-1)","The remote host is missing an update for the 'python-django'  package(s) announced via the DLA-2622-1 advisory.","For Debian 9 'Stretch', this problem has been fixed in version1:1.10.7-2+deb9u12.\n\nWe recommend that you upgrade your python-django packages.","It was discovered that there was a potential directory traversalissue in Django, a Python-based web development framework.\n\nThe vulnerability could have been exploited by maliciously craftedfilenames. However, the upload handlers built into Django itselfwere not affected.","'python-django' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","203"
"60","1.3.6.1.4.1.25623.1.0.892651",,"Debian LTS: Security Advisory for python-django (DLA-2651-1)","The remote host is missing an update for the 'python-django'  package(s) announced via the DLA-2651-1 advisory.","For Debian 9 'Stretch', this problem has been fixed in version1:1.10.7-2+deb9u13.\n\nWe recommend that you upgrade your python-django packages.","It was discovered that there was potential directory-traversalvulnerability in Django, a popular Python-based web developmentframework.\n\nThe MultiPartParser, UploadedFile and FieldFile classes alloweddirectory-traversal via uploaded files with suitably crafted filenames. In order to mitigate this risk, stricter basename and pathsanitation is now applied. Specifically, empty file names and pathswith dot segments are rejected.","'python-django' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","295"
"61","1.3.6.1.4.1.25623.1.0.892628",,"Debian LTS: Security Advisory for python2.7 (DLA-2628-1)","The remote host is missing an update for the 'python2.7'  package(s) announced via the DLA-2628-1 advisory.","For Debian 9 stretch, these problems have been fixed in version2.7.13-2+deb9u5.\n\nWe recommend that you upgrade your python2.7 packages.","Two security issues have been discovered in python2.7:\n\nCVE-2019-16935\n\nThe documentation XML-RPC server in Python 2.7 has XSS via the server_titlefield. This occurs in Lib/DocXMLRPCServer.py in Python 2.x, and inLib/xmlrpc/server.py in Python 3.x. If set_server_title is called withuntrusted input, arbitrary JavaScript can be delivered to clients thatvisit the http URL for this server.\n\nCVE-2021-23336\n\nThe Python2.7 vulnerable to Web Cache Poisoning via urllib.parse.parse_qsland urllib.parse.parse_qs by using a vector called parameter cloaking. Whenthe attacker can separate query parameters using a semicolon, they cancause a difference in the interpretation of the request between the proxy(running with default configuration) and the server. This can result in maliciousrequests being cached as completely safe ones, as the proxy would usually notsee the semicolon as a separator, and therefore would not include it in a cachekey of an unkeyed parameter.\n\n**Attention, API-change!**Please be sure your software is working properly if it uses `urllib.parse.parse_qs`or `urllib.parse.parse_qsl`, `cgi.parse` or `cgi.parse_multipart`.\n\nEarlier Python versions allowed using both semicolon and ``&`` as query parameterseparators in `urllib.parse.parse_qs` and `urllib.parse.parse_qsl`.Due to security concerns, and to conform withnewer W3C recommendations, this has been changed to allow only a singleseparator key, with ``&`` as the default. This change also affects`cgi.parse` and `cgi.parse_multipart` as they use the affectedfunctions internally. For more details, please see their respectivedocumentation.","'python2.7' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","11"
"62","1.3.6.1.4.1.25623.1.0.892456",,"Debian LTS: Security Advisory for python3.5 (DLA-2456-1)","The remote host is missing an update for the 'python3.5'  package(s) announced via the DLA-2456-1 advisory.","For Debian 9 stretch, these problems have been fixed in version3.5.3-1+deb9u3.\n\nWe recommend that you upgrade your python3.5 packages.","Multiple security issues were discovered in Python.\n\nCVE-2019-20907\n\nIn Lib/tarfile.py, an attacker is able to craft a TARarchive leading to an infinite loop when opened by tarfile.open,because _proc_pax lacks header validation\n\nCVE-2020-26116\n\nhttp.client allows CRLF injection if the attacker controlsthe HTTP request method","'python3.5' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","77"
"63","1.3.6.1.4.1.25623.1.0.892619",,"Debian LTS: Security Advisory for python3.5 (DLA-2619-1)","The remote host is missing an update for the 'python3.5'  package(s) announced via the DLA-2619-1 advisory.","For Debian 9 stretch, these problems have been fixed in version3.5.3-1+deb9u4.\n\nWe recommend that you upgrade your python3.5 packages.","Three security issues have been discovered in python3.5:\n\nCVE-2021-3177\n\nPython 3.x has a buffer overflow in PyCArg_repr in _ctypes/callproc.c,which may lead to remote code execution in certain Python applications that acceptfloating-point numbers as untrusted input.This occurs because sprintf is used unsafely.\n\nCVE-2021-3426\n\nRunning `pydoc -p` allows other local users to extract arbitrary files.The `/getfile?key=path` URL allows to read arbitrary file on the filesystem.\n\nThe fix removes the 'getfile' feature of the pydoc module whichcould be abused to read arbitrary files on the disk (directorytraversal vulnerability).\n\nCVE-2021-23336\n\nThe Python3.5 vulnerable to Web Cache Poisoning via urllib.parse.parse_qsland urllib.parse.parse_qs by using a vector called parameter cloaking. Whenthe attacker can separate query parameters using a semicolon, they cancause a difference in the interpretation of the request between the proxy(running with default configuration) and the server. This can result in maliciousrequests being cached as completely safe ones, as the proxy would usually notsee the semicolon as a separator, and therefore would not include it in a cachekey of an unkeyed parameter.\n\n**Attention, API-change!**Please be sure your software is working properly if it uses `urllib.parse.parse_qs`or `urllib.parse.parse_qsl`, `cgi.parse` or `cgi.parse_multipart`.\n\nEarlier Python versions allowed using both semicolon and ``&`` as query parameterseparators in `urllib.parse.parse_qs` and `urllib.parse.parse_qsl`.Due to security concerns, and to conform withnewer W3C recommendations, this has been changed to allow only a singleseparator key, with ``&`` as the default. This change also affects`cgi.parse` and `cgi.parse_multipart` as they use the affectedfunctions internally. For more details, please see their respectivedocumentation.","'python3.5' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","191"
"64","1.3.6.1.4.1.25623.1.0.892570",,"Debian LTS: Security Advisory for screen (DLA-2570-1)","The remote host is missing an update for the 'screen'  package(s) announced via the DLA-2570-1 advisory.","For Debian 9 stretch, this problem has been fixed in version4.5.0-6+deb9u1.\n\nWe recommend that you upgrade your screen packages.","encoding.c in GNU Screen through 4.8.0 allows remote attackersto cause a denial of service (invalid write access and applicationcrash) or possibly have unspecified other impact via a craftedUTF-8 character sequence.","'screen' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","84"
"65","1.3.6.1.4.1.25623.1.0.892444",,"Debian LTS: Security Advisory for tcpdump (DLA-2444-1)","The remote host is missing an update for the 'tcpdump'  package(s) announced via the DLA-2444-1 advisory.","For Debian 9 stretch, this problem has been fixed in version4.9.3-1~deb9u2.\n\nWe recommend that you upgrade your tcpdump packages.","The ppp de-capsulator in tcpdump 4.9.3 can be convinced to allocatea large amount of memory.\n\nThe buffer should be big enough to hold the captured data, but itdoesn't need to be big enough to hold the entire on-the-networkpacket, if we haven't captured all of it.","'tcpdump' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","225"
"66","1.3.6.1.4.1.25623.1.0.892525",,"Debian LTS: Security Advisory for wavpack (DLA-2525-1)","The remote host is missing an update for the 'wavpack'  package(s) announced via the DLA-2525-1 advisory.","For Debian 9 stretch, these problems have been fixed in version5.0.0-2+deb9u3.\n\nWe recommend that you upgrade your wavpack packages.","Multiple vulnerabilities in wavpack were found, like OOB read(which could potentially lead to a DOS attack), unexpectedcontrol flow, crashes, integer overflow, and segfaults.","'wavpack' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","265"
"67","1.3.6.1.4.1.25623.1.0.892558",,"Debian LTS: Security Advisory for xterm (DLA-2558-1)","The remote host is missing an update for the 'xterm'  package(s) announced via the DLA-2558-1 advisory.","For Debian 9 stretch, this problem has been fixed in version327-2+deb9u1.\n\nWe recommend that you upgrade your xterm packages.","xterm through Patch #365 allows remote attackers to cause adenial of service (segmentation fault) or possibly haveunspecified other impact via a crafted UTF-8 character sequence.","'xterm' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","210"
"68","1.3.6.1.4.1.25623.1.0.704484",,"Debian Security Advisory DSA 4484-1 (linux - security update)","The remote host is missing an update for the 'linux'  package(s) announced via the DSA-4484-1 advisory.","For the oldstable distribution (stretch), this problem has been fixedin version 4.9.168-1+deb9u4.\n\nFor the stable distribution (buster), this problem has been fixed inversion 4.19.37-5+deb10u1. This update includes as well a patch for aregression introduced by the original fix for CVE-2019-11478(#930904).\n\nWe recommend that you upgrade your linux packages.","Jann Horn discovered that the ptrace subsystem in the Linux kernelmishandles the management of the credentials of a process that wants tocreate a ptrace relationship, allowing a local user to obtain rootprivileges under certain scenarios.","'linux' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","194"
"69","1.3.6.1.4.1.25623.1.0.704497",,"Debian Security Advisory DSA 4497-1 (linux - security update)","The remote host is missing an update for the 'linux'  package(s) announced via the DSA-4497-1 advisory.","For the oldstable distribution (stretch), these problems have been fixedin version 4.9.168-1+deb9u5.\n\nFor the stable distribution (buster), these problems were mostly fixedin version 4.19.37-5+deb10u2 or earlier.\n\nWe recommend that you upgrade your linux packages.","Several vulnerabilities have been discovered in the Linux kernel thatmay lead to a privilege escalation, denial of service or informationleaks.\n\nCVE-2015-8553Jan Beulich discovered that CVE-2015-2150was not completelyaddressed. If a PCI physical function is passed through to aXen guest, the guest is able to access its memory and I/Oregions before enabling decoding of those regions. This couldresult in a denial-of-service (unexpected NMI) on the host.\n\nThe fix for this is incompatible with qemu versions before 2.5.\n\nCVE-2017-18509Denis Andzakovic reported a missing type check in the IPv4 multicastrouting implementation. A user with the CAP_NET_ADMIN capability (inany user namespace) could use this for denial-of-service (memorycorruption or crash) or possibly for privilege escalation.\n\nCVE-2018-5995ADLab of VenusTech discovered that the kernel logged the virtualaddresses assigned to per-CPU data, which could make it easier toexploit other vulnerabilities.\n\nCVE-2018-20836chenxiang reported a race condition in libsas, the kernelsubsystem supporting Serial Attached SCSI (SAS) devices, whichcould lead to a use-after-free. It is not clear how this might beexploited.\n\nCVE-2018-20856Xiao Jin reported a potential double-free in the block subsystem,in case an error occurs while initialising the I/O scheduler for ablock device. It is not clear how this might be exploited.\n\nCVE-2019-1125It was discovered that most x86 processors could speculativelyskip a conditional SWAPGS instruction used when entering thekernel from user mode, and/or could speculatively execute it whenit should be skipped. This is a subtype of Spectre variant 1,which could allow local users to obtain sensitive information fromthe kernel or other processes. It has been mitigated by usingmemory barriers to limit speculative execution. Systems using ani386 kernel are not affected as the kernel does not use SWAPGS.\n\nCVE-2019-3882It was found that the vfio implementation did not limit the numberof DMA mappings to device memory. A local user granted ownershipof a vfio device could use this to cause a denial of service(out-of-memory condition).\n\nCVE-2019-3900It was discovered that vhost drivers did not properly control theamount of work done to service requests from guest VMs. Amalicious guest could use this to cause a denial-of-service(unbounded CPU usage) on the host.\n\nCVE-2019-10207The syzkaller tool found a potential null dereference in variousdrivers for UART-attached Bluetooth adapters. A local user withaccess to a pty device or other suitable tty device could use thisfor denial-of-service (BUG/oops).\n\nCVE-20 ...\n\n  Description truncated. Please see the references for more information.","'linux' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","143"
"70","1.3.6.1.4.1.25623.1.0.704808",,"Debian: Security Advisory for apt (DSA-4808-1)","The remote host is missing an update for the 'apt'  package(s) announced via the DSA-4808-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.8.2.2.\n\nWe recommend that you upgrade your apt packages.","It was discovered that missing input validation in the ar/tarimplementations of APT, the high level package manager, could causeout-of-bounds reads or infinite loops, resulting in denial of servicewhen processing malformed deb files.","'apt' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","64"
"71","1.3.6.1.4.1.25623.1.0.704857",,"Debian: Security Advisory for bind9 (DSA-4857-1)","The remote host is missing an update for the 'bind9'  package(s) announced via the DSA-4857-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1:9.11.5.P4+dfsg-5.1+deb10u3.\n\nWe recommend that you upgrade your bind9 packages.","A buffer overflow vulnerability was discovered in the SPNEGOimplementation affecting the GSSAPI security policy negotiation in BIND,a DNS server implementation, which could result in denial of service(daemon crash), or potentially the execution of arbitrary code.","'bind9' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","114"
"72","1.3.6.1.4.1.25623.1.0.704909",,"Debian: Security Advisory for bind9 (DSA-4909-1)","The remote host is missing an update for the 'bind9'  package(s) announced via the DSA-4909-1 advisory.","For the stable distribution (buster), these problems have been fixed inversion 1:9.11.5.P4+dfsg-5.1+deb10u5.\n\nWe recommend that you upgrade your bind9 packages.","Several vulnerabilities were discovered in BIND, a DNS serverimplementation.\n\nCVE-2021-25214Greg Kuechle discovered that a malformed incoming IXFR transfercould trigger an assertion failure in named, resulting in denialof service.\n\nCVE-2021-25215Siva Kakarla discovered that named could crash when a DNAME recordplaced in the ANSWER section during DNAME chasing turned out to bethe final answer to a client query.\n\nCVE-2021-25216It was discovered that the SPNEGO implementation used by BIND isprone to a buffer overflow vulnerability. This update switches touse the SPNEGO implementation from the Kerberos libraries.","'bind9' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","62"
"73","1.3.6.1.4.1.25623.1.0.704881",,"Debian: Security Advisory for curl (DSA-4881-1)","The remote host is missing an update for the 'curl'  package(s) announced via the DSA-4881-1 advisory.","For the stable distribution (buster), these problems have been fixed inversion 7.64.0-4+deb10u2.\n\nWe recommend that you upgrade your curl packages.","Multiple vulnerabilities were discovered in cURL, an URL transfer library:\n\nCVE-2020-8169Marek Szlagor reported that libcurl could be tricked into prependinga part of the password to the host name before it resolves it,potentially leaking the partial password over the network and to theDNS server(s).\n\nCVE-2020-8177sn reported that curl could be tricked by a malicious server intooverwriting a local file when using the -J (--remote-header-name) and -i(--include) options in the same command line.\n\nCVE-2020-8231Marc Aldorasi reported that libcurl might use the wrong connectionwhen an application using libcurl's multi API sets the optionCURLOPT_CONNECT_ONLY, which could lead to information leaks.\n\nCVE-2020-8284Varnavas Papaioannou reported that a malicious server could use thePASV response to trick curl into connecting back to an arbitrary IPaddress and port, potentially making curl extract information aboutservices that are otherwise private and not disclosed.\n\nCVE-2020-8285xnynx reported that libcurl could run out of stack space when usingthe FTP wildcard matching functionality (CURLOPT_CHUNK_BGN_FUNCTION).\n\nCVE-2020-8286It was reported that libcurl didn't verify that an OCSP responseactually matches the certificate it is intended to.\n\nCVE-2021-22876Viktor Szakats reported that libcurl does not strip off usercredentials from the URL when automatically populating the RefererHTTP request header field in outgoing HTTP requests.\n\nCVE-2021-22890Mingtao Yang reported that, when using an HTTPS proxy and TLS 1.3,libcurl could confuse session tickets arriving from the HTTPS proxyas if they arrived from the remote server instead. This could allowan HTTPS proxy to trick libcurl into using the wrong session ticketfor the host and thereby circumvent the server TLS certificate check.","'curl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","253"
"74","1.3.6.1.4.1.25623.1.0.704795",,"Debian: Security Advisory for krb5 (DSA-4795-1)","The remote host is missing an update for the 'krb5'  package(s) announced via the DSA-4795-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.17-3+deb10u1.\n\nWe recommend that you upgrade your krb5 packages.","Demi Obeneour discovered that unbounded recursion in the ASN1 parserof libkrb5 could result in denial of service.","'krb5' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","110"
"75","1.3.6.1.4.1.25623.1.0.704850",,"Debian: Security Advisory for libzstd (DSA-4850-1)","The remote host is missing an update for the 'libzstd'  package(s) announced via the DSA-4850-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.3.8+dfsg-3+deb10u1.\n\nWe recommend that you upgrade your libzstd packages.","It was discovered that zstd, a compression utility, temporarilyexposed a world-readable version of its input even if the originalfile had restrictive permissions.","'libzstd' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","29"
"76","1.3.6.1.4.1.25623.1.0.704859",,"Debian: Security Advisory for libzstd (DSA-4859-1)","The remote host is missing an update for the 'libzstd'  package(s) announced via the DSA-4859-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.3.8+dfsg-3+deb10u2.\n\nWe recommend that you upgrade your libzstd packages.","It was discovered that zstd, a compression utility, was vulnerable toa race condition: it temporarily exposed, during a very shorttimeframe, a world-readable version of its input even if the originalfile had restrictive permissions.","'libzstd' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","217"
"77","1.3.6.1.4.1.25623.1.0.704845",,"Debian: Security Advisory for openldap (DSA-4845-1)","The remote host is missing an update for the 'openldap'  package(s) announced via the DSA-4845-1 advisory.","For the stable distribution (buster), these problems have been fixed inversion 2.4.47+dfsg-3+deb10u5.\n\nWe recommend that you upgrade your openldap packages.","Several vulnerabilities were discovered in OpenLDAP, a freeimplementation of the Lightweight Directory Access Protocol. Anunauthenticated remote attacker can take advantage of these flaws tocause a denial of service (slapd daemon crash, infinite loops) viaspecially crafted packets.","'openldap' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","4"
"78","1.3.6.1.4.1.25623.1.0.704860",,"Debian: Security Advisory for openldap (DSA-4860-1)","The remote host is missing an update for the 'openldap'  package(s) announced via the DSA-4860-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 2.4.47+dfsg-3+deb10u6.\n\nWe recommend that you upgrade your openldap packages.","A vulnerability in the Certificate List Exact Assertion validation wasdiscovered in OpenLDAP, a free implementation of the LightweightDirectory Access Protocol. An unauthenticated remote attacker can takeadvantage of this flaw to cause a denial of service (slapd daemon crash)via specially crafted packets.","'openldap' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","279"
"79","1.3.6.1.4.1.25623.1.0.704807",,"Debian: Security Advisory for openssl (DSA-4807-1)","The remote host is missing an update for the 'openssl'  package(s) announced via the DSA-4807-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.1.1d-0+deb10u4.\n\nWe recommend that you upgrade your openssl packages.","David Benjamin discovered a flaw in the GENERAL_NAME_cmp() functionwhich could cause a NULL dereference, resulting in denial of service.\n\nAdditional details can be found in the linked upstream advisory.","'openssl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","208"
"80","1.3.6.1.4.1.25623.1.0.704855",,"Debian: Security Advisory for openssl (DSA-4855-1)","The remote host is missing an update for the 'openssl'  package(s) announced via the DSA-4855-1 advisory.","For the stable distribution (buster), these problems have been fixed inversion 1.1.1d-0+deb10u5.\n\nWe recommend that you upgrade your openssl packages.","Multiple vulnerabilities have been discovered in OpenSSL, a SecureSockets Layer toolkit. An overflow bug in the x64_64 Montgomery squaringprocedure, an integer overflow in CipherUpdate and a NULL pointerdereference flaw X509_issuer_and_serial_hash() were found, which couldresult in denial of service.\n\nAdditional details can be found in the upstream advisories [link moved to references] and[link moved to references].","'openssl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","190"
"81","1.3.6.1.4.1.25623.1.0.704875",,"Debian: Security Advisory for openssl (DSA-4875-1)","The remote host is missing an update for the 'openssl'  package(s) announced via the DSA-4875-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.1.1d-0+deb10u6.\n\nWe recommend that you upgrade your openssl packages.","A NULL pointer dereference was found in the signature_algorithmsprocessing in OpenSSL, a Secure Sockets Layer toolkit, which couldresult in denial of service.\n\nAdditional details can be found in the upstream advisory:[link moved to references]","'openssl' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","98"
"82","1.3.6.1.4.1.25623.1.0.704822",,"Debian: Security Advisory for p11-kit (DSA-4822-1)","The remote host is missing an update for the 'p11-kit'  package(s) announced via the DSA-4822-1 advisory.","For the stable distribution (buster), these problems have been fixed inversion 0.23.15-2+deb10u1.\n\nWe recommend that you upgrade your p11-kit packages.","David Cook reported several memory safety issues affecting the RPCprotocol in p11-kit, a library providing a way to load and enumeratePKCS#11 modules.","'p11-kit' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","17"
"83","1.3.6.1.4.1.25623.1.0.704809",,"Debian: Security Advisory for python-apt (DSA-4809-1)","The remote host is missing an update for the 'python-apt'  package(s) announced via the DSA-4809-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.8.4.2.\n\nWe recommend that you upgrade your python-apt packages.","Various memory and file descriptor leaks were discovered in the Pythoninterface to the APT package management runtime library, which couldresult in denial of service.","'python-apt' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","216"
"84","1.3.6.1.4.1.25623.1.0.704839",,"Debian: Security Advisory for sudo (DSA-4839-1)","The remote host is missing an update for the 'sudo'  package(s) announced via the DSA-4839-1 advisory.","For the stable distribution (buster), this problem has been fixed inversion 1.8.27-1+deb10u3.\n\nWe recommend that you upgrade your sudo packages.","The Qualys Research Labs discovered a heap-based buffer overflowvulnerability in sudo, a program designed to provide limited super userprivileges to specific users. Any local user (sudoers and non-sudoers)can exploit this flaw for root privilege escalation.","'sudo' package(s) on Debian Linux.","Checks if a vulnerable package version is present on the target host.","134"
"85","1.3.6.1.4.1.25623.1.0.117182",,"Elastic Elasticsearch Information Disclosure Vulnerability (ESA-2021-01)","Elasticsearch is prone to an information disclosure vulnerability.","Update to version 7.10.2 or later.","An information disclosure flaw was found in the Elasticsearch async  search API. Users who execute an async search will store the HTTP headers.","Elasticsearch versions starting with 7.7.0 and before 7.10.2.","Checks if a vulnerable version is present on the target host.","6"
"86","1.3.6.1.4.1.25623.1.0.145568",,"Elastic Elasticsearch Information Disclosure Vulnerability (ESA-2021-05)","Elasticsearch is prone to an information disclosure vulnerability.","Update to version 7.11.0 or later.","A document disclosure flaw was found in Elasticsearch when Document or  Field Level Security is used. Get requests do not properly apply security permissions when executing a query  against a recently updated document. This affects documents that have been updated and not yet refreshed in  the index.","Elasticsearch versions after 7.6.0 and before 7.11.0.","Checks if a vulnerable version is present on the target host.","243"
"87","1.3.6.1.4.1.25623.1.0.817664",,"Microsoft .NET Framework Denial of Service Vulnerability (KB4601887)","This host is missing an important security  update according to Microsoft KB4601887","The vendor has released updates. Please see the references for more information.","The flaw exists due to an error when the .NET  Framework improperly handles data.","Microsoft .NET Framework 4.7.2 and 4.8 on Microsoft Windows 10 version 1809 and Microsoft Windows Server 2019.","Checks if a vulnerable version is present on the target host.","291"
"88","1.3.6.1.4.1.25623.1.0.817572",,"Microsoft Windows Multiple Vulnerabilities (KB4598230)","This host is missing a critical security  update according to Microsoft KB4598230","The vendor has released updates. Please see  the references for more information.","Multiple flaws exist due to,\n\n  - An error in Windows DNS Query.\n\n  - An error in Windows AppX Deployment Extensions.\n\n  - An error in Windows Docker.\n\n  - An error in Microsoft splwow64.\n\n  For more information about the vulnerabilities refer to Reference links.","- Microsoft Windows 10 Version 1809 for 32-bit Systems\n\n  - Microsoft Windows 10 Version 1809 for x64-based Systems\n\n  - Microsoft Windows Server 2019","Checks if a vulnerable version is present  on the target host.","2"
"89","1.3.6.1.4.1.25623.1.0.818003",,"Microsoft Windows Multiple Vulnerabilities (KB4601345)","This host is missing a critical security  update according to Microsoft KB4601345","The vendor has released updates. Please see  the references for more information.","Multiple flaws exist due to,\n\n  - An error in Windows Fax Service.\n\n  - An error in Windows Installer.\n\n  - An error in Windows Remote Procedure Call.\n\n  - An error in Windows TCP/IP.\n\n  For more information about the vulnerabilities refer to Reference links.","- Microsoft Windows 10 Version 1809 for 32-bit Systems\n\n  - Microsoft Windows 10 Version 1809 for x64-based Systems\n\n  - Microsoft Windows Server 2019","Checks if a vulnerable version is present  on the target host.","2"
"90","1.3.6.1.4.1.25623.1.0.817686",,"Microsoft Windows Multiple Vulnerabilities (KB5001342)","This host is missing a critical security  update according to Microsoft KB5001342","The vendor has released updates. Please see  the references for more information.","Multiple flaws exist due to,\n\n  - Multiple errors in Windows Installer.\n\n  - An error in Microsoft 'Win32k' component.\n\n  - An error in Windows Media Photo Codec component.\n\n  For more information about the vulnerabilities refer to Reference links.","- Microsoft Windows 10 Version 1809 for 32-bit Systems\n\n  - Microsoft Windows 10 Version 1809 for x64-based Systems\n\n  - Microsoft Windows Server 2019","Checks if a vulnerable version is present  on the target host.","2"
"91","1.3.6.1.4.1.25623.1.0.108766",,"Missing Linux Kernel mitigations for 'iTLB multihit' hardware vulnerabilities","The remote host is missing one or more known mitigation(s) on Linux Kernel  side for the referenced 'iTLB multihit' hardware vulnerabilities.","Enable the mitigation(s) in the Linux Kernel or update to a more  recent Linux Kernel.",,,"Checks previous gathered information on the mitigation status reported  by the Linux Kernel.","246"
"92","1.3.6.1.4.1.25623.1.0.108839",,"Missing Linux Kernel mitigations for 'L1TF - L1 Terminal Fault' hardware vulnerabilities","The remote host is missing one or more known mitigation(s) on Linux Kernel  side for the referenced 'L1TF - L1 Terminal Fault' hardware vulnerabilities.","Enable the mitigation(s) in the Linux Kernel or update to a more  recent Linux Kernel.",,,"Checks previous gathered information on the mitigation status reported  by the Linux Kernel.","246"
"93","1.3.6.1.4.1.25623.1.0.108840",,"Missing Linux Kernel mitigations for 'MDS - Microarchitectural Data Sampling' hardware vulnerabilities","The remote host is missing one or more known mitigation(s) on Linux Kernel  side for the referenced 'MDS - Microarchitectural Data Sampling' hardware vulnerabilities.","Enable the mitigation(s) in the Linux Kernel or update to a more  recent Linux Kernel.",,,"Checks previous gathered information on the mitigation status reported  by the Linux Kernel.","246"
"94","1.3.6.1.4.1.25623.1.0.108845",,"Missing Linux Kernel mitigations for 'SRBDS - Special Register Buffer Data Sampling' hardware vulnerabilities","The remote host is missing one or more known mitigation(s) on Linux Kernel  side for the referenced 'SRBDS - Special Register Buffer Data Sampling' hardware vulnerabilities.","Enable the mitigation(s) in the Linux Kernel or update to a more  recent Linux Kernel.",,,"Checks previous gathered information on the mitigation status reported  by the Linux Kernel.","246"
"95","1.3.6.1.4.1.25623.1.0.108842",,"Missing Linux Kernel mitigations for 'SSB - Speculative Store Bypass' hardware vulnerabilities","The remote host is missing one or more known mitigation(s) on Linux Kernel  side for the referenced 'SSB - Speculative Store Bypass' hardware vulnerabilities.","Enable the mitigation(s) in the Linux Kernel or update to a more  recent Linux Kernel.",,,"Checks previous gathered information on the mitigation status reported  by the Linux Kernel.","246"
"96","1.3.6.1.4.1.25623.1.0.108846",,"Missing Linux Kernel mitigations for 'TAA - TSX Asynchronous Abort' hardware vulnerabilities","The remote host is missing one or more known mitigation(s) on Linux Kernel  side for the referenced 'TAA - TSX Asynchronous Abort' hardware vulnerabilities.","Enable the mitigation(s) in the Linux Kernel or update to a more  recent Linux Kernel.",,,"Checks previous gathered information on the mitigation status reported  by the Linux Kernel.","246"
"97","1.3.6.1.4.1.25623.1.0.817909",,"Mozilla Firefox Security Update (mfsa2021-06)-Windows","The host is installed with Mozilla Firefox  and is prone to a buffer overflow vulnerability.","Upgrade to Mozilla Firefox version 85.0.1  or later. Please see the references for more information.","The flaw is due to a buffer overflow error  in depth pitch calculations for compressed textures.","Mozilla Firefox version before 85.0.1 on  Windows.","Checks if a vulnerable version is present  on the target host.","239"
"98","1.3.6.1.4.1.25623.1.0.817940",,"Mozilla Firefox Security Update (mfsa_2021-07_2021-09) - Windows","The host is installed with Mozilla Firefox  and is prone to multiple vulnerabilities.","Upgrade to Mozilla Firefox version 86  or later. Please see the references for more information.","Multiple flaws exist due to,\n\n  - Content Security Policy violation report could have contained the    destination of a redirect.\n\n  - Multithreaded WASM triggered assertions validating separation of script domains.\n\n  - noscript elements could have led to an HTML Sanitizer bypass.\n\n  - A website's Referrer-Policy could have been be overridden, potentially    resulting in the full URL being sent as a Referrer.\n\n  - HTTP Auth phishing warning was omitted when a redirect is cached.\n\n  - 'about:memory' Measure function caused an incorrect pointer operation.\n\n  - MediaError message property could have leaked information about cross-origin resources.\n\n  - Memory safety bugs.","Mozilla Firefox version before 86 on  Windows.","Checks if a vulnerable version is present  on the target host.","245"
"99","1.3.6.1.4.1.25623.1.0.817975",,"Mozilla Firefox Security Update (mfsa_2021-10_2021-12) - Windows","The host is installed with Mozilla Firefox  and is prone to multiple vulnerabilities.","Upgrade to Mozilla Firefox version 87  or later. Please see the references for more information.","Multiple flaws exist due to,\n\n  - Texture upload into an unbound backing buffer resulted in an out-of-bound read.\n\n  - Internal network hosts could have been probed by a malicious webpage.\n\n  - Transitions for invalid ::marker properties resulted in memory corruption.\n\n  - Malicious extensions could have spoofed popup information.\n\n  - Devtools remote debugging feature could have been enabled without indication to the user.\n\n  - A malicious extension could have performed credential-less same origin policy violations.\n\n  - Memory safety bugs.","Mozilla Firefox version before  87 on Windows.","Checks if a vulnerable version is present  on the target host.","229"
"100","1.3.6.1.4.1.25623.1.0.817516",,"Mozilla Firefox Security Updates(mfsa_2020-45_2020-46)-Windows","This host is installed with  Mozilla Firefox and is prone to multiple vulnerabilities.","Upgrade to Mozilla Firefox version 82  or later, Please see the references for more information.","Multiple flaws exist due to:\n\n  - Use-after-free in usersctp.\n\n  - Undefined behavior in bounded channel of crossbeam rust crate.\n\n  - Presence of external protocol handlers could be determined through image tags.\n\n  - Multiple WASM threads may have overwritten each others&#39, stub table entries.\n\n  - The domain associated with the prompt to open an external protocol could be spoofed to display the incorrect origin.\n\n  - Memory safety bugs fixed in Firefox 82 and Firefox ESR 78.4.\n\n  - Memory safety bugs fixed in Firefox 82.","Mozilla Firefox version before  82 on Windows.","Checks if a vulnerable version is present on the target host.","59"
"101","1.3.6.1.4.1.25623.1.0.817524",,"Mozilla Firefox Security Updates(mfsa_2020-49_2020-49)-Windows","This host is installed with  Mozilla Firefox and is prone to code execution vulnerability.","Upgrade to Mozilla Firefox version 82.0.3  or later, Please see the references for more information.","The flaw exists due to 'Write' side effects  in 'MCallGetProperty' opcode not accounted.","Mozilla Firefox version before  82.0.3 on Windows.","Checks if a vulnerable version is present on the target host.","285"
"102","1.3.6.1.4.1.25623.1.0.817841",,"Mozilla Firefox Security Updates(mfsa_2020-50_2020-52)-Windows","The host is installed with Mozilla Firefox  and is prone to multiple vulnerabilities.","Upgrade to Mozilla Firefox version 83  or later, Please see the references for more information.","Multiple flaws exist due to,\n\n  - Parsing mismatches could confuse and bypass security sanitizer for chrome privileged code.\n\n  - Out of memory handling of JITed, inlined functions could lead to a memory corruption.\n\n  - Variable time processing of cross-origin images during drawImage calls.\n\n  - Fullscreen could be enabled without displaying the security UI.\n\n  - Local spoofing of web manifests for arbitrary pages in Firefox for Android.\n\n  - XSS through paste (manual and clipboard API).\n\n  - OneCRL was not working in Firefox for Android.\n\n  - Requests intercepted through ServiceWorkers lacked MIME type restrictions.\n\n  - Use-after-free in WebRequestService.\n\n  - Potential use-after-free in uses of nsTArray.\n\n  - Heap buffer overflow in freetype.\n\n  - DoH did not filter IPv4 mapped IP Addresses.\n\n  - Cross-origin iframes supported login autofill.\n\n  - History and Location interfaces could have been used to hang the browser.\n\n  - Software keyboards may have remembered typed passwords.\n\n  - Single-word search queries were also broadcast to local network.\n\n  - Mutation Observers could break or confuse Firefox Screenshots feature.\n\n  - Memory safety bugs fixed.","Mozilla Firefox version before  83 on Windows.","Checks if a vulnerable version is present  on the target host.","269"
"103","1.3.6.1.4.1.25623.1.0.817554",,"Mozilla Firefox Security Updates(mfsa_2020-54_2020-56)-Windows","This host is installed with  Mozilla Firefox and is prone to multiple vulnerabilities.","Upgrade to Mozilla Firefox version 84  or later, Please see the references for more information.","Multiple flaws exist due to,\n\n  - Operations on a BigInt could have caused uninitialized memory to be exposed.\n\n  - Heap buffer overflow in WebGL.\n\n  - Use-After-Free in WebGL.\n\n  - CSS Sanitizer performed incorrect sanitization.\n\n  - Incorrect cast of StyleGenericFlexBasis resulted in a heap use-after-free.\n\n  - Malicious applications on Android could have induced Firefox for Android into sending arbitrary attacker-specified headers.\n\n  - HTTPS pages could have been intercepted by a registered service worker when they should not have been.\n\n  - URL spoofing via unresponsive port in Firefox for Android.\n\n  - Internal network hosts could have been probed by a malicious webpage.\n\n  - When entering an address in the address or search bars, a website could have redirected the user before they were navigated to the intended url.\n\n  - The proxy.onRequest API did not catch view-source URLs.\n\n  - Opening an extension-less download may have inadvertently launched an executable instead.\n\n  - Memory safety bugs fixed in Firefox 84 and Firefox ESR 78.6.\n\n  - Memory safety bugs fixed in Firefox 84.","Mozilla Firefox version before  84 on Windows.","Checks if a vulnerable version is present on the target host.","238"
"104","1.3.6.1.4.1.25623.1.0.817563",,"Mozilla Firefox Security Updates(mfsa_2021-01_2021-01)-Windows","This host is installed with  Mozilla Firefox and is prone to a use-after-free vulnerability.","Upgrade to Mozilla Firefox version 84.0.2  or later, Please see the references for more information.","The flaw exists due to,  Use-after-free write when handling a malicious COOKIE-ECHO SCTP chunk.","Mozilla Firefox version before  84.0.2 on Windows.","Checks if a vulnerable version is present on the target host.","181"
"105","1.3.6.1.4.1.25623.1.0.817892",,"Mozilla Firefox Security Updates(mfsa_2021-02_2021-05)-Windows","The host is installed with Mozilla Firefox  and is prone to multiple vulnerabilities.","Upgrade to Mozilla Firefox version 85  or later, Please see the references for more information.","Multiple flaws exist due to,\n\n  - Cross-origin information leakage via redirected PDF requests.\n\n  - Type confusion when using logical assignment operators in JavaScript switch    statements.\n\n  - Clickjacking across tabs through misusing requestPointerLock.\n\n  - File picker dialog could have been used to disclose a complete directory.\n\n  - Screen sharing permission leaked across tabs.\n\n  - Use-after-poison for incorrectly redeclared JavaScript variables during GC.\n\n  - More internal network hosts could have been probed by a malicious webpage.\n\n  - Use-after-poison in <code>nsTreeBodyFrame::RowCountChanged</code>.\n\n  - Permission prompt inaccessible after asking for additional permissions.\n\n  - Memory safety bugs.","Mozilla Firefox version before  85 on Windows.","Checks if a vulnerable version is present  on the target host.","24"
"106","1.3.6.1.4.1.25623.1.0.801581",,"MS Windows HID Functionality (Over USB) Code Execution Vulnerability","This host is installed with a USB device driver software and is  prone to a code execution vulnerability.","No solution or patch was made available for at least one year  since disclosure of this vulnerability. Likely none will be provided anymore. General solution  options are to upgrade to a newer release, disable respective features, remove the product or  replace the product by another one.\n\n  A workaround is to introduce device filtering on the target host to only allow trusted  USB devices to be enabled automatically. Once this workaround is in place an Overwrite  for this vulnerability can be created to mark it as a false positive.","The flaw is due to error in USB device driver (hidserv.dll),  which does not properly warn the user before enabling additional Human Interface Device (HID)  functionality.","All Microsoft Windows systems with an enabled USB device driver  and no local protection mechanism against the automatic enabling of additional Human Interface  Device (HID).",,"196"
"107","1.3.6.1.4.1.25623.1.0.103239",,"SSH Brute Force Logins With Default Credentials Reporting","It was possible to login into the remote SSH server using default credentials.\n\n  As the VT 'SSH Brute Force Logins With Default Credentials' (OID: 1.3.6.1.4.1.25623.1.0.108013) might run into a  timeout the actual reporting of this vulnerability takes place in this VT instead.","Change the password as soon as possible.",,,"Reports default credentials detected by the VT 'SSH Brute Force Logins With Default Credentials'  (OID: 1.3.6.1.4.1.25623.1.0.108013).","100"
"108","1.3.6.1.4.1.25623.1.0.103955",,"SSL/TLS: Certificate Expired","The remote server's SSL/TLS certificate has already expired.","Replace the SSL/TLS certificate by a new one.","This script checks expiry dates of certificates associated with  SSL/TLS-enabled services on the target and reports whether any have already expired.",,,"168"
"109","1.3.6.1.4.1.25623.1.0.117274",,"SSL/TLS: Deprecated TLSv1.0 and TLSv1.1 Protocol Detection","It was possible to detect the usage of the deprecated  TLSv1.0 and/or TLSv1.1 protocol on this system.","It is recommended to disable the deprecated  TLSv1.0 and/or TLSv1.1 protocols in favor of the TLSv1.2+ protocols. Please see the  references for more information.","The TLSv1.0 and TLSv1.1 protocols containing known  cryptographic flaws like:\n\n  - CVE-2011-3389: Browser Exploit Against SSL/TLS (BEAST)\n\n  - CVE-2015-0204: Factoring Attack on RSA-EXPORT Keys Padding Oracle On Downgraded Legacy  Encryption (FREAK)","All services providing an encrypted communication  using the TLSv1.0 and/or TLSv1.1 protocols.","Check the used TLS protocols of the services  provided by this system.","135"
"110","1.3.6.1.4.1.25623.1.0.106223",,"SSL/TLS: Diffie-Hellman Key Exchange Insufficient DH Group Strength Vulnerability","The SSL/TLS service uses Diffie-Hellman groups with insufficient strength  (key size < 2048).","Deploy (Ephemeral) Elliptic-Curve Diffie-Hellman (ECDHE) or use  a 2048-bit or stronger Diffie-Hellman group (see the references).\n\n  For Apache Web Servers:  Beginning with version 2.4.7, mod_ssl will use DH parameters which include primes with lengths of more than 1024 bits.","The Diffie-Hellman group are some big numbers that are used as base for  the DH computations. They can be, and often are, fixed. The security of the final secret depends on the size  of these parameters. It was found that 512 and 768 bits to be weak, 1024 bits to be breakable by really  powerful attackers like governments.",,"Checks the DHE temporary public key size.","74"
"111","1.3.6.1.4.1.25623.1.0.108031",,"SSL/TLS: Report Vulnerable Cipher Suites for HTTPS","This routine reports all SSL/TLS cipher suites accepted by a service  where attack vectors exists only on HTTPS services.","The configuration of this services should be changed so  that it does not accept the listed cipher suites anymore.\n\n  Please see the references for more resources supporting you with this task.","These rules are applied for the evaluation of the vulnerable cipher suites:\n\n  - 64-bit block cipher 3DES vulnerable to the SWEET32 attack (CVE-2016-2183).","Services accepting vulnerable SSL/TLS cipher suites via HTTPS.",,"66"
"112","1.3.6.1.4.1.25623.1.0.103440",,"SSL/TLS: Report Weak Cipher Suites","This routine reports all Weak SSL/TLS cipher suites accepted by a service.\n\n  NOTE: No severity for SMTP services with 'Opportunistic TLS' and weak cipher suites on port 25/tcp is reported.  If too strong cipher suites are configured for this service the alternative would be to fall back to an even more insecure  cleartext communication.","The configuration of this services should be changed so  that it does not accept the listed weak cipher suites anymore.\n\n  Please see the references for more resources supporting you with this task.","These rules are applied for the evaluation of the cryptographic strength:\n\n  - RC4 is considered to be weak (CVE-2013-2566, CVE-2015-2808).\n\n  - Ciphers using 64 bit or less are considered to be vulnerable to brute force methods  and therefore considered as weak (CVE-2015-4000).\n\n  - 1024 bit RSA authentication is considered to be insecure and therefore as weak.\n\n  - Any cipher considered to be secure for only the next 10 years is considered as medium\n\n  - Any other cipher is considered as strong",,,"159"
"113","1.3.6.1.4.1.25623.1.0.113054",,"SSL/TLS: Untrusted Certificate Authorities","The service is using a SSL/TLS certificate from a known untrusted certificate authority.  An attacker could use this for MitM attacks, accessing sensible data and other attacks.","Replace the SSL/TLS certificate with one signed by a trusted certificate authority.",,,"The script reads the certificate used by the target host and checks if it was  signed by an untrusted certificate authority.","258"
"114","1.3.6.1.4.1.25623.1.0.117187",,"Sudo Heap-Based Buffer Overflow (Baron Samedit) Vulnerability (Active LSC)","Sudo is prone to a heap-based buffer overflow dubbed 'Baron Samedit'.","Update to version 1.9.5p2 or later.","Sudo is allowing privilege escalation to root via 'sudoedit -s' and a  command-line argument that ends with a single backslash character.","All legacy versions from 1.8.2 to 1.8.31p2 and all stable versions  from 1.9.0 to 1.9.5p1 in their default configuration.","Runs a specific SSH command after the login to the target which is known  to trigger an error message on affected versions of Sudo.","183"
"115","1.3.6.1.4.1.25623.1.0.80091",,"TCP timestamps","The remote host implements TCP timestamps and therefore allows to compute  the uptime.","To disable TCP timestamps on linux add the line 'net.ipv4.tcp_timestamps = 0' to  /etc/sysctl.conf. Execute 'sysctl -p' to apply the settings at runtime.\n\n  To disable TCP timestamps on Windows execute 'netsh int tcp set global timestamps=disabled'\n\n  Starting with Windows Server 2008 and Vista, the timestamp can not be completely disabled.\n\n  The default behavior of the TCP/IP stack on this Systems is to not use the  Timestamp options when initiating TCP connections, but use them if the TCP peer  that is initiating communication includes them in their synchronize (SYN) segment.\n\n  See the references for more information.","The remote host implements TCP timestamps, as defined by RFC1323/RFC7323.","TCP implementations that implement RFC1323/RFC7323.","Special IP packets are forged and sent with a little delay in between to the  target IP. The responses are searched for a timestamps. If found, the timestamps are reported.","257"
"116","1.3.6.1.4.1.25623.1.0.844860",,"Ubuntu: Security Advisory for glib2.0 (USN-4759-1)","The remote host is missing an update for the 'glib2.0'  package(s) announced via the USN-4759-1 advisory.","Please install the updated package(s).","Krzesimir Nowak discovered that GLib incorrectly handled certain largebuffers. A remote attacker could use this issue to cause applicationslinked to GLib to crash, resulting in a denial of service, or possiblyexecute arbitrary code. (CVE-2021-27218)\n\nKevin Backhouse discovered that GLib incorrectly handled certain memoryallocations. A remote attacker could use this issue to cause applicationslinked to GLib to crash, resulting in a denial of service, or possiblyexecute arbitrary code. (CVE-2021-27219)","'glib2.0' package(s) on Ubuntu 20.10, Ubuntu 20.04 LTS, Ubuntu 18.04 LTS, Ubuntu 16.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"117","1.3.6.1.4.1.25623.1.0.844865",,"Ubuntu: Security Advisory for glib2.0 (USN-4764-1)","The remote host is missing an update for the 'glib2.0'  package(s) announced via the USN-4764-1 advisory.","Please install the updated package(s).","It was discovered that GLib incorrectly handled certain symlinks whenreplacing files. If a user or automated system were tricked into extractinga specially crafted file with File Roller, a remote attacker could possiblycreate files outside of the intended directory.","'glib2.0' package(s) on Ubuntu 20.10, Ubuntu 20.04 LTS, Ubuntu 18.04 LTS, Ubuntu 16.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"118","1.3.6.1.4.1.25623.1.0.844859",,"Ubuntu: Security Advisory for libzstd (USN-4760-1)","The remote host is missing an update for the 'libzstd'  package(s) announced via the USN-4760-1 advisory.","Please install the updated package(s).","It was discovered that libzstd incorrectly handled file permissions. Alocal attacker could possibly use this issue to access certain files,contrary to expectations.","'libzstd' package(s) on Ubuntu 20.10, Ubuntu 20.04 LTS, Ubuntu 18.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"119","1.3.6.1.4.1.25623.1.0.844894",,"Ubuntu: Security Advisory for nettle (USN-4906-1)","The remote host is missing an update for the 'nettle'  package(s) announced via the USN-4906-1 advisory.","Please install the updated package(s).","It was discovered that Nettle incorrectly handled signature verification.A remote attacker could use this issue to cause Nettle to crash, resultingin a denial of service, or possibly force invalid signatures.","'nettle' package(s) on Ubuntu 20.10, Ubuntu 20.04 LTS, Ubuntu 18.04 LTS, Ubuntu 16.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"120","1.3.6.1.4.1.25623.1.0.844862",,"Ubuntu: Security Advisory for openssh (USN-4762-1)","The remote host is missing an update for the 'openssh'  package(s) announced via the USN-4762-1 advisory.","Please install the updated package(s).","It was discovered that the OpenSSH ssh-agent incorrectly handled memory. Aremote attacker able to connect to the agent could use this issue to causeit to crash, resulting in a denial of service, or possibly executearbitrary code.","'openssh' package(s) on Ubuntu 20.10, Ubuntu 20.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"121","1.3.6.1.4.1.25623.1.0.844880",,"Ubuntu: Security Advisory for openssl (USN-4891-1)","The remote host is missing an update for the 'openssl'  package(s) announced via the USN-4891-1 advisory.","Please install the updated package(s).","It was discovered that OpenSSL incorrectly handled certain renegotiationClientHello messages. A remote attacker could use this issue to causeOpenSSL to crash, resulting in a denial of service, or possibly executearbitrary code.","'openssl' package(s) on Ubuntu 20.10, Ubuntu 20.04 LTS, Ubuntu 18.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"122","1.3.6.1.4.1.25623.1.0.844864",,"Ubuntu: Security Advisory for python2.7 (USN-4754-3)","The remote host is missing an update for the 'python2.7'  package(s) announced via the USN-4754-3 advisory.","Please install the updated package(s).","USN-4754-1 fixed vulnerabilities in Python. This update providesthe corresponding updates for Ubuntu 18.04 ESM and Ubuntu 20.04 ESM.\n\nIn the case of Python 2.7 for 20.04 ESM, these additional fixes are included:\n\nIt was discovered that Python allowed remote attackers to cause a denial ofservice (resource consumption) via a ZIP bomb. (CVE-2019-9674)\n\nIt was discovered that Python had potentially misleading information aboutwhether sorting occurs. This fix updates the documentation about it.(CVE-2019-17514)\n\nIt was discovered that Python incorrectly handled certain TAR archives.An attacker could possibly use this issue to cause a denial of service.(CVE-2019-20907)\n\nIt was discovered that Python allowed an HTTP server to conduct RegularExpression Denial of Service (ReDoS) attacks against a client because ofurllib.request.AbstractBasicAuthHandler catastrophic backtracking.(CVE-2020-8492)\n\nIt was discovered that Python allowed CRLF injection if the attacker controlsthe HTTP request method, as demonstrated by inserting CR and LF controlcharacters in the first argument of HTTPConnection.request. (CVE-2020-26116)\n\nOriginal advisory details:\n\nIt was discovered that Python incorrectly handled certain inputs.An attacker could possibly use this issue to execute arbitrary codeor cause a denial of service. (CVE-2020-27619, CVE-2021-3177)","'python2.7' package(s) on Ubuntu 20.04 LTS, Ubuntu 18.04 LTS.","Checks if a vulnerable package version is present on the target host.","16"
"123","1.3.6.1.4.1.25623.1.0.813808",,"Windows IExpress Untrusted Search Path Vulnerability","This host has IExpress bundled with  Microsoft Windows and is prone to an untrusted search path vulnerability.","As a workaround save self-extracting archive  files into a newly created directory, and confirm there are no unrelated files in  the directory and make sure there are no suspicious files in the directory where  self-extracting archive files are saved.","The flaw exists due to an untrusted  search path error in self-extracting archive files created by IExpress  bundled with Microsoft Windows.","IExpress bundled with Microsoft Windows","Check for the presence of IExpress  (IEXPRESS.EXE).","296"
"124","18405",,"Microsoft Windows Remote Desktop Protocol Server Man-in-the-Middle Weakness","The remote version of the Remote Desktop Protocol Server (Terminal Service) is vulnerable to a man-in-the-middle (MiTM) attack. The RDP client makes no effort to validate the identity of the server when setting up encryption. An attacker with the ability to intercept traffic from the RDP server can establish encryption with the client and server without being detected. A MiTM attack of this nature would allow the attacker to obtain any sensitive information transmitted, including authentication credentials.\n\nThis flaw exists because the RDP server stores a hard-coded RSA private key in the mstlsapi.dll library. Any local user with access to this file (on any Windows system) can retrieve the key and use it for this attack.","- Force the use of SSL as a transport layer for this service if supported, or/and\n\n- Select the &apos;Allow connections only from computers running Remote Desktop with Network Level Authentication&apos; setting if it is available.",,,,"113"
"125","30218",,"Terminal Services Encryption Level is not FIPS-140 Compliant","The encryption setting used by the remote Terminal Services service is not FIPS-140 compliant.","Change RDP encryption level to :\n\n 4. FIPS Compliant",,,,"9"
"126","42263",,"Unencrypted Telnet Server","The remote host is running a Telnet server over an unencrypted channel.\n\nUsing Telnet over an unencrypted channel is not recommended as logins, passwords, and commands are transferred in cleartext. This allows a remote, man-in-the-middle attacker to eavesdrop on a Telnet session to obtain credentials or other sensitive information and to modify traffic exchanged between a client and server.\n\nSSH is preferred over Telnet since it protects credentials from eavesdropping and can tunnel additional data streams such as an X11 session.","Disable the Telnet service and use SSH instead.",,,,"136"
"127","42873",,"SSL Medium Strength Cipher Suites Supported (SWEET32)","The remote host supports the use of SSL ciphers that offer medium strength encryption. Nessus regards medium strength as any encryption that uses key lengths at least 64 bits and less than 112 bits, or else that uses the 3DES encryption suite.\n\nNote that it is considerably easier to circumvent medium strength encryption if the attacker is on the same physical network.","Reconfigure the affected application if possible to avoid use of medium strength ciphers.",,,,"120"
"128","45411",,"SSL Certificate with Wrong Hostname","The &apos;commonName&apos; (CN) attribute of the SSL certificate presented for this service is for a different machine.","Purchase or generate a proper certificate for this service.",,,,"188"
"129","51192",,"SSL Certificate Cannot Be Trusted","The server&apos;s X.509 certificate cannot be trusted. This situation can occur in three different ways, in which the chain of trust can be broken, as stated below :\n\n  - First, the top of the certificate chain sent by the     server might not be descended from a known public     certificate authority. This can occur either when the     top of the chain is an unrecognized, self-signed     certificate, or when intermediate certificates are     missing that would connect the top of the certificate     chain to a known public certificate authority.\n\n  - Second, the certificate chain may contain a certificate     that is not valid at the time of the scan. This can     occur either when the scan occurs before one of the     certificate&apos;s &apos;notBefore&apos; dates, or after one of the     certificate&apos;s &apos;notAfter&apos; dates.\n\n  - Third, the certificate chain may contain a signature     that either didn&apos;t match the certificate&apos;s information     or could not be verified. Bad signatures can be fixed by     getting the certificate with the bad signature to be     re-signed by its issuer. Signatures that could not be     verified are the result of the certificate&apos;s issuer     using a signing algorithm that Nessus either does not     support or does not recognize.\n\nIf the remote host is a public host in production, any break in the chain makes it more difficult for users to verify the authenticity and identity of the web server. This could make it easier to carry out man-in-the-middle attacks against the remote host.","Purchase or generate a proper certificate for this service.",,,,"188"
"130","57582",,"SSL Self-Signed Certificate","The X.509 certificate chain for this service is not signed by a recognized certificate authority.  If the remote host is a public host in production, this nullifies the use of SSL as anyone could establish a man-in-the-middle attack against the remote host. \n\nNote that this plugin does not check for certificate chains that end in a certificate that is not self-signed, but is signed by an unrecognized certificate authority.","Purchase or generate a proper certificate for this service.",,,,"188"
"131","58333",,"MS12-021: Vulnerability in Visual Studio Could Allow Elevation of Privilege (2651019)","The installed version of Microsoft Visual Studio does not properly validate add-ins in the path before loading them into the application.\n\nAn attacker can elevate his privileges by placing a specially crafted add-in in the path used by Visual Studio and convincing a user with higher privileges to start Visual Studio.","Microsoft has released a set of patches for Microsoft Visual Studio 2008 SP1, 2010, and 2010 SP1.",,,,"278"
"132","58453",,"Terminal Services Doesn&apos;t Use Network Level Authentication (NLA) Only","The remote Terminal Services is not configured to use Network Level Authentication (NLA) only. NLA uses the Credential Security Support Provider (CredSSP) protocol to perform strong server authentication either through TLS/SSL or Kerberos mechanisms, which protect against man-in-the-middle attacks. In addition to improving authentication, NLA also helps protect the remote computer from malicious users and software by completing user authentication before a full RDP connection is established.","Enable Network Level Authentication (NLA) on the remote RDP server. This is generally done on the &apos;Remote&apos; tab of the &apos;System&apos; settings on Windows.",,,,"176"
"133","63155",,"Microsoft Windows Unquoted Service Path Enumeration","The remote Windows host has at least one service installed that uses an unquoted service path, which contains at least one whitespace. A local attacker can gain elevated privileges by inserting an executable file in the path of the affected service.\n\nNote that this is a generic test that will flag any application affected by the described vulnerability.","Ensure that any services that contain a space in the path enclose the path in quotes.",,,,"284"
"134","65821",,"SSL RC4 Cipher Suites Supported (Bar Mitzvah)","The remote host supports the use of RC4 in one or more cipher suites.\nThe RC4 cipher is flawed in its generation of a pseudo-random stream of bytes so that a wide variety of small biases are introduced into the stream, decreasing its randomness.\n\nIf plaintext is repeatedly encrypted (e.g., HTTP cookies), and an attacker is able to obtain many (i.e., tens of millions) ciphertexts, the attacker may be able to derive the plaintext.","Reconfigure the affected application, if possible, to avoid use of RC4 ciphers. Consider using TLS 1.2 with AES-GCM suites subject to browser and web server support.",,,,"92"
"135","71049",,"SSH Weak MAC Algorithms Enabled","The remote SSH server is configured to allow either MD5 or 96-bit MAC algorithms, both of which are considered weak.\n\nNote that this plugin only checks for the options of the SSH server, and it does not check for vulnerable software versions.","Contact the vendor or consult product documentation to disable MD5 and 96-bit MAC algorithms.",,,,"259"
"136","82902",,"Oracle GlassFish Server Multiple Vulnerabilities (April 2015 CPU) (POODLE)","The version of GlassFish Server running on the remote host is affected by multiple vulnerabilities :\n\n  - A flaw exists in the bundled cURL and libcurl packages.\n    The certificate CN and SAN name field verification     (CURLOPT_SSL_VERIFYHOST) is disabled when the digital     signature verification (CURLOPT_SSL_VERIFYPEER) is     disabled. This allows a man-in-the-middle attacker to     spoof SSL servers via an arbitrary valid certificate.\n    (CVE-2013-4545)\n\n  - A flaw exists in the bundled Network Security Services     (NSS) library due to improper parsing of ASN.1 values in     X.509 certificates. This allows a man-in-the-middle     attacker to spoof RSA signatures via a crafted     certificate. (CVE-2014-1568)\n\n  - A man-in-the-middle (MitM) information disclosure     vulnerability known as POODLE. The vulnerability is due     to the way SSL 3.0 handles padding bytes when decrypting     messages encrypted using block ciphers in cipher block     chaining (CBC) mode. MitM attackers can decrypt a     selected byte of a cipher text in as few as 256 tries if     they are able to force a victim application to     repeatedly send the same data over newly created SSL 3.0     connections. (CVE-2014-3566)","Upgrade to GlassFish Server 2.1.1.25 / 3.0.1.11 / 3.1.2.11 or later as referenced in the April 2015 Oracle Critical Patch Update advisory.",,,,"119"
"137","84810",,"Oracle GlassFish Server Multiple Vulnerabilities (July 2015 CPU)","The version of Oracle GlassFish Server running on the remote host is affected by multiple vulnerabilities :\n\n  - A security bypass vulnerability exists in the bundled     Network Security Services (NSS) library because the     definite_length_decoder() function, in file quickder.c,     does not properly form the DER encoding of an ASN.1     length. A remote attacker, by using a long byte sequence     for an encoding, can exploit this issue to conduct     undetected smuggling of arbitrary data. (CVE-2014-1569)\n\n  - An unspecified flaw exists related to the Java Server     Faces subcomponent. A remote attacker can exploit this     to affect the integrity of the system. (CVE-2015-2623)\n\n  - An unspecified flaw exists related to the Java Server     Faces and Web Container subcomponents. A remote attacker     can exploit this to affect the integrity of the system.\n    (CVE-2015-4744)","Upgrade to Oracle GlassFish Server 2.1.1.26 / 3.0.1.12 / 3.1.2.12 or later as referenced in the July 2015 Oracle Critical Patch Update advisory.",,,,"13"
"138","84824",,"Oracle Java SE Multiple Vulnerabilities (July 2015 CPU) (Bar Mitzvah)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 51, 7 Update 85, or 6 Update 101. It is, therefore, affected by security vulnerabilities in the following components :\n\n  - 2D\n  - CORBA\n  - Deployment\n  - Hotspot\n  - Install\n  - JCE\n  - JMX\n  - JNDI\n  - JSSE\n  - Libraries\n  - RMI\n  - Security","Upgrade to Oracle JDK / JRE 8 Update 51, 7 Update 85, 6 Update 101, or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"116"
"139","86481",,"Oracle GlassFish Server Unspecified Information Disclosure (October 2015 CPU)","The version of Oracle GlassFish Server running on the remote host is affected by an unspecified information disclosure vulnerability due to an unspecified flaw in the Security subcomponent. A remote attacker can exploit this to disclose sensitive information.","Upgrade to Oracle GlassFish Server 3.0.1.13 / 3.1.2.13 or later as referenced in the October 2015 Oracle Critical Patch Update advisory.",,,,"277"
"140","86542",,"Oracle Java SE Multiple Vulnerabilities (October 2015 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 65, 7 Update 91, or 6 Update 105. It is, therefore, affected by security vulnerabilities in the following components :\n\n  - 2D\n  - CORBA\n  - Deployment\n  - JavaFX\n  - JAXP\n  - JGSS\n  - Libraries\n  - RMI\n  - Security\n  - Serialization","Upgrade to Oracle JDK / JRE 8 Update 65, 7 Update 91, 6 Update 105, or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"236"
"141","88022",,"Oracle GlassFish Embedded Server Vulnerabilities (January 2016 CPU)","The version of Oracle GlassFish Server running on the remote host is affected by multiple vulnerabilities due to unspecified flaws related to the Embedded Server subcomponent. A remote attacker can exploit these to impact availability, integrity, and confidentiality. No further details have been provided by the vendor.","Upgrade to Oracle GlassFish Server version 3.1.2.14 or later as referenced in the January 2016 Oracle Critical Patch Update advisory.",,,,"78"
"142","88045",,"Oracle Java SE Multiple Vulnerabilities (January 2016 CPU) (SLOTH)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 71, 7 Update 95, or 6 Update 111. It is, therefore, affected by security vulnerabilities in the following components :\n\n  - 2D\n  - AWT\n  - JAXP\n  - JMX\n  - Libraries\n  - Networking\n  - Security","Upgrade to Oracle JDK / JRE 8 Update 71, 7 Update 95, 6 Update 111, or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 111 or later.",,,,"231"
"143","90317",,"SSH Weak Algorithms Supported","Nessus has detected that the remote SSH server is configured to use the Arcfour stream cipher or no cipher at all. RFC 4253 advises against using Arcfour due to an issue with weak keys.","Contact the vendor or consult product documentation to remove the weak ciphers.",,,,"88"
"144","90625",,"Oracle Java SE Multiple Vulnerabilities (April 2016 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 91, 7 Update 101, or 6 Update 115. It is, therefore, affected by security vulnerabilities in the following subcomponents :\n\n  - 2D\n  - Deployment\n  - Hotspot\n  - JAXP\n  - JCE\n  - JMX\n  - Security\n  - Serialization","Upgrade to Oracle JDK / JRE 8 Update 91, 7 Update 101, or 6 Update 115 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 115 or later.",,,,"215"
"145","90828",,"Oracle Java SE Hotspot JSR 292 Method Handles RCE","The version of Oracle Java SE or Java for Business installed on the remote host is affected by an arbitrary code execution vulnerability in the Hotspot subcomponent due to an unsafe implementation of the Reflection API, which improperly processes JSR 292 method handles due to a lack of enforcement of class loader constraints. A remote attacker can exploit this, by convincing a user to visit a malicious web page, to execute arbitrary code outside the Java sandbox.","Upgrade to Oracle JDK / JRE 8 Update 77, 7 Update 99 or later.\nIf necessary, remove any affected versions.",,,,"261"
"146","92462",,"Oracle GlassFish Server 3.1.2.x &lt; 3.1.2.15 Multiple Vulnerabilities (July 2016 CPU)","According to its self-reported version number, the Oracle GlassFish Server running on the remote host is 3.1.2.x prior to 3.1.2.15. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists in the     bundled version of libcurl in the smb_request_state()     function due to using values that are assumed valid     without properly checking boundaries. An     unauthenticated, remote attacker can exploit this, via a     malicious SMB server, to disclose arbitrary memory     contents. (CVE-2015-3237)\n\n  - An unspecified flaw exists in the Web Container     subcomponent that allows an unauthenticated, remote     attacker to execute arbitrary code. (CVE-2016-3607)","Upgrade to Oracle GlassFish Server version 3.1.2.15 or later as referenced in the July 2016 Oracle Critical Patch Update advisory.",,,,"219"
"147","92516",,"Oracle Java SE Multiple Vulnerabilities (July 2016 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 101, 7 Update 111, or 6 Update 121. It is, therefore, affected by multiple vulnerabilities :\n\n  - An unspecified flaw exists in the CORBA subcomponent     that allows an unauthenticated, remote attacker to     impact integrity. (CVE-2016-3458)\n\n  - An unspecified flaw exists in the Networking     subcomponent that allows a local attacker to impact     integrity. (CVE-2016-3485)\n\n  - An unspecified flaw exists in the JavaFX subcomponent     that allows an unauthenticated, remote attacker to cause     a denial of service condition. (CVE-2016-3498)\n\n  - An unspecified flaw exists in the JAXP subcomponent that     allows an unauthenticated, remote attacker to cause a     denial of service condition. (CVE-2016-3500)\n\n  - An unspecified flaw exists in the Install subcomponent     that allows a local attacker to gain elevated     privileges. (CVE-2016-3503)\n\n  - An unspecified flaw exists in the JAXP subcomponent that     allows an unauthenticated, remote attacker to cause a     denial of service condition. (CVE-2016-3508)\n\n  - An unspecified flaw exists in the Deployment     subcomponent that allows a local attacker to gain     elevated privileges. (CVE-2016-3511)\n\n  - An unspecified flaw exists in the Hotspot subcomponent     that allows an unauthenticated, remote attacker to     disclose potentially sensitive information.\n    (CVE-2016-3550)\n\n  - An unspecified flaw exists in the Install subcomponent     that allows a local attacker to gain elevated     privileges. (CVE-2016-3552)\n\n  - A flaw exists in the Hotspot subcomponent due to     improper access to the MethodHandle::invokeBasic()     function. An unauthenticated, remote attacker can     exploit this to execute arbitrary code. (CVE-2016-3587)\n\n  - A flaw exists in the Libraries subcomponent within the     MethodHandles::dropArguments() function that allows an     unauthenticated, remote attacker to execute arbitrary     code. (CVE-2016-3598)\n\n  - A flaw exists in the Hotspot subcomponent within the     ClassVerifier::ends_in_athrow() function when handling     bytecode verification. An unauthenticated, remote     attacker can exploit this to execute arbitrary code.\n    (CVE-2016-3606)\n\n  - An unspecified flaw exists in the Libraries subcomponent     that allows an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2016-3610)","Upgrade to Oracle JDK / JRE 8 Update 101 / 7 Update 111 / 6 Update 121 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"187"
"148","94138",,"Oracle Java SE Multiple Vulnerabilities (October 2016 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 111, 7 Update 121, or 6 Update 131. It is, therefore, affected by multiple vulnerabilities :\n\n  - An unspecified flaw exists in the Libraries     subcomponent that allows an unauthenticated, remote     attacker to impact integrity. (CVE-2016-5542)\n\n  - An unspecified flaw exists in the JMX subcomponent that     allows an unauthenticated, remote attacker to impact     integrity. (CVE-2016-5554)\n\n  - An unspecified flaw exists in the 2D subcomponent that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2016-5556)\n\n  - An unspecified flaw exists in the AWT subcomponent that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2016-5568)\n\n  - Multiple unspecified flaws exist in the Hotspot     subcomponent that allow an unauthenticated, remote     attacker to execute arbitrary code. (CVE-2016-5573,     CVE-2016-5582)\n\n  - An unspecified flaw exists in the Networking     subcomponent that allows an unauthenticated, remote     attacker to disclose sensitive information.\n    (CVE-2016-5597)","Upgrade to Oracle JDK / JRE 8 Update 111 / 7 Update 121 / 6 Update 131 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"85"
"149","94161",,"Oracle GlassFish Server 2.1.1.x &lt; 2.1.1.29 / 3.0.1.x &lt; 3.0.1.14 / 3.1.2.x &lt; 3.1.2.15 Java Server Faces RCE (October 2016 CPU)","According to its self-reported version number, the Oracle GlassFish Server running on the remote host is 2.1.1.x prior to 2.1.1.29, 3.0.1.x prior to 3.0.1.14, or 3.1.2.x prior to 3.1.2.15. It is, therefore, affected by a remote code execution vulnerability in the Java Server Faces component subcomponent. An authenticated, remote attacker can exploit this to execute arbitrary code.","Upgrade to Oracle GlassFish Server version 2.1.1.29 / 3.0.1.14 / or 3.1.2.15 as referenced in the October 2016 Oracle Critical Patch Update advisory.",,,,"137"
"150","96624",,"Oracle GlassFish Server 2.1.1.x &lt; 2.1.1.30 / 3.0.1.x &lt; 3.0.1.15 / 3.1.2.x &lt; 3.1.2.16 Multiple Vulnerabilities (January 2017 CPU)","According to its self-reported version number, the Oracle GlassFish Server running on the remote host is 2.1.1.x prior to 2.1.1.30, 3.0.1.x prior to 3.0.1.15, or 3.1.2.x prior to 3.1.2.16. It is, therefore, affected by multiple vulnerabilities : \n\n  - An unspecified flaw exists in the Security subcomponent     that allows an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2016-5528)\n\n  - An unspecified flaw exists in the Administration     subcomponent that allows a local attacker attacker to     disclose sensitive information. Note that this     vulnerability does not affect the 2.1.1.x version     branch. (CVE-2017-3239)\n\n  - An unspecified flaw exists in the Core subcomponent that     allows an unauthenticated, remote attacker to perform     unauthorized updates, inserts, or deletion of data over     SMTP. (CVE-2017-3247)\n\n  - An unspecified flaw exists in the Security subcomponent     that allows an unauthenticated, remote attacker to     perform unauthorized updates, inserts, or deletion of     data over LDAP. Additionally, the attacker can     potentially cause a partial denial of service condition.\n    (CVE-2017-3249) \n\n  - An unspecified flaw exists in the Security subcomponent     that allows an unauthenticated, remote attacker to     perform unauthorized updates, inserts, or deletion of     data over HTTP. Additionally, the attacker can     potentially cause a partial denial of service condition.\n    (CVE-2017-3250)","Upgrade to Oracle GlassFish Server version 2.1.1.30 / 3.0.1.15 / 3.1.2.16 or later as referenced in the January 2017 Oracle Critical Patch Update advisory.",,,,"54"
"151","96628",,"Oracle Java SE Multiple Vulnerabilities (January 2017 CPU) (SWEET32)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 121, 7 Update 131, or 6 Update 141. It is, therefore, affected by multiple vulnerabilities :\n\n  - A vulnerability exists in the Libraries subcomponent,     known as SWEET32, in the 3DES and Blowfish algorithms     due to the use of weak 64-bit block ciphers by default.\n    A man-in-the-middle attacker who has sufficient     resources can exploit this vulnerability, via a     &apos;birthday&apos; attack, to detect a collision that leaks the     XOR between the fixed secret and a known plaintext,     allowing the disclosure of the secret text, such as     secure HTTPS cookies, and possibly resulting in the     hijacking of an authenticated session. (CVE-2016-2183)\n\n  - An unspecified flaw exists in the Libraries subcomponent     that allows an unauthenticated, remote attacker to     impact integrity. (CVE-2016-5546)\n\n  - An unspecified flaw exists in the Libraries subcomponent     that allows an unauthenticated, remote attacker to cause     a denial of service condition. (CVE-2016-5547)\n\n  - Multiple unspecified flaws exist in the Libraries     subcomponent that allow an unauthenticated, remote     attacker to disclose sensitive information.\n    (CVE-2016-5548, CVE-2016-5549)\n\n  - An unspecified flaw exists in the Networking     subcomponent that allows an unauthenticated, remote     attacker to impact integrity. (CVE-2016-5552)\n\n  - An unspecified flaw exists in the Mission Control     subcomponent that allows an unauthenticated, remote     attacker to impact integrity. (CVE-2016-8328)\n\n  - Multiple unspecified flaws exist in the Networking     subcomponent that allow an unauthenticated, remote     attacker to disclose sensitive information.\n    (CVE-2017-3231, CVE-2017-3261)\n\n  - An unspecified flaw exists in the RMI subcomponent that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2017-3241)\n\n  - An unspecified flaw exists in the JAAS subcomponent that     allows an unauthenticated, remote attacker to impact     integrity. (CVE-2017-3252)\n\n  - An unspecified flaw exists in the 2D subcomponent that     allows an unauthenticated, remote attacker to cause a     denial of service condition. (CVE-2017-3253)\n\n  - An unspecified flaw exists in the Deployment     subcomponent that allows an unauthenticated, remote     attacker to disclose sensitive information.\n    (CVE-2017-3259)\n\n  - An unspecified flaw exists in the AWT subcomponent that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2017-3260)\n\n  - An unspecified flaw exists in the Java Mission Control     subcomponent that allows an unauthenticated, remote     attacker to disclose sensitive information.\n    (CVE-2017-3262)\n\n  - An unspecified flaw exists in the Libraries subcomponent     that allows an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2017-3272)\n\n  - An unspecified flaw exists in the Hotspot subcomponent     that allows an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2017-3289)\n\nNote that CVE-2017-3241 can only be exploited by supplying data to APIs in the specified component without using untrusted Java Web Start applications or untrusted Java applets, such as through a web service.\nNote that CVE-2016-2183, CVE-2016-5546, CVE-2016-5547, CVE-2016-5552, CVE-2017-3252, and CVE-2017-3253 can be exploited through sandboxed Java Web Start applications and sandboxed Java applets. They can also be exploited by supplying data to APIs in the specified component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service.","Upgrade to Oracle JDK / JRE 8 Update 121 / 7 Update 131 / 6 Update 141 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"163"
"152","99522",,"Oracle GlassFish Server 3.1.2.x &lt; 3.1.2.17 Java Server Faces Information Disclosure (April 2017 CPU)","According to its self-reported version, the Oracle GlassFish Server running on the remote host is 3.1.2.x prior to 3.1.2.17. It is, therefore, affected by an unspecified flaw in the Java Server Faces subcomponent that allows an unauthenticated, remote attacker to disclose potentially sensitive information.","Upgrade to Oracle GlassFish Server version 3.1.2.17 or later as referenced in the April 2017 Oracle Critical Patch Update advisory.",,,,"286"
"153","99588",,"Oracle Java SE Multiple Vulnerabilities (April 2017 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 6 Update 151, 7 Update 141, or 8 Update 131. It is, therefore, affected by multiple vulnerabilities :\n\n  - An unspecified flaw exists in the Networking     subcomponent that allows an unauthenticated, remote     attacker to impact confidentiality and integrity.\n    (CVE-2017-3509)\n\n  - An unspecified flaw exists in the JCE subcomponent that     allows a local attacker to gain elevated privileges.\n    This vulnerability does not affect Java SE version 6.\n    (CVE-2017-3511)\n\n  - An unspecified flaw exists in the AWT subcomponent     that allows an unauthenticated, remote attacker to     execute arbitrary code. This vulnerability does not     affect Java SE version 6. (CVE-2017-3512)\n\n  - An unspecified flaw exists in the AWT subcomponent     that allows an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2017-3514)\n\n  - An unspecified flaw exists in the JAXP subcomponent that     allows an unauthenticated, remote attacker to cause a     denial of service condition. (CVE-2017-3526)\n\n  - Multiple unspecified flaws exist in the Networking     subcomponent that allow an unauthenticated, remote     attacker to gain update, insert, or delete access to     unauthorized data. (CVE-2017-3533, CVE-2017-3544)\n\n  - An unspecified flaw exists in the Security subcomponent     that allows an unauthenticated, remote attacker to gain     update, insert, or delete access to unauthorized data.\n    (CVE-2017-3539)","Upgrade to Oracle JDK / JRE 6 Update 151 / 7 Update 141 / 8 Update 131 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"166"
"154","100760",,"KB4022715: Windows 10 Version 1607 and Windows Server 2016 June 2017 Cumulative Update","The remote Windows host is missing security update KB4022715. It is, therefore, affected by multiple vulnerabilities :\n\n  - Multiple security bypass vulnerabilities exist in     Device Guard. A local attacker can exploit these, via a     specially crafted script, to bypass the Device Guard     Code Integrity policy and inject arbitrary code into a     trusted PowerShell process. (CVE-2017-0173,     CVE-2017-0215, CVE-2017-0216, CVE-2017-0218,     CVE-2017-0219)\n\n  - An elevation of privilege vulnerability exists in     Windows Hyper-V instruction emulation due to a failure     to properly enforce privilege levels. An attacker on a     guest operating system can exploit this to gain elevated     privileges on the guest. Note that the host operating     system is not vulnerable. (CVE-2017-0193)\n\n  - Multiple information disclosure vulnerabilities exist in     Windows Uniscribe due to improper handling of objects in     memory. An unauthenticated, remote attacker can exploit     these, by convincing a user to visit a specially crafted     website or open a specially crafted document, to     disclose the contents of memory. (CVE-2017-0282,     CVE-2017-0284, CVE-2017-0285)\n\n  - A remote code execution vulnerability exists in     Windows Uniscribe software due to improper handling of     objects in memory. An unauthenticated, remote attacker     can exploit this, by convincing a user to visit a     specially crafted website or to open a specially crafted     document, to execute arbitrary code in the context     of the current user. (CVE-2017-0283)\n\n  - Multiple information disclosure vulnerabilities exist in     the Windows GDI component due to improper handling of     objects in memory. An unauthenticated, remote attacker     can exploit these, by convincing a user to visit a     specially crafted website or open a specially crafted     document, to disclose the contents of memory.\n    (CVE-2017-0287, CVE-2017-0288, CVE-2017-0289,     CVE-2017-8531, CVE-2017-8532, CVE-2017-8533)\n\n  - Multiple remote code execution vulnerabilities exist in     Microsoft Windows due to improper parsing of PDF files.\n    An unauthenticated, remote attacker can exploit these,     by convincing a user to open a specially crafted PDF     file, to execute arbitrary code in the context of the     current user. (CVE-2017-0291, CVE-2017-0292)\n\n  - A remote code execution vulnerability exists in     Microsoft Windows due to improper handling of cabinet     files. An unauthenticated, remote attacker can exploit     this, by convincing a user to open a specially crafted     cabinet file, to execute arbitrary code in the context     of the current user. (CVE-2017-0294)\n\n  - A flaw exists in Microsoft Windows due to incorrect     permissions being set on folders inside the DEFAULT     folder structure. An authenticated, remote attacker can     exploit this, by logging in to the affected system     before the user can log in, to modify the user&apos;s DEFAULT     folder contents. (CVE-2017-0295)\n\n  - An elevation of privilege vulnerability exists in     tdx.sys due to a failure to check the length of a buffer     prior to copying memory to it. A local attacker can     exploit this, via a specially crafted application, to     execute arbitrary code in an elevated context.\n    (CVE-2017-0296)\n\n  - An elevation of privilege vulnerability exists in the     Windows kernel due to improper handling of objects in     memory. A local attacker can exploit this, via a     specially crafted application, to execute arbitrary code     with elevated permissions. (CVE-2017-0297)\n\n  - An elevation of privilege vulnerability exists in the     DCOM object in Helppane.exe, when configured to run as     the interactive user, due to a failure to properly     authenticate the client. An authenticated, remote     attacker can exploit this, via a specially crafted     application, to run arbitrary code in another user&apos;s     session after that user has logged on to the same system     using Terminal Services or Fast User Switching.\n    (CVE-2017-0298)\n\n  - Multiple information disclosure vulnerabilities exist in     the Windows kernel due to improper initialization of     objects in memory. An authenticated, remote attacker can     exploit these, via a specially crafted application, to     disclose the base address of the kernel driver.\n    (CVE-2017-0299, CVE-2017-0300, CVE-2017-8462,     CVE-2017-8485)\n\n  - An information disclosure vulnerability exists in     Microsoft Windows due to improper parsing of PDF files.\n    An unauthenticated, remote attacker can exploit this, by     convincing a user to open a specially crafted PDF file,     to disclose the contents of memory. (CVE-2017-8460)\n\n  - A remote code execution vulnerability exists in Windows     due to improper handling of shortcuts. An     unauthenticated, remote attacker can exploit this, by     convincing a user to insert a removable drive containing     a malicious shortcut and binary, to automatically     execute arbitrary code in the context of the current     user. (CVE-2017-8464)\n\n  - Multiple elevation of privilege vulnerabilities exist in     the Windows kernel-mode driver due to improper handling     of objects in memory. A local attacker can exploit     these, via a specially crafted application, to run     processes in an elevated context. (CVE-2017-8465,     CVE-2017-8466, CVE-2017-8468)\n\n  - Multiple information disclosure vulnerabilities exist in     the Windows kernel due to improper initialization of     objects in memory. An authenticated, remote attacker can     exploit these, via a specially crafted application, to     disclose sensitive information. (CVE-2017-8470,     CVE-2017-8471, CVE-2017-8473, CVE-2017-8474,     CVE-2017-8475, CVE-2017-8476, CVE-2017-8477,     CVE-2017-8478, CVE-2017-8479, CVE-2017-8480,     CVE-2017-8481, CVE-2017-8482, CVE-2017-8483,     CVE-2017-8484, CVE-2017-8489, CVE-2017-8490,     CVE-2017-8491, CVE-2017-8492)\n\n  - A security bypass vulnerability exists due to a failure     to enforce case sensitivity for certain variable checks.\n    A local attacker can exploit this, via a specially     crafted application, to bypass Unified Extensible     Firmware Interface (UEFI) variable security.\n    (CVE-2017-8493)\n\n  - An elevation of privilege vulnerability exists in the     Windows Secure Kernel Mode feature due to a failure to     properly handle objects in memory. A local attacker can     exploit this, via a specially crafted application, to     bypass virtual trust levels (VTL). (CVE-2017-8494)\n\n  - Multiple remote code execution vulnerabilities exist in     Microsoft Edge due to improper handling of objects in     memory. An unauthenticated, remote attacker can exploit     these, by convincing a user to visit a specially crafted     website, to execute arbitrary code in the context of the     current user. (CVE-2017-8496, CVE-2017-8497)\n\n  - An information disclosure vulnerability exists in     Microsoft Edge due to improper handling of JavaScript     XML DOM objects. An unauthenticated, remote attacker can     exploit this, by convincing a user to visit a specially     crafted website, to disclose sensitive information.\n    (CVE-2017-8498)\n\n  - An information disclosure vulnerability exists in     Microsoft Edge in the Fetch API due to improper handling     of filtered response types. An unauthenticated, remote     attacker can exploit this, by convincing a user to visit     a specially crafted website, to disclose sensitive     information in the URL of a cross-origin request.\n    (CVE-2017-8504)\n\n  - A denial of service vulnerability exists in Windows due     to improper handling of kernel mode requests. An     unauthenticated, remote attacker can exploit this, via a     specially crafted kernel mode request, to cause the     machine to stop responding or rebooting. (CVE-2017-8515)\n\n  - Multiple remote code execution vulnerabilities exist in     Microsoft browsers in the JavaScript engines due to     improper handling of objects in memory. An     unauthenticated, remote attacker can exploit these, by     convincing a user to visit a specially crafted website,     to execute arbitrary code in the context of the current     user. (CVE-2017-8517, CVE-2017-8522, CVE-2017-8524,     CVE-2017-8548)\n\n  - A same-origin policy bypass vulnerability exists in     Microsoft Edge due to a failure to properly apply the     Same Origin Policy for HTML elements. An     unauthenticated, remote attacker can exploit this, by     convincing a user to follow a link, to load a page with     malicious content. (CVE-2017-8523)\n\n  - A remote code execution vulnerability exists in the     Windows font library due to improper handling of     embedded fonts. An unauthenticated, remote attacker can     exploit this, by convincing a user to visit a specially     crafted website or open a specially crafted Microsoft     document, to execute arbitrary code in the context of     the current user. (CVE-2017-8527)\n\n  - An information disclosure vulnerability exists in     Microsoft browsers in the scripting engines due to     improper handling of objects in memory. An     unauthenticated, remote attacker can exploit this, by     convincing a user to visit a specially crafted website,     to disclose files on a user&apos;s computer. (CVE-2017-8529)*\n\n  - A same-origin policy bypass vulnerability exists in     Microsoft Edge due to a failure to properly enforce     same-origin policies. An unauthenticated, remote     attacker can exploit this, by convincing a user to visit     a specially crafted website, to disclose information     from origins outside the current one. (CVE-2017-8530)\n\n  - A remote code execution vulnerability exists in the     Windows Search functionality due to improper handling of     objects in memory. An unauthenticated, remote attacker     can exploit this, via a specially crafted SMB message,     to execute arbitrary code. (CVE-2017-8543)\n\n  - An information disclosure vulnerability exists in the     Windows Search functionality due to improper handling of     objects in memory. An unauthenticated, remote attacker     can exploit this, via a specially crafted SMB message,     to disclose sensitive information. (CVE-2017-8544)\n\n  - A remote code execution vulnerability exists in Internet     Explorer due to improper handling of objects in memory.\n    An unauthenticated, remote attacker can exploit this, by     convincing a user to visit a specially crafted website,     to execute arbitrary code in the context of the current     user. (CVE-2017-8547)\n\n  - A remote code execution vulnerability exists in     Microsoft Edge in the JavaScript scripting engine due to     improper handling of objects in memory. An     unauthenticated, remote attacker can exploit this, by     convincing a user to visit a specially crafted website,     to execute arbitrary code in the context of the current     user. (CVE-2017-8549)\n\n  - Multiple information disclosure vulnerabilities exist in     the Windows kernel due to improper handling of objects     in memory. An authenticated, remote attacker can exploit     these, via a specially crafted application, to disclose     the contents of memory. (CVE-2017-8553, CVE-2017-8554)\n\n  - An information disclosure vulnerability exists in the     Windows Graphics component due to improper handling of     objects in memory. An authenticated, remote attacker can     exploit this, via a specially crafted application, to     disclose sensitive information. (CVE-2017-8575)\n\n  - An elevation of privilege vulnerability exists in the     Windows Graphics component due to improper     initialization of objects in memory. A local attacker     can exploit this, via a specially crafted application,     to execute arbitrary code in kernel mode.\n    (CVE-2017-8576)\n\n  - An elevation of privilege vulnerability exists DirectX     due to improper handling of objects in memory. A local     attacker can exploit this, via a specially crafted     application, to execute arbitrary code in kernel mode.\n    (CVE-2017-8576)\n\n   * note that a registry value must be added to enable the      fix for CVE-2017-8529. if the patch is installed but      not enabled, the registry key needed will be detailed      in the output below.","Apply security update KB4022715 as well as refer to the KB article for additional information.",,,,"70"
"155","101366",,"KB4025339: Windows 10 Version 1607 and Windows Server 2016 July 2017 Cumulative Update","The remote Windows host is missing security update KB4025339. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists in the     Windows Performance Monitor Console due to improper     parsing of XML input that contains a reference to an     external entity. An unauthenticated, remote attacker     can exploit this, by convincing a user to create a     Data Collector Set and import a specially crafted XML     file, to disclose arbitrary files via an XML external     entity (XXE) declaration. (CVE-2017-0170)\n\n  - A remote code execution vulnerability exists in Windows     Explorer due to improper handling of executable files     and shares during rename operations. An unauthenticated,     remote attacker can exploit this, by convincing a user     to open a specially crafted file, to execute arbitrary     code in the context of the current user. (CVE-2017-8463)\n\n  - Multiple elevation of privilege vulnerabilities exist in     the Microsoft Graphics component due to improper     handling of objects in memory. A local attacker can     exploit these, via a specially crafted application, to     run arbitrary code in kernel mode. (CVE-2017-8467,     CVE-2017-8556, CVE-2017-8573, CVE-2017-8574,     CVE-2017-8577, CVE-2017-8578, CVE-2017-8580)\n\n  - An information disclosure vulnerability exists in Win32k     due to improper handling of objects in memory. A local     attacker can exploit this, via a specially crafted     application, to disclose sensitive information.\n    (CVE-2017-8486)\n\n  - A security bypass vulnerability exists in Microsoft     Windows when handling Kerberos ticket exchanges due to a     failure to prevent tampering with the SNAME field. A     man-in-the-middle attacker can exploit this to bypass     the Extended Protection for Authentication security     feature. (CVE-2017-8495)\n\n  - An information disclosure vulnerability exists in the     Windows System Information Console due to improper     parsing of XML input that contains a reference to an     external entity. An unauthenticated, remote attacker     can exploit this, by convincing a user to open a     specially crafted file, to disclose arbitrary files via     an XML external entity (XXE) declaration.\n    (CVE-2017-8557)\n\n  - An elevation of privilege vulnerability exists in the     Windows kernel due to improper handling of objects in     memory. A local attacker can exploit this, via a     specially crafted application, to execute arbitrary code     with elevated permissions. (CVE-2017-8561)\n\n  - An elevation of privilege vulnerability exists in     Windows due to improper handling of calls to Advanced     Local Procedure Call (ALPC). An authenticated, remote     attacker can exploit this via a specially crafted     application, to run processes in an elevated context.\n    (CVE-2017-8562)\n\n  - An elevation of privilege vulnerability exists in     Windows due to Kerberos falling back to NT LAN Manager     (NTLM) Authentication Protocol as the default     authentication protocol. An authenticated, remote     attacker can exploit this, via an application that     sends specially crafted traffic to a domain controller,     to run processes in an elevated context.\n    (CVE-2017-8563)*\n\n  - An information disclosure vulnerability exists in the     Windows kernel due to improper initialization of objects     in memory. An authenticated, remote attacker can exploit     this, via a specially crafted application, to bypass     Kernel Address Space Layout Randomization (KASLR) and     disclose the base address of the kernel driver.\n    (CVE-2017-8564)\n\n  - A remote code execution vulnerability exists in     PowerShell when handling a PSObject that wraps a CIM     instance. An authenticated, remote attacker can exploit     this, via a specially crafted script, to execute     arbitrary code in a PowerShell remote session.\n    (CVE-2017-8565)\n\n  - An elevation of privilege vulnerability exists in     Windows Input Method Editor (IME) due to improper     handling of parameters in a method of a DCOM class. A     local attacker can exploit this, via a specially crafted     application, to run processes in an elevated context.\n    (CVE-2017-8566)\n\n  - An elevation of privilege vulnerability exists in     Windows due to improper handling of objects in memory. A     local attacker can exploit this, via a specially crafted     application, to run arbitrary code in kernel mode.\n    (CVE-2017-8581)\n\n  - An information disclosure vulnerability exists in the     HTTP.sys server application component due to improper     handling of objects in memory. An unauthenticated,     remote attacker can exploit this, via a specially     crafted request, to disclose sensitive information.\n    (CVE-2017-8582)\n\n  - A remote code execution vulnerability exists in     Microsoft HoloLens due to improper handling of objects     in memory. An unauthenticated, remote attacker can     exploit this, via a specially crafted packet, to execute     arbitrary code. (CVE-2017-8584)\n\n  - A denial of service vulnerability exists in the     Microsoft Common Runtime Library component due to     improper handling of web requests. An unauthenticated,     remote attacker can exploit this, via a specially     crafted request, to cause a denial of service condition     in a .NET application. (CVE-2017-8585)\n\n  - A remote code execution vulnerability exists in WordPad     due to improper parsing of specially crafted files. An     unauthenticated, remote attacker can exploit this, by     convincing a user to open a specially crafted file, to     execute arbitrary code in the context of the current     user. (CVE-2017-8588)\n\n  - A remote code execution vulnerability exists in the     Windows Search component due to improper handling of     objects in memory. An unauthenticated, remote attacker     can exploit this, by sending specially crafted messages     to the Windows Search service, to elevate privileges and     execute arbitrary code. (CVE-2017-8589)\n\n  - An elevation of privilege vulnerability exists in the     Windows Common Log File System (CLFS) driver due to     improper handling of objects in memory. A local attacker     can exploit this, via a specially crafted application,     to run processes in an elevated context. (CVE-2017-8590)\n\n  - A security bypass vulnerability exists in Microsoft     browsers due to improper handling of redirect requests.\n    An unauthenticated, remote attacker can exploit this, by     convincing a user to visit a specially crafted website,     to bypass CORS redirect restrictions. (CVE-2017-8592)\n\n  - Multiple remote code execution vulnerability exist in     Microsoft Edge in the scripting engine due to improper     handling of objects in memory. An unauthenticated,     remote attacker can exploit these, by convincing a user     to visit a specially crafted website, to execute     arbitrary code in the context of the current user.\n    (CVE-2017-8595, CVE-2017-8598, CVE-2017-8603,     CVE-2017-8604, CVE-2017-8605, CVE-2017-8619)\n\n  - A remote code execution vulnerability exists in     Microsoft Edge due to improper handling of objects in     memory. An unauthenticated, remote attacker can exploit     this, by convincing a user to visit a specially crafted     website, to execute arbitrary code in the context of the     current user. (CVE-2017-8596)\n\n  - A security bypass vulnerability exists in Microsoft Edge     due to a failure to correctly apply the same-origin     policy for HTML elements present in other browser     windows. An unauthenticated, remote attacker can exploit     this, by convincing a user to follow a link, to cause     the user to load a malicious website. (CVE-2017-8599)\n\n  - A remote code execution vulnerability exists in     Microsoft Edge in the Chakra JavaScript engine due to     improper handling of objects in memory. An     unauthenticated, remote attacker can exploit this, by     convincing a user to visit a specially crafted website,     to execute arbitrary code in the context of the current     user. (CVE-2017-8601)\n\n  - A spoofing vulnerability exists in Microsoft browsers     due to improper parsing of HTTP content. An     unauthenticated, remote attacker can exploit this, by     convincing a user to click a specially crafted URL, to     redirect the user to a malicious website.\n    (CVE-2017-8602)\n\n  - Multiple remote code execution vulnerabilities exist in     Microsoft browsers in the JavaScript engines due to     improper handling of objects in memory. An     unauthenticated, remote attacker can exploit these, by     convincing a user to visit a specially crafted website,     to execute arbitrary code in the context of the current     user. (CVE-2017-8606, CVE-2017-8607, CVE-2017-8608)\n\n  - A remote code execution vulnerability exists in     Microsoft browsers in the scripting engine due to     improper handling of objects in memory. An     unauthenticated, remote attacker can exploit this, by     convincing a user to visit a specially crafted website,     to execute arbitrary code in the context of the current     user. (CVE-2017-8609)\n\n  - A spoofing vulnerability exists in Microsoft Edge due to     improper parsing of HTTP content. An unauthenticated,     remote attacker can exploit this, by convincing a user     to click a specially crafted URL, to redirect the user     to a malicious website. (CVE-2017-8611)\n\n  - A remote code execution vulnerability exists in Internet     Explorer in the VBScript engine due to improper handling     of objects in memory. An unauthenticated, remote     attacker can exploit this, by convincing a user to visit     a specially crafted website, to execute arbitrary code     in the context of the current user. (CVE-2017-8618)\n\n    * note CVE-2017-8563 introduces a registry setting that     administrators can use to help make LDAP authentication     over SSL/TLS more secure, administrators need to create     a LdapEnforceChannelBinding registry setting on machine     running AD DS or AD LDS.","Apply security update KB4025339 as well as refer to the KB article for additional information.",,,,"251"
"156","101843",,"Oracle Java SE Multiple Vulnerabilities (July 2017 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 8 Update 141, 7 Update 151, or 6 Update 161. It is, therefore, affected by multiple vulnerabilities :\n\n  - An unspecified flaw exists in the 2D component that     allows an unauthenticated, remote attacker to cause a     denial of service condition. (CVE-2017-10053)\n\n  - Multiple unspecified flaws exist in the Security     component that allow an unauthenticated, remote attacker     to execute arbitrary code. (CVE-2017-10067,     CVE-2017-10116)\n\n  - An unspecified flaw exists in the Hotspot component that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2017-10074)\n\n  - An unspecified flaw exists in the Scripting component     that allows an authenticated, remote attacker to impact     confidentiality and integrity. (CVE-2017-10078)\n\n  - An unspecified flaw exists in the Hotspot component that     allows an unauthenticated, remote attacker to impact     integrity. (CVE-2017-10081)\n\n  - Multiple unspecified flaws exist in the JavaFX component     that allow an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2017-10086, CVE-2017-10114)\n\n  - Multiple unspecified flaws exist in the Libraries     component that allow an unauthenticated, remote attacker     to execute arbitrary code. (CVE-2017-10087,     CVE-2017-10090, CVE-2017-10111)\n\n  - An unspecified flaw exists in the ImageIO component that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2017-10089)\n\n  - Multiple unspecified flaws exist in the JAXP component     that allow an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2017-10096, CVE-2017-10101)\n\n  - Multiple unspecified flaws exist in the RMI component     that allow an unauthenticated, remote attacker to     execute arbitrary code. (CVE-2017-10102, CVE-2017-10107)\n\n  - Multiple unspecified flaws exist in the Server component     of the Java Advanced Management Console that allow an     authenticated, remote attacker to impact     confidentiality, integrity, and availability.\n    (CVE-2017-10104, CVE-2017-10145)\n\n  - An unspecified flaw exists in the Deployment component     that allows an unauthenticated, remote attacker to     impact integrity. (CVE-2017-10105)\n\n  - Multiple unspecified flaws exist in the Serialization     component that allow an unauthenticated, remote attacker     to exhaust available memory, resulting in a denial of     service condition. (CVE-2017-10108, CVE-2017-10109)\n\n  - An unspecified flaw exists in the AWT component that     allows an unauthenticated, remote attacker to execute     arbitrary code. (CVE-2017-10110)\n\n  - Multiple unspecified flaws exist in the JCE component     that allow an unauthenticated, remote attacker to     disclose sensitive information. (CVE-2017-10115,     CVE-2017-10118, CVE-2017-10135)\n\n  - An unspecified flaw exists in the Server component of     the Java Advanced Management Console that allows an     unauthenticated, remote attacker to disclose sensitive     information. (CVE-2017-10117)\n\n  - An unspecified flaw exists in the Server component of     the Java Advanced Management Console that allows an     unauthenticated, remote attacker to impact     confidentiality and integrity. (CVE-2017-10121)\n\n  - An unspecified flaw exists in the Deployment component     that allows a local attacker to impact confidentiality,     integrity, and availability. (CVE-2017-10125)\n\n  - Multiple unspecified flaws exist in the Security     component that allow an unauthenticated, remote attacker     to disclose sensitive information. (CVE-2017-10176,     CVE-2017-10193, CVE-2017-10198)\n\n  - An unspecified flaw exists in the JAX-WS component that     allows an unauthenticated, remote attacker to impact     confidentiality and availability. (CVE-2017-10243)","Upgrade to Oracle JDK / JRE 8 Update 141 / 7 Update 151 / 6 Update 161 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"264"
"157","103962",,"Oracle GlassFish Server 3.0.1.x &lt; 3.0.1.17 / 3.1.2.x &lt; 3.1.2.18 (October 2017 CPU)","According to its self-reported version, the Oracle GlassFish Server running on the remote host is 3.0.1.x prior to 3.0.1.17 or 3.1.2.x prior to 3.1.2.18. It is, therefore, affected by multiple vulnerabilities, including multiple denial of service vulnerabilities and unauthorized access to sensitive data.","Upgrade to Oracle GlassFish Server version 3.0.1.17 / 3.1.2.18 or later as referenced in the October 2017 Oracle Critical Patch Update advisory.",,,,"112"
"158","103963",,"Oracle Java SE Multiple Vulnerabilities (October 2017 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 9 Update 1, 8 Update 151, 7 Update 161, or 6 Update 171. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - 2D (Little CMS 2)\n  - Deployment\n  - Hotspot\n  - JAX-WS\n  - JAXP\n  - Javadoc\n  - Libraries\n  - Networking\n  - RMI\n  - Security\n  - Serialization\n  - Smart Card IO\n  - Util (zlib)","Upgrade to Oracle JDK / JRE 9 Update 1, 8 Update 151 / 7 Update 161 / 6 Update 171 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"15"
"159","104549",,"KB4048953: Windows 10 Version 1607 and Windows Server 2016 November 2017 Cumulative Update","The remote Windows host is missing security update 4048953.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists when     Microsoft Edge improperly handles redirect requests. The     vulnerability allows Microsoft Edge to bypass Cross-     Origin Resource Sharing (CORS) redirect restrictions,     and to follow redirect requests that should otherwise be     ignored. An attacker who successfully exploited the     vulnerability could force the browser to send data that     would otherwise be restricted to a destination website     of the attacker&apos;s choice.  (CVE-2017-11872)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2017-11827,     CVE-2017-11858)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2017-11837, CVE-2017-11838, CVE-2017-11843,     CVE-2017-11846)\n\n  - A security feature bypass exists when Device Guard     incorrectly validates an untrusted file. An attacker who     successfully exploited this vulnerability could make an     unsigned file appear to be signed. Because Device Guard     relies on the signature to determine the file is non-     malicious, Device Guard could then allow a malicious     file to execute. In an attack scenario, an attacker     could make an untrusted file appear to be a trusted     file. The update addresses the vulnerability by     correcting how Device Guard handles untrusted files.\n    (CVE-2017-11830)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Internet Explorer. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system.\n    (CVE-2017-11834)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2017-11855,     CVE-2017-11856, CVE-2017-11869)\n\n  - An information vulnerability exists when Windows Media     Player improperly discloses file information. Successful     exploitation of the vulnerability could allow the     attacker to test for the presence of files on disk.\n    (CVE-2017-11768)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2017-11880)\n\n  - A security feature bypass vulnerability exists in     Microsoft Edge when the Edge Content Security Policy     (CSP) fails to properly validate certain specially     crafted documents. An attacker who exploited the bypass     could trick a user into loading a page containing     malicious content.  (CVE-2017-11863)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2017-11836,     CVE-2017-11839, CVE-2017-11840, CVE-2017-11841,     CVE-2017-11861, CVE-2017-11866, CVE-2017-11873)\n\n  - A Win32k information disclosure vulnerability exists     when the Windows GDI component improperly discloses     kernel memory addresses. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2017-11851)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Microsoft browsers. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system.\n    (CVE-2017-11791)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2017-11847)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles page content, which     could allow an attacker to detect the navigation of the     user leaving a maliciously crafted page.\n    (CVE-2017-11848)\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2017-11831,     CVE-2017-11842, CVE-2017-11849, CVE-2017-11853)\n\n  - A denial of service vulnerability exists when Windows     Search improperly handles objects in memory. An attacker     who successfully exploited the vulnerability could cause     a remote denial of service against a system.\n    (CVE-2017-11788)\n\n  - An information disclosure vulnerability exists when the     Microsoft Windows Graphics Component improperly handles     objects in memory. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2017-11850)\n\n  - An information disclosure vulnerability exists in the     way that Microsoft Edge handles cross-origin requests.\n    An attacker who successfully exploited this     vulnerability could determine the origin of all webpages     in the affected browser.  (CVE-2017-11833)","Apply security update KB4048953.",,,,"39"
"160","104892",,"Security Updates for Internet Explorer (June 2017)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    This vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user.  (CVE-2017-8519,     CVE-2017-8547)\n\n  - A remote code execution vulnerability exists in the way     JavaScript engines render when handling objects in     memory in Microsoft browsers. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2017-8517, CVE-2017-8522,     CVE-2017-8524)","Microsoft has released security updates for the affected versions of Internet Explorer.",,,,"213"
"161","105180",,"KB4053579: Windows 10 Version 1607 and Windows Server 2016 December 2017 Security Update","The remote Windows host is missing security update 4053579.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2017-11889,     CVE-2017-11893, CVE-2017-11905, CVE-2017-11909,     CVE-2017-11910, CVE-2017-11911, CVE-2017-11914,     CVE-2017-11918)\n\n  - A security feature bypass exists when Device Guard     incorrectly validates an untrusted file. An attacker who     successfully exploited this vulnerability could make an     unsigned file appear to be signed. Because Device Guard     relies on the signature to determine the file is non-     malicious, Device Guard could then allow a malicious     file to execute. In an attack scenario, an attacker     could make an untrusted file appear to be a trusted     file. The update addresses the vulnerability by     correcting how Device Guard handles untrusted files.\n    (CVE-2017-11899)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Microsoft browsers. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system.\n    (CVE-2017-11919)\n\n  - A remote code execution vulnerability exists when     Microsoft Edge improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that enables an attacker to execute arbitrary code in     the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2017-11888)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2017-11886,     CVE-2017-11890, CVE-2017-11901, CVE-2017-11903,     CVE-2017-11907, CVE-2017-11913)\n\n  - A remote code execution vulnerability exists in RPC if     the server has Routing and Remote Access enabled. An     attacker who successfully exploited this vulnerability     could execute code on the target system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2017-11885)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2017-11894, CVE-2017-11895, CVE-2017-11912,     CVE-2017-11930)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2017-11887, CVE-2017-11906)\n\n  - An information disclosure vulnerability exists when the     Windows its:// protocol handler unnecessarily sends     traffic to a remote site in order to determine the zone     of a provided URL. This could potentially result in the     disclosure of sensitive information to a malicious site.\n    (CVE-2017-11927)","Apply security update KB4053579.",,,,"276"
"162","105548",,"KB4056890: Windows 10 Version 1607 and Windows Server 2016 January 2018 Security Update (Meltdown)(Spectre)","The remote Windows host is missing security update 4056890 or 4057142. It is, therefore, affected by multiple vulnerabilities :\n\n  - An vulnerability exists within microprocessors utilizing     speculative execution and indirect branch prediction,     which may allow an attacker with local user access to     disclose information via a side-channel analysis.\n    (CVE-2017-5715, CVE-2017-5753, CVE-2017-5754)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2018-0744)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-0758,     CVE-2018-0769, CVE-2018-0770, CVE-2018-0776,     CVE-2018-0777, CVE-2018-0781)\n\n  - An information disclosure vulnerability exists in the     Windows kernel that could allow an attacker to retrieve     information that could lead to a Kernel Address Space     Layout Randomization (ASLR) bypass. An attacker who     successfully exploited the vulnerability could retrieve     the memory address of a kernel object.  (CVE-2018-0746,     CVE-2018-0747)\n\n  - An elevation of privilege vulnerability exists when     Microsoft Edge does not properly enforce cross-domain     policies, which could allow an attacker to access     information from one domain and inject it into another     domain.  (CVE-2018-0803)\n\n  - An information disclosure vulnerability exists in     Windows Adobe Type Manager Font Driver (ATMFD.dll) when     it fails to properly handle objects in memory. An     attacker who successfully exploited this vulnerability     could potentially read data that was not intended to be     disclosed. Note that this vulnerability would not allow     an attacker to execute code or to elevate their user     rights directly, but it could be used to obtain     information that could be used to try to further     compromise the affected system.  (CVE-2018-0754)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0762, CVE-2018-0772)\n\n  - An information disclosure vulnerability exists when     Microsoft Edge PDF Reader improperly handles objects in     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-0766)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel API enforces permissions. An     attacker who successfully exploited the vulnerability     could impersonate processes, interject cross-process     communication, or interrupt system functionality.\n    (CVE-2018-0748, CVE-2018-0751, CVE-2018-0752)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Microsoft Edge. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2018-0767,     CVE-2018-0780)\n\n  - An elevation of privilege vulnerability exists in the     Microsoft Server Message Block (SMB) Server when an     attacker with valid credentials attempts to open a     specially crafted file over the SMB protocol on the same     machine. An attacker who successfully exploited this     vulnerability could bypass certain security checks in     the operating system.  (CVE-2018-0749)\n\n  - A denial of service vulnerability exists in the way that     Windows handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding. Note that the denial     of service condition would not allow an attacker to     execute code or to elevate user privileges. However, the     denial of service condition could prevent authorized     users from using system resources. The security update     addresses the vulnerability by correcting how Windows     handles objects in memory. (CVE-2018-0753)","Apply Cumulative Update KB4056890 or KB4057142 as well as refer   to the KB4072698 article for additional information.\n\nNotes: \n\n  - Due to a compatibility issue with some antivirus     software products, it may not be possible to apply     the required updates.\n    See Microsoft KB article 4072699 for more information.\n\n  - KB4057142 Addresses an issue with KB4056890 where some     customers on a small subset of older AMD processors get     into an unbootable state.",,,,"162"
"163","105613",,"ADV180002: Microsoft SQL Server January 2018 Security Update (Meltdown) (Spectre)","The remote Microsoft SQL Server is missing a security update. It is, therefore, affected by a vulnerability exists within microprocessors utilizing speculative execution and indirect branch prediction, which may allow an attacker with local user access to  disclose information via a side-channel analysis.","Microsoft has released a set of patches for SQL Server 2008, 2008 R2, 2012, 2014, 2016, and 2017.",,,,"117"
"164","106190",,"Oracle Java SE Multiple Vulnerabilities (January 2018 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 9 Update 4, 8 Update 161, 7 Update 171, or 6 Update 181. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - AWT\n  - Deployment\n  - Hotspot\n  - I18n\n  - Installer\n  - JCE\n  - JGSS\n  - JMX\n  - JNDI\n  - JavaFX\n  - LDAP\n  - Libraries\n  - Serialization","Upgrade to Oracle JDK / JRE 9 Update 4, 8 Update 161 / 7 Update 171 / 6 Update 181 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"65"
"165","106796",,"KB4074590: Windows 10 Version 1607 and Windows Server 2016 February 2018 Security Update (Meltdown)(Spectre)","The remote Windows host is missing security update 4074590. It is, therefore, affected by multiple vulnerabilities :\n\n  - An vulnerability exists within microprocessors utilizing     speculative execution and indirect branch prediction,     which may allow an attacker with local user access to     disclose information via a side-channel analysis.\n    (CVE-2017-5715, CVE-2017-5753, CVE-2017-5754)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0866)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-0757, CVE-2018-0829, CVE-2018-0830)\n\n  - A remote code execution vulnerability exists when     Windows improperly handles objects in memory. An     attacker who successfully exploited these     vulnerabilities could take control of an affected     system.  (CVE-2018-0842)\n\n  - A remote code execution vulnerability exists in     StructuredQuery when the software fails to properly     handle objects in memory. An attacker who successfully     exploited the vulnerability could run arbitrary code in     the context of the current user. If the current user is     logged on with administrative user rights, an attacker     could take control of the affected system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2018-0825)\n\n  - An elevation of privilege vulnerability exists when     Storage Services improperly handles objects in memory.\n    An attacker who successfully exploited this     vulnerability could run processes in an elevated     context.  (CVE-2018-0826)\n\n  - An elevation of privilege vulnerability exists when NTFS     improperly handles objects. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-0822)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-0834,     CVE-2018-0835, CVE-2018-0837, CVE-2018-0838,     CVE-2018-0857, CVE-2018-0859, CVE-2018-0860,     CVE-2018-0861)\n\n  - An elevation of privilege vulnerability exists when     AppContainer improperly implements constrained     impersonation. An attacker who successfully exploited     this vulnerability could run processes in an elevated     context.  (CVE-2018-0821)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows when the MultiPoint management account     password is improperly secured. An attacker who     successfully exploited this vulnerability could run     arbitrary code with elevated privileges.\n    (CVE-2018-0828)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0840)\n\n  - An information disclosure vulnerability exists in the     Windows kernel that could allow an attacker to retrieve     information that could lead to a Kernel Address Space     Layout Randomization (ASLR) bypass. An attacker who     successfully exploited the vulnerability could retrieve     the memory address of a kernel object.  (CVE-2018-0832)\n\n  - An information disclosure vulnerability exists when     VBScript improperly discloses the contents of its     memory, which could provide an attacker with information     to further compromise the users computer or data.\n    (CVE-2018-0847)\n\n  - An elevation of privilege vulnerability exists when the     Windows Common Log File System (CLFS) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-0844, CVE-2018-0846)\n\n  - A security feature bypass vulnerability exists when     Microsoft Edge improperly handles requests of different     origins. The vulnerability allows Microsoft Edge to     bypass Same-Origin Policy (SOP) restrictions, and to     allow requests that should otherwise be ignored. An     attacker who successfully exploited the vulnerability     could force the browser to send data that would     otherwise be restricted.  (CVE-2018-0771)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2018-0742, CVE-2018-0756, CVE-2018-0820,     CVE-2018-0831)","Apply Cumulative Update KB4074590 as well as refer to the KB article for additional information.",,,,"184"
"166","108289",,"KB4088787: Windows 10 Version 1607 and Windows Server 2016 March 2018 Security Update","The remote Windows host is missing security update 4088787.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists in     Windows when Desktop Bridge does not properly manage the     virtual registry. An attacker who successfully exploited     this vulnerability could run arbitrary code in kernel     mode. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2018-0880, CVE-2018-0882)\n\n  - An elevation of privilege vulnerability exists when     Storage Services improperly handles objects in memory.\n    An attacker who successfully exploited this     vulnerability could run processes in an elevated     context.  (CVE-2018-0983)\n\n  - An information disclosure vulnerability exists in the     Windows kernel that could allow an attacker to retrieve     information that could lead to a Kernel Address Space     Layout Randomization (ASLR) bypass. An attacker who     successfully exploited the vulnerability could retrieve     the memory address of a kernel object.  (CVE-2018-0894,     CVE-2018-0895, CVE-2018-0896, CVE-2018-0897,     CVE-2018-0898, CVE-2018-0899, CVE-2018-0900,     CVE-2018-0901, CVE-2018-0904)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Graphics Device Interface (GDI)     handles objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-0816, CVE-2018-0817)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Windows kernel-mode driver fails to     properly handle objects in memory. An attacker who     successfully exploited this vulnerability could run     arbitrary code in kernel mode. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2018-0977)\n\n  - A security feature bypass vulnerability exists in     Windows Scripting Host which could allow an attacker to     bypass Device Guard. An attacker who successfully     exploited this vulnerability could circumvent a User     Mode Code Integrity (UMCI) policy on the machine.\n    (CVE-2018-0884)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Microsoft Video Control mishandles     objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     system mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-0881)\n\n  - An elevation of privilege vulnerability exists when     Internet Explorer fails a check, allowing sandbox     escape. An attacker who successfully exploited the     vulnerability could use the sandbox escape to elevate     privileges on an affected system. This vulnerability by     itself does not allow arbitrary code execution; however,     it could allow arbitrary code to be run if the attacker     uses it in combination with another vulnerability (such     as a remote code execution vulnerability or another     elevation of privilege vulnerability) that is capable of     leveraging the elevated privileges when code execution     is attempted. The update addresses the vulnerability by     correcting how Internet Explorer handles zone and     integrity settings. (CVE-2018-0942)\n\n  - A remote code execution vulnerability exists in the     Credential Security Support Provider protocol (CredSSP).\n    An attacker who successfully exploited this     vulnerability could relay user credentials and use them     to execute code on the target system. CredSSP is an     authentication provider which processes authentication     requests for other applications; any application which     depends on CredSSP for authentication may be vulnerable     to this type of attack. As an example of how an attacker     would exploit this vulnerability against Remote Desktop     Protocol, the attacker would need to run a specially     crafted application and perform a man-in-the-middle     attack against a Remote Desktop Protocol session. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights. The security update addresses the vulnerability     by correcting how Credential Security Support Provider     protocol (CredSSP) validates requests during the     authentication process. To be fully protected against     this vulnerability users must enable Group Policy     settings on their systems and update their Remote     Desktop clients. The Group Policy settings are disabled     by default to prevent connectivity problems and users     must follow the instructions documented HERE to be fully     protected. (CVE-2018-0886)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Microsoft browsers. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system.\n    (CVE-2018-0891)\n\n  - A remote code execution vulnerability exists when     Windows Shell does not properly validate file copy     destinations. An attacker who successfully exploited the     vulnerability could run arbitrary code in the context of     the current user. If the current user is logged on with     administrative user rights, an attacker could take     control of the affected system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights. Users whose     accounts are configured to have fewer user rights on the     system could be less impacted than users who operate     with administrative user rights.  (CVE-2018-0883)\n\n  - An information disclosure vulnerability exists when     affected Microsoft browsers improperly handle objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-0927,     CVE-2018-0932)\n\n  - A security feature bypass vulnerability exists in the     Cryptography Next Generation (CNG) kernel-mode driver     (cng.sys) when it fails to properly validate and enforce     impersonation levels. An attacker could exploit this     vulnerability by convincing a user to run a specially     crafted application that is designed to cause CNG to     improperly validate impersonation levels, potentially     allowing the attacker to gain access to information     beyond the access level of the local user. The security     update addresses the vulnerability by correcting how the     kernel-mode driver validates and enforces impersonation     levels. (CVE-2018-0902)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2018-0888)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-0876,     CVE-2018-0893)\n\n  - An information disclosure vulnerability exists when     Windows Remote Assistance incorrectly processes XML     External Entities (XXE). An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2018-0878)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-0929)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Desktop Bridge VFS does not take into     acccount user/kernel mode when managing file paths. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2018-0877)\n\n  - An elevation of privilege vulnerability exists in the     Windows Installer when the Windows Installer fails to     properly sanitize input leading to an insecure library     loading behavior. A locally authenticated attacker could     run arbitrary code with elevated system privileges. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights. The security update addresses the vulnerability     by correcting the input sanitization error to preclude     unintended elevation. (CVE-2018-0868)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2018-0885)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0889, CVE-2018-0935)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2018-0811, CVE-2018-0813, CVE-2018-0814,     CVE-2018-0926)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-0872, CVE-2018-0873,     CVE-2018-0874, CVE-2018-0931, CVE-2018-0933,     CVE-2018-0934)","Apply Cumulative Update KB4088787.",,,,"200"
"167","108967",,"KB4093119: Windows 10 Version 1607 and Windows Server 2016 April 2018 Security Update","The remote Windows host is missing security update 4093119.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles objects in memory and     incorrectly maps kernel memory.  (CVE-2018-1009)\n\n  - A security feature bypass exists when Device Guard     incorrectly validates an untrusted file. An attacker who     successfully exploited this vulnerability could make an     unsigned file appear to be signed. Because Device Guard     relies on the signature to determine the file is non-     malicious, Device Guard could then allow a malicious     file to execute. In an attack scenario, an attacker     could make an untrusted file appear to be a trusted     file. The update addresses the vulnerability by     correcting how Device Guard handles untrusted files.\n    (CVE-2018-0966)\n\n  - A denial of service vulnerability exists in the way that     Windows SNMP Service handles malformed SNMP traps. An     attacker who successfully exploited the vulnerability     could cause a target system to stop responding. Note     that the denial of service condition would not allow an     attacker to execute code or to elevate user privileges.\n    However, the denial of service condition could prevent     authorized users from using system resources. The     security update addresses the vulnerability by     correcting how Windows SNMP Service processes SNMP     traps. (CVE-2018-0967)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-0960)\n\n  - An elevation of privilege vulnerability exists in     Windows Adobe Type Manager Font Driver (ATMFD.dll) when     it fails to properly handle objects in memory. An     attacker who successfully exploited this vulnerability     could execute arbitrary code and take control of an     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2018-1008)\n\n  - An information disclosure vulnerability exists when     Microsoft Edge improperly handles objects in memory. An     attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-0892)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2018-0957)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Internet Explorer. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system.\n    (CVE-2018-0987)\n\n  - A buffer overflow vulnerability exists in the Microsoft     JET Database Engine that could allow remote code     execution on an affected system. An attacker who     successfully exploited this vulnerability could take     control of an affected system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights. Users whose     accounts are configured to have fewer user rights on the     system could be less impacted than users who operate     with administrative user rights.  (CVE-2018-1003)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2018-0963)\n\n  - A denial of service vulnerability exists in Remote     Desktop Protocol (RDP) when an attacker connects to the     target system using RDP and sends specially crafted     requests. An attacker who successfully exploited this     vulnerability could cause the RDP service on the target     system to stop responding.  (CVE-2018-0976)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0988, CVE-2018-0996, CVE-2018-1001)\n\n  - A security feature bypass vulnerability exists when     Active Directory incorrectly applies Network Isolation     settings.  (CVE-2018-0890)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited the vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2018-1010,     CVE-2018-1012, CVE-2018-1013, CVE-2018-1015,     CVE-2018-1016)\n\n  - An information disclosure vulnerability exists in the     way that the scripting engine handles objects in memory     in Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could provide an     attacker with information to further compromise the     user&apos;s computer or data.  (CVE-2018-0981, CVE-2018-0989,     CVE-2018-1000)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-0870,     CVE-2018-0991, CVE-2018-0997, CVE-2018-1018,     CVE-2018-1020)\n\n  - An information disclosure vulnerability exists when     Microsoft Edge PDF Reader improperly handles objects in     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-0998)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-1023)\n\n  - An information disclosure vulnerability exists in the     Windows kernel that could allow an attacker to retrieve     information that could lead to a Kernel Address Space     Layout Randomization (ASLR) bypass. An attacker who     successfully exploited the vulnerability could retrieve     the memory address of a kernel object.  (CVE-2018-0968,     CVE-2018-0969, CVE-2018-0970, CVE-2018-0971,     CVE-2018-0972, CVE-2018-0973, CVE-2018-0974,     CVE-2018-0975)\n\n  - A denial of service vulnerability exists in the way that     Windows handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding. Note that the denial     of service condition would not allow an attacker to     execute code or to elevate user privileges. However, the     denial of service condition could prevent authorized     users from using system resources. The security update     addresses the vulnerability by correcting how Windows     handles objects in memory. (CVE-2018-8116)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2018-1004)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-0979, CVE-2018-0980,     CVE-2018-0990, CVE-2018-0993, CVE-2018-0994,     CVE-2018-0995)\n\n  - A denial of service vulnerability exists in the HTTP 2.0     protocol stack (HTTP.sys) when HTTP.sys improperly     parses specially crafted HTTP 2.0 requests. An attacker     who successfully exploited the vulnerability could     create a denial of service condition, causing the target     system to become unresponsive.  (CVE-2018-0956)\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-0887)","Apply Cumulative Update KB4093119.",,,,"44"
"168","109202",,"Oracle Java SE Multiple Vulnerabilities (April 2018 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 10 Update 1, 8 Update 171, 7 Update 181, or 6 Update 191. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - AWT\n  - Concurrency\n  - Hotspot\n  - Install\n  - JAXP\n  - JMX\n  - Libraries\n  - RMI\n  - Security\n  - Serialization","Upgrade to Oracle JDK / JRE 10 Update 1, 8 Update 171 / 7 Update 181 / 6 Update 191 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"139"
"169","109606",,"KB4103723: Windows 10 Version 1607 and Windows Server 2016 May 2018 Security Update","The remote Windows host is missing security update 4103723.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists in .Net     Framework which could allow an attacker to bypass Device     Guard. An attacker who successfully exploited this     vulnerability could circumvent a User Mode Code     Integrity (UMCI) policy on the machine.  (CVE-2018-1039)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8178)\n\n  - A remote code execution vulnerability exists in     Microsoft COM for Windows when it fails to     properly handle serialized objects. An attacker who     successfully exploited the vulnerability could use a     specially crafted file or script to perform actions. In     an email attack scenario, an attacker could exploit the     vulnerability by sending the specially crafted file to     the user and convincing the user to open the file.\n    (CVE-2018-0824)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-0951,     CVE-2018-0953, CVE-2018-8137)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate vSMB packet data. An attacker who successfully     exploited these vulnerabilities could execute arbitrary     code on a target operating system. To exploit these     vulnerabilities, an attacker running inside a virtual     machine could run a specially crafted application that     could cause the Hyper-V host operating system to execute     arbitrary code. The update addresses the vulnerabilities     by correcting how Windows Hyper-V validates vSMB packet     data. (CVE-2018-0961)\n\n  - An information disclosure vulnerability exists when     affected Microsoft browsers improperly handle objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-1025)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0955, CVE-2018-8114, CVE-2018-8122)\n\n  - An elevation of privilege vulnerability exists when the     Windows Common Log File System (CLFS) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-8167)\n\n  - A security feature bypass vulnerability exists in     Windows which could allow an attacker to bypass Device     Guard. An attacker who successfully exploited this     vulnerability could circumvent a User Mode Code     Integrity (UMCI) policy on the machine.  (CVE-2018-0958,     CVE-2018-8129, CVE-2018-8132)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8127)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2018-8174)\n\n  - A security feature bypass vulnerability exists when     Microsoft Edge improperly handles requests of different     origins. The vulnerability allows Microsoft Edge to     bypass Same-Origin Policy (SOP) restrictions, and to     allow requests that should otherwise be ignored. An     attacker who successfully exploited the vulnerability     could force the browser to send data that would     otherwise be restricted.  (CVE-2018-8112)\n\n  - A denial of service vulnerability exists when .NET and     .NET Core improperly process XML documents. An attacker     who successfully exploited this vulnerability could     cause a denial of service against a .NET application. A     remote unauthenticated attacker could exploit this     vulnerability by issuing specially crafted requests to a     .NET (or .NET core) application. The update addresses     the vulnerability by correcting how .NET and .NET Core     applications handle XML document processing.\n    (CVE-2018-0765)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2018-8897)\n\n  - An information disclosure vulnerability exists when     Chakra improperly discloses the contents of its memory,     which could provide an attacker with information to     further compromise the users computer or data.\n    (CVE-2018-8145)\n\n  - A security feature bypass vulnerability exists in     Windows Scripting Host which could allow an attacker to     bypass Device Guard. An attacker who successfully     exploited this vulnerability could circumvent a User     Mode Code Integrity (UMCI) policy on the machine.\n    (CVE-2018-0854)\n\n  - An elevation of privilege vulnerability exists when the     DirectX Graphics Kernel (DXGKRNL) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-8165)\n\n  - A remote code execution vulnerability exists in the way     that Windows handles objects in memory. An attacker who     successfully exploited the vulnerability could execute     arbitrary code with elevated permissions on a target     system.  (CVE-2018-8136)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2018-0959)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-8124, CVE-2018-8164,     CVE-2018-8166)\n\n  - A security feature bypass vulnerability exists when     Internet Explorer fails to validate User Mode Code     Integrity (UMCI) policies. The vulnerability could allow     an attacker to bypass Device Guard UMCI policies.\n    (CVE-2018-8126)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel API enforces permissions. An     attacker who successfully exploited the vulnerability     could impersonate processes, interject cross-process     communication, or interrupt system functionality.\n    (CVE-2018-8134)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-0954, CVE-2018-1022)\n\n  - A remote code execution vulnerability exists when     Microsoft Edge improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that enables an attacker to execute arbitrary code in     the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8179)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-0943, CVE-2018-8133)","Apply Cumulative Update KB4103723.",,,,"58"
"170","109652",,"Security Updates for Microsoft .NET Framework (May 2018)","The Microsoft .NET Framework installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists in .Net     Framework which could allow an attacker to bypass Device     Guard. An attacker who successfully exploited this     vulnerability could circumvent a User Mode Code     Integrity (UMCI) policy on the machine.  (CVE-2018-1039)\n\n  - A denial of service vulnerability exists when .NET and     .NET Core improperly process XML documents. An attacker     who successfully exploited this vulnerability could     cause a denial of service against a .NET application. A     remote unauthenticated attacker could exploit this     vulnerability by issuing specially crafted requests to a     .NET (or .NET core) application. The update addresses     the vulnerability by correcting how .NET and .NET Core     applications handle XML document processing.\n    (CVE-2018-0765)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"171","110491",,"KB4284880: Windows 10 Version 1607 and Windows Server 2016 June 2018 Security Update","The remote Windows host is missing security update 4284880.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when the     (Human Interface Device) HID Parser Library driver     improperly handles objects in memory. An attacker who     successfully exploited this vulnerability could run     processes in an elevated context.  (CVE-2018-8169)\n\n  - A memory corruption vulnerability exists when Windows     Media Foundation improperly handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could install programs; view, change, or delete data; or     create new accounts with full user rights. There are     multiple ways an attacker could exploit the     vulnerability, such as by convincing a user to open a     specially crafted document, or by convincing a user to     visit a malicious webpage. The security update addresses     the vulnerability by correcting how Windows Media     Foundation handles objects in memory. (CVE-2018-8251)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2018-8205)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2018-8239)\n\n  - A remote code execution vulnerability exists when HTTP     Protocol Stack (Http.sys) improperly handles objects in     memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code and take     control of the affected system.  (CVE-2018-8231)\n\n  - An information disclosure vulnerability exists when     Microsoft Edge improperly handles objects in memory. An     attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8234)\n\n  - A denial of service vulnerability exists in the HTTP 2.0     protocol stack (HTTP.sys) when HTTP.sys improperly     parses specially crafted HTTP 2.0 requests. An attacker     who successfully exploited the vulnerability could     create a denial of service condition, causing the target     system to become unresponsive.  (CVE-2018-8226)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8229)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8267)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8207)\n\n  - An elevation of privilege vulnerability exists when NTFS     improperly checks access. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-1036)\n\n  - A remote code execution vulnerability exists in Windows     Domain Name System (DNS) DNSAPI.dll when it fails to     properly handle DNS responses. An attacker who     successfully exploited the vulnerability could run     arbitrary code in the context of the Local System     Account.  (CVE-2018-8225)\n\n  - A security feature bypass vulnerability exists when     Microsoft Edge improperly handles requests of different     origins. The vulnerability allows Microsoft Edge to     bypass Same-Origin Policy (SOP) restrictions, and to     allow requests that should otherwise be ignored. An     attacker who successfully exploited the vulnerability     could force the browser to send data that would     otherwise be restricted.  (CVE-2018-8235)\n\n  - An information disclosure vulnerability exists when     Windows allows a normal user to access the Wireless LAN     profile of an administrative user. An authenticated     attacker who successfully exploited the vulnerability     could access the Wireless LAN profile of an     administrative user, including passwords for wireless     networks. An attacker would need to log on to the     affected system and run a specific command. The security     update addresses the vulnerability by changing the way     that Windows enforces access permissions to Wireless LAN     profiles. (CVE-2018-8209)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-0978)\n\n  - An elevation of privilege vulnerability exists when     Windows Hyper-V instruction emulation fails to properly     enforce privilege levels. An attacker who successfully     exploited this vulnerability could gain elevated     privileges on a target guest operating system. The host     operating system is not vulnerable to this attack. This     vulnerability by itself does not allow arbitrary code to     be run. However, the vulnerability could be used in     conjunction with one or more vulnerabilities (e.g. a     remote code execution vulnerability and another     elevation of privilege) that could take advantage of the     elevated privileges when running. The update addresses     the vulnerability by correcting how privileges are     enforced by Windows Hyper-V instruction emulation.\n    (CVE-2018-8219)\n\n  - A security feature bypass vulnerability exists in Device     Guard that could allow an attacker to inject malicious     code into a Windows PowerShell session. An attacker who     successfully exploited this vulnerability could inject     code into a trusted PowerShell process to bypass the     Device Guard Code Integrity policy on the local machine.\n    (CVE-2018-8201, CVE-2018-8212, CVE-2018-8215,     CVE-2018-8216, CVE-2018-8217, CVE-2018-8221)\n\n  - A remote code execution vulnerability exists when     Microsoft Edge improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that enables an attacker to execute arbitrary code in     the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8236)\n\n  - A denial of service vulnerability exists in the way that     the Windows Code Integrity Module performs hashing. An     attacker who successfully exploited the vulnerability     could cause a system to stop responding. Note that the     denial of service condition would not allow an attacker     to execute code or to elevate user privileges. However,     the denial of service condition could prevent authorized     users from using system resources. An attacker could     host a specially crafted file in a website or SMB share.\n    The attacker could also take advantage of compromised     websites, or websites that accept or host user-provided     content or advertisements, by adding specially crafted     content that could exploit the vulnerability. However,     in all cases an attacker would have no way to force     users to view the attacker-controlled content. Instead,     an attacker would have to convince users to take action,     typically via an enticement in email or instant message,     or by getting them to open an email attachment. The     security update addresses the vulnerability by modifying     how the Code Integrity Module performs hashing.\n    (CVE-2018-1040)\n\n  - A remote code execution vulnerability exists when     Windows improperly handles objects in memory. An     attacker who successfully exploited these     vulnerabilities could take control of an affected     system.  (CVE-2018-8210, CVE-2018-8213)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel API enforces permissions. An     attacker who successfully exploited the vulnerability     could impersonate processes, interject cross-process     communication, or interrupt system functionality.\n    (CVE-2018-0982)\n\n  - An elevation of privilege vulnerability exists in     Windows when Desktop Bridge does not properly manage the     virtual registry. An attacker who successfully exploited     this vulnerability could run arbitrary code in kernel     mode. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2018-8208, CVE-2018-8214)","Apply Cumulative Update KB4284880.",,,,"22"
"172","110980",,"KB4338814: Windows 10 Version 1607 and Windows Server 2016 July 2018 Security Update","The remote Windows host is missing security update 4338814.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists in .NET     Framework which could allow an attacker to elevate their     privilege level.  (CVE-2018-8202)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8242, CVE-2018-8296)\n\n  - A denial of service vulnerability exists in Windows     Domain Name System (DNS) DNSAPI.dll when it fails to     properly handle DNS responses. An attacker who     successfully exploited the vulnerability could cause a     system to stop responding. Note that the denial of     service condition would not allow an attacker to execute     code or to elevate user privileges. However, the denial     of service condition could prevent authorized users from     using system resources.  (CVE-2018-8304)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2018-8309)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8280, CVE-2018-8290)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Windows kernel-mode driver fails to     properly handle objects in memory. An attacker who     successfully exploited this vulnerability could run     arbitrary code in kernel mode. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2018-8282)\n\n  - A remote code execution vulnerability exists when     Microsoft Edge improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that enables an attacker to execute arbitrary code in     the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8125,     CVE-2018-8275)\n\n  - A denial of service vulnerability exists when Windows     improperly handles File Transfer Protocol (FTP)     connections. An attacker who successfully exploited the     vulnerability could cause a target system to stop     responding.  (CVE-2018-8206)\n\n  - A security feature bypass vulnerability exists in Device     Guard that could allow an attacker to inject malicious     code into a Windows PowerShell session. An attacker who     successfully exploited this vulnerability could inject     code into a trusted PowerShell process to bypass the     Device Guard Code Integrity policy on the local machine.\n    (CVE-2018-8222)\n\n  - A security feature bypass vulnerability exists when     Microsoft Internet Explorer improperly handles requests     involving UNC resources. An attacker who successfully     exploited the vulnerability could force the browser to     load data that would otherwise be restricted.\n    (CVE-2018-0949)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2018-8308)\n\n  - A security feature bypass vulnerability exists when     Microsoft WordPad improperly handles embedded OLE     objects. An attacker who successfully exploited the     vulnerability could bypass content blocking. In a file-     sharing attack scenario, an attacker could provide a     specially crafted document file designed to exploit the     vulnerability, and then convince a user to open the     document file. The security update addresses the     vulnerability by correcting how Microsoft WordPad     handles input. (CVE-2018-8307)\n\n  - A Remote Code Execution vulnerability exists in .NET     software when the software fails to check the source     markup of a file. An attacker who successfully exploited     the vulnerability could run arbitrary code in the     context of the current user. If the current user is     logged on with administrative user rights, an attacker     could take control of the affected system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2018-8260)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel API enforces permissions. An     attacker who successfully exploited the vulnerability     could impersonate processes, interject cross-process     communication, or interrupt system functionality.\n    (CVE-2018-8313)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8287, CVE-2018-8288, CVE-2018-8291)\n\n  - A remote code execution vulnerability exists when the     Microsoft .NET Framework fails to validate input     properly. An attacker who successfully exploited this     vulnerability could take control of an affected system.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights. Users whose accounts are configured to have     fewer user rights on the system could be less impacted     than users who operate with administrative user rights.\n    (CVE-2018-8284)\n\n  - A security feature bypass vulnerability exists when     Microsoft .NET Framework components do not correctly     validate certificates. An attacker could present expired     certificates when challenged. The security update     addresses the vulnerability by ensuring that .NET     Framework components correctly validate certificates.\n    (CVE-2018-8356)","Apply Cumulative Update KB4338814.",,,,"47"
"173","111163",,"Oracle Java SE Multiple Vulnerabilities (July 2018 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 10 Update 2, 8 Update 181, 7 Update 191, or 6 Update 201. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - Concurrency. A difficult to exploit vulnerability allows     an unauthenticated attacker with network access via     multiple protocols to compromise Java SE (CVE-2018-2952)\n\n  - Deployment. A difficult to exploit vulnerability allows     an unauthenticated attacker with network access via     multiple protocols to compromise Java SE (CVE-2018-2964)\n\n  - JSSE. A difficult to exploit vulnerability allows     an unauthenticated attacker with network access via     multiple protocols to compromise Java SE (CVE-2018-2973)\n\n  - Java DB. A difficult to exploit vulnerability allows an     unauthenticated attacker with network access via     multiple protocols to compromise Java SE. (CVE-2018-2938)\n\n  - JavaFX. A difficult to exploit vulnerability allows an     unauthenticated attacker with network access via     multiple protocols to compromise Java SE. (CVE-2018-2941)\n\n  - Libraries. An easily exploitable vulnerability allows     an unauthenticated attacker with network access via     multiple protocols to compromise Java SE. (CVE-2018-2940)\n\n  - Security. A difficult to exploit vulnerability allows     an unauthenticated attacker with network access via     multiple protocols to compromise Java SE (CVE-2018-2972)\n\n  - Windows DLL. A difficult to exploit vulnerability allows     an unauthenticated attacker with network access via     multiple protocols to compromise Java SE (CVE-2018-2942)\n\nNote that Nessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to Oracle JDK / JRE 10 Update 2, 8 Update 181 / 7 Update 191 / 6 Update 201 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"138"
"174","111685",,"KB4343887: Windows 10 Version 1607 and Windows Server 2016 August 2018 Security Update (Foreshadow)","The remote Windows host is missing security update 4343887.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8341, CVE-2018-8348)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited the vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2018-8344)\n\n  - An elevation of privilege vulnerability exists in the     Network Driver Interface Specification (NDIS) when     ndis.sys fails to check the length of a buffer prior to     copying memory to it.  (CVE-2018-8343)\n\n  - A remote code execution vulnerability exists in     &amp;quot;Microsoft COM for Windows&amp;quot; when it fails to     properly handle serialized objects. An attacker who     successfully exploited the vulnerability could use a     specially crafted file or script to perform actions. In     an email attack scenario, an attacker could exploit the     vulnerability by sending the specially crafted file to     the user and convincing the user to open the file.\n    (CVE-2018-8349)\n\n  - A security feature bypass vulnerability exists when     Microsoft Edge improperly handles redirect requests. The     vulnerability allows Microsoft Edge to bypass Cross-     Origin Resource Sharing (CORS) redirect restrictions,     and to follow redirect requests that should otherwise be     ignored. An attacker who successfully exploited the     vulnerability could force the browser to send data that     would otherwise be restricted to a destination website     of the attacker&apos;s choice.  (CVE-2018-8358)\n\n  - A security feature bypass vulnerability exists in Device     Guard that could allow an attacker to inject malicious     code into a Windows PowerShell session. An attacker who     successfully exploited this vulnerability could inject     code into a trusted PowerShell process to bypass the     Device Guard Code Integrity policy on the local machine.\n    (CVE-2018-8200, CVE-2018-8204)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8355, CVE-2018-8372, CVE-2018-8385)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows when the Windows kernel fails to     properly handle parsing of certain symbolic links. An     attacker who successfully exploited this vulnerability     could potentially access privileged registry keys and     thereby elevate permissions. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2018-8347)\n\n  - A remote code execution vulnerability exists in     Microsoft Windows that could allow remote code execution     if a .LNK file is processed. An attacker who     successfully exploited this vulnerability could gain the     same user rights as the local user.  (CVE-2018-8345)\n\n  - A information disclosure vulnerability exists when     WebAudio Library improperly handles audio requests. An     attacker who has successfully exploited this     vulnerability might be able to read privileged data     across trust boundaries. In browsing scenarios, an     attacker could convince a user to visit a malicious site     and leverage the vulnerability to obtain privileged     information from the browser process, such as sensitive     data from other opened tabs. An attacker could also     inject malicious code into advertising networks used by     trusted sites or embed malicious code on a compromised,     but trusted, site. The update addresses the     vulnerability by correcting how the WebAudio Library     handles audio requests. (CVE-2018-8370)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-8404)\n\n  - An elevation of privilege vulnerability exists in the     Windows Installer when the Windows Installer fails to     properly sanitize input leading to an insecure library     loading behavior. A locally authenticated attacker could     run arbitrary code with elevated system privileges. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights. The security update addresses the vulnerability     by correcting the input sanitization error to preclude     unintended elevation. (CVE-2018-8339)\n\n  - A security feature bypass vulnerability exists when     Active Directory Federation Services (AD FS) improperly     handles multi-factor authentication requests.\n    (CVE-2018-8340)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8266, CVE-2018-8381)\n\n  - An elevation of privilege vulnerability exists when     Microsoft Cortana allows arbitrary website browsing on     the lockscreen. An attacker who successfully exploited     the vulnerability could steal browser stored passwords     or log on to websites as another user.  (CVE-2018-8253)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly validates hyperlinks before     loading executable libraries. An attacker who     successfully exploited this vulnerability could take     control of an affected system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2018-8316)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2018-8394, CVE-2018-8398)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8403)\n\n  - An information disclosure vulnerability exists when     affected Microsoft browsers improperly allow cross-frame     interaction. An attacker who successfully exploited this     vulnerability could allow an attacker to obtain browser     frame or window state from a different domain. For an     attack to be successful, an attacker must persuade a     user to open a malicious website from a secure website.\n    This update addresses the vulnerability by denying     permission to read the state of the object model, to     which frames or windows on different domains should not     have access. (CVE-2018-8351)\n\n  - An elevation of privilege vulnerability exists in     Microsoft browsers allowing sandbox escape. An attacker     who successfully exploited the vulnerability could use     the sandbox escape to elevate privileges on an affected     system. This vulnerability by itself does not allow     arbitrary code execution; however, it could allow     arbitrary code to be run if the attacker uses it in     combination with another vulnerability (such as a remote     code execution vulnerability or another elevation of     privilege vulnerability) that is capable of leveraging     the elevated privileges when code execution is     attempted. (CVE-2018-8357)\n\n  - An Elevation of Privilege vulnerability exists when     Diagnostics Hub Standard Collector allows file creation     in arbitrary locations.  (CVE-2018-0952)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8353, CVE-2018-8371, CVE-2018-8373,     CVE-2018-8389)\n\n  - An elevation of privilege vulnerability exists when the     DirectX Graphics Kernel (DXGKRNL) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-8401, CVE-2018-8405,     CVE-2018-8406)\n\n  - An information disclosure vulnerability exists in     Microsoft .NET Framework that could allow an attacker to     access information in multi-tenant environments. The     vulnerability is caused when .NET Framework is used in     high-load/high-density network connections where content     from one stream can blend into another stream.\n    (CVE-2018-8360)\n\n  - A spoofing vulnerability exists when Microsoft Edge     improperly handles specific HTML content. An attacker     who successfully exploited this vulnerability could     trick a user into believing that the user was on a     legitimate website. The specially crafted website could     either spoof content or serve as a pivot to chain an     attack with other vulnerabilities in web services.\n    (CVE-2018-8388)","Apply Cumulative Update KB4343887 as well as refer to the KB article for additional information.",,,,"155"
"175","111693",,"Security Updates for Microsoft .NET Framework (August 2018)","The Microsoft .NET Framework installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerability :\n\n  - An information disclosure vulnerability exists in     Microsoft .NET Framework that could allow an attacker to     access information in multi-tenant environments. The     vulnerability is caused when .NET Framework is used in     high-load/high-density network connections where content     from one stream can blend into another stream.\n    (CVE-2018-8360)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"176","111786",,"Security Updates for Microsoft SQL Server 2016 and 2017 x64 (August 2018)","The remote Microsoft SQL Server is missing a security update. It is, therefore, affected by buffer overflow vulnerability that could allow remote code execution on an affected system.\nAn attacker who successfully exploited the vulnerability could execute code in the context of the SQL Server Database Engine service account.","Microsoft has released a set of patches for x64 versions of SQL Server 2016 and 2017.",,,,"282"
"177","112116",,"Security Updates for Windows 10 / Windows Server 2016 (August 2018) (Spectre) (Meltdown) (Foreshadow)","The remote Windows host is missing a security update. It is, therefore, missing microcode updates to address Rogue System Register Read (RSRE), Speculative Store Bypass (SSB), L1 Terminal Fault (L1TF), and Branch Target Injection vulnerabilities.","Microsoft has released security updates for Windows 10 and Windows Server 2016.",,,,"130"
"178","117413",,"KB4457131: Windows 10 Version 1607 and Windows Server 2016 September 2018 Security Update","The remote Windows host is missing security update 4457131.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8457)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2018-8424)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2018-0965, CVE-2018-8439)\n\n  - A remote code execution vulnerability exists when     Windows does not properly handle specially crafted image     files. An attacker who successfully exploited the     vulnerability could execute arbitrary code.\n    (CVE-2018-8475)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2018-8440)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Edge that could allow an attacker to escape     from the AppContainer sandbox in the browser. An     attacker who successfully exploited this vulnerability     could gain elevated privileges and break out of the Edge     AppContainer sandbox. The vulnerability by itself does     not allow arbitrary code to run. However, this     vulnerability could be used in conjunction with one or     more vulnerabilities (for example a remote code     execution vulnerability and another elevation of     privilege vulnerability) to take advantage of the     elevated privileges when running. The security update     addresses the vulnerability by modifying how Microsoft     Edge handles sandboxing. (CVE-2018-8469)\n\n  - An elevation of privilege vulnerability exists in     Windows that allows a sandbox escape. An attacker who     successfully exploited the vulnerability could use the     sandbox escape to elevate privileges on an affected     system. This vulnerability by itself does not allow     arbitrary code execution. However, the vulnerability     could allow arbitrary code to run if an attacker uses it     in combination with another vulnerability, such as a     remote code execution vulnerability or another elevation     of privilege vulnerability, that can leverage the     elevated privileges when code execution is attempted.\n    The security update addresses the vulnerability by     correcting how Windows parses files. (CVE-2018-8468)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how the Windows kernel handles objects in     memory. (CVE-2018-8442, CVE-2018-8443)\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-8419)\n\n  - An elevation of privilege vulnerability exists when the     Windows Kernel API improperly handles registry objects     in memory. An attacker who successfully exploited the     vulnerability could gain elevated privileges on a     targeted system. A locally authenticated attacker could     exploit this vulnerability by running a specially     crafted application. The security update addresses the     vulnerability by helping to ensure that the Windows     Kernel API properly handles objects in memory.\n    (CVE-2018-8410)\n\n  - An elevation of privilege vulnerability exists when the     DirectX Graphics Kernel (DXGKRNL) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-8462)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8446)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2018-8420)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2018-8438)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2018-8434)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2018-8332)\n\n  - An information disclosure vulnerability exists when the     browser scripting engine improperly handle object types.\n    An attacker who has successfully exploited this     vulnerability might be able to read privileged data     across trust boundaries. In browsing scenarios, an     attacker could convince a user to visit a malicious site     and leverage the vulnerability to obtain privileged     information from the browser process, such as sensitive     data from other opened tabs. An attacker could also     inject malicious code into advertising networks used by     trusted sites or embed malicious code on a compromised,     but trusted, site. The security update addresses the     vulnerability by correcting how the browser scripting     engine handles object types. (CVE-2018-8315)\n\n  - A buffer overflow vulnerability exists in the Microsoft     JET Database Engine that could allow remote code     execution on an affected system. An attacker who     successfully exploited this vulnerability could take     control of an affected system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights. Users whose     accounts are configured to have fewer user rights on the     system could be less impacted than users who operate     with administrative user rights.  (CVE-2018-8392,     CVE-2018-8393)\n\n  - A denial of service vulnerability exists in the     Microsoft Server Block Message (SMB) when an attacker     sends specially crafted requests to the server. An     attacker who exploited this vulnerability could cause     the affected system to crash. To attempt to exploit this     issue, an attacker would need to send specially crafted     SMB requests to the target system. Note that the denial     of service vulnerability would not allow an attacker to     execute code or to elevate their user rights, but it     could cause the affected system to stop accepting     requests. The security update addresses the     vulnerability by correcting the manner in which SMB     handles specially crafted client requests.\n    (CVE-2018-8335)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2018-8455)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8447)\n\n  - An information disclosure vulnerability exists in     Windows when the Windows bowser.sys kernel-mode driver     fails to properly handle objects in memory. An attacker     who successfully exploited the vulnerability could     potentially disclose contents of System memory.\n    (CVE-2018-8271)\n\n  - An remote code execution vulnerability exists when     Microsoft Edge PDF Reader improperly handles objects in     memory. The vulnerability could corrupt memory in such a     way that enables an attacker to execute arbitrary code     in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user. If the current     user is logged on with administrative user rights, an     attacker could take control of an affected system. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights.  (CVE-2018-8464)\n\n  - A remote code execution vulnerability exists when     Microsoft .NET Framework processes input. An attacker     who successfully exploited this vulnerability could take     control of an affected system.  (CVE-2018-8421)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8367, CVE-2018-8465,     CVE-2018-8466, CVE-2018-8467)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Microsoft browsers. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system.\n    (CVE-2018-8452)\n\n  - A security feature bypass exists when Device Guard     incorrectly validates an untrusted file. An attacker who     successfully exploited this vulnerability could make an     unsigned file appear to be signed. Because Device Guard     relies on the signature to determine the file is non-     malicious, Device Guard could then allow a malicious     file to execute. In an attack scenario, an attacker     could make an untrusted file appear to be a trusted     file. The update addresses the vulnerability by     correcting how Device Guard handles untrusted files.\n    (CVE-2018-8449)\n\n  - An information disclosure vulnerability exists when the     Windows Graphics component improperly handles objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system. An authenticated attacker     could exploit this vulnerability by running a specially     crafted application. The update addresses the     vulnerability by correcting how the Windows Graphics     Component handles objects in memory. (CVE-2018-8433)\n\n  - A security feature bypass vulnerability exists when     Windows Hyper-V BIOS loader fails to provide a high-     entropy source.  (CVE-2018-8435)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8354)\n\n  - A security feature bypass vulnerability exists in     Internet Explorer due to how scripts are handled that     allows a universal cross-site scripting (UXSS)     condition. An attacker could use the UXSS vulnerability     to access any session belonging to web pages currently     opened (or cached) by the browser at the time the attack     is triggered.  (CVE-2018-8470)\n\n  - A spoofing vulnerability exists when Microsoft Edge     improperly handles specific HTML content. An attacker     who successfully exploited this vulnerability could     trick a user into believing that the user was on a     legitimate website. The specially crafted website could     either spoof content or serve as a pivot to chain an     attack with other vulnerabilities in web services.\n    (CVE-2018-8425)","Apply Cumulative Update KB4457131.",,,,"260"
"179","117431",,"Security Updates for Microsoft .NET Framework (September 2018)","The Microsoft .NET Framework installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerability :\n\n  - A remote code execution vulnerability exists when     Microsoft .NET Framework processes input. An attacker     who successfully exploited this vulnerability could take     control of an affected system.  (CVE-2018-8421)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"180","117997",,"KB4462917: Windows 10 Version 1607 and Windows Server 2016 October 2018 Security Update","The remote Windows host is missing security update 4462917.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8460,     CVE-2018-8491)\n\n  - A security feature bypass vulnerability exists in DNS     Global Blocklist feature. An attacker who successfully     exploited this vulnerability could redirect traffic to     malicious DNS endpoints. The update addresses the     vulnerability by updating DNS Server Role record     additions to not bypass the Global Query Blocklist.\n    (CVE-2018-8320)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8330)\n\n  - An information disclosure vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how DirectX handles objects in memory.\n    (CVE-2018-8486)\n\n  - An information disclosure vulnerability exists in the     way that the Windows Graphics Device Interface (GDI)     handles objects in memory, allowing an attacker to     retrieve information from a targeted system. By itself,     the information disclosure does not allow arbitrary code     execution; however, it could allow arbitrary code to be     run if the attacker uses it in combination with another     vulnerability.  (CVE-2018-8472)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-8453)\n\n  - An information disclosure vulnerability exists when the     Windows TCP/IP stack improperly handles fragmented IP     packets. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2018-8493)\n\n  - An elevation of privilege vulnerability exists when NTFS     improperly checks access. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-8411)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2018-8494)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2018-8489, CVE-2018-8490)\n\n  - A security feature bypass vulnerability exists in Device     Guard that could allow an attacker to inject malicious     code into a Windows PowerShell session. An attacker who     successfully exploited this vulnerability could inject     code into a trusted PowerShell process to bypass the     Device Guard Code Integrity policy on the local machine.\n    (CVE-2018-8492)\n\n  - An information disclosure vulnerability exists when     Windows Media Player improperly discloses file     information. Successful exploitation of the     vulnerability could allow an attacker to determine the     presence of files on disk.  (CVE-2018-8481,     CVE-2018-8482)\n\n  - A remote code execution vulnerability exists when     &amp;quot;Windows Theme API&amp;quot; does not properly     decompress files. An attacker who successfully exploited     the vulnerability could run arbitrary code in the     context of the current user. If the current user is     logged on with administrative user rights, an attacker     could take control of the affected system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    Users whose accounts are configured to have fewer user     rights on the system could be less impacted than users     who operate with administrative user rights.\n    (CVE-2018-8413)\n\n  - A remote code execution vulnerability exists when     Windows Shell improperly handles URIs. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8495)\n\n  - An elevation of privilege vulnerability exists when the     DirectX Graphics Kernel (DXGKRNL) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2018-8484)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8503, CVE-2018-8505)\n\n  - A remote code execution vulnerability exists in the     Microsoft JET Database Engine. An attacker who     successfully exploited this vulnerability could take     control of an affected system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights. Users whose     accounts are configured to have fewer user rights on the     system could be less impacted than users who operate     with administrative user rights.  (CVE-2018-8423)\n\n  - An Elevation of Privilege vulnerability exists in Filter     Manager when it improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could execute elevated code and take control of an     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2018-8333)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Kernel handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2018-8497)","Apply Cumulative Update KB4462917.",,,,"90"
"181","118228",,"Oracle Java SE Multiple Vulnerabilities (October 2018 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 11 Update 1, 8 Update 191, 7 Update 201, or 6 Update 211. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded component of Oracle Java SE in the Deployment     (libpng) subcomponent could allow an unauthenticated,     remote attacker with network access via HTTP to     compromise Java SE, Java SE Embedded. (CVE-2018-13785)\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded component of Oracle Java SE in the Hotspot     subcomponent could allow an unauthenticated, remote     attacker with network access via multiple protocols to     compromise Java SE, Java SE Embedded. (CVE-2018-3169)\n\n  - An unspecified vulnerability in the Java SE component     of Oracle Java SE in the JavaFX subcomponent could allow     an unauthenticated, remote attacker with network access     via multiple protocols to compromise Java SE.\n    (CVE-2018-3209)\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded, JRockit component of Oracle Java SE in the     JNDI subcomponent could allow an unauthenticated, remote     attacker with network access via multiple protocols to     compromise Java SE, Java SE Embedded, JRockit.\n    (CVE-2018-3149)  \n  - An unspecified vulnerability in the Java SE, Java SE     Embedded, JRockit component of Oracle Java SE in the     JSSE subcomponent could allow an unauthenticated,     remote attacker with network access via SSL/TLS to     compromise Java SE, Java SE Embedded, JRockit.\n    (CVE-2018-3180)\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded component of Oracle Java SE in the     Networking subcomponent could allow an unauthenticated,     remote attacker with network access via multiple     protocols to compromise Java SE, Java SE Embedded.\n    (CVE-2018-3139)\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded, JRockit component of Oracle Java SE in the     Scripting subcomponent could allow an unauthenticated,     remote attacker with network access via multiple     protocols to compromise Java SE, Java SE Embedded,     JRockit. (CVE-2018-3183)\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded component of Oracle Java SE in the Security     subcomponent could allow an unauthenticated, remote     attacker with network access via multiple protocols to     compromise Java SE, Java SE Embedded. (CVE-2018-3136)\n\n  - An unspecified vulnerability in the Java SE, Java SE     Embedded component of Oracle Java SE in the     Serviceability subcomponent could allow a low privileged     attacker with logon to the infrastructure where Java SE,     Java SE Embedded executes to compromise Java SE, Java SE     Embedded. (CVE-2018-3211)\n\n  - An unspecified vulnerability in the Java SE component of     Oracle Java SE in the Sound subcomponent could allow an     unauthenticated, remote attacker with network access via     multiple protocols to compromise Java SE.\n    (CVE-2018-3157)\n\n  - An unspecified vulnerability in the Java SE component of     Oracle Java SE in the Utility subcomponent could allow     an unauthenticated, remote attacker with network access     via multiple protocols to compromise Java SE.\n    (CVE-2018-3150)\n\nPlease consult the CVRF details for the applicable CVEs for additional information.\n\nNessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to Oracle JDK / JRE 11 Update 1, 8 Update 191 / 7 Update 201 / 6 Update 211 or later. If necessary, remove any affected versions.\n\nNote that an Extended Support contract with Oracle is needed to obtain JDK / JRE 6 Update 95 or later.",,,,"83"
"182","118916",,"KB4467691: Windows 10 Version 1607 and Windows Server 2016 November 2018 Security Update","The remote Windows host is missing security update 4467691.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists in     Microsoft JScript that could allow an attacker to bypass     Device Guard.  (CVE-2018-8417)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8552)\n\n  - A remote code execution vulnerability exists when     Windows Search handles objects in memory. An attacker     who successfully exploited this vulnerability could take     control of the affected system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2018-8450)\n\n  - A remote code execution vulnerability exists when     PowerShell improperly handles specially crafted files.\n    An attacker who successfully exploited this     vulnerability could execute malicious code on a     vulnerable system.  (CVE-2018-8256)\n\n  - A security feature bypass exists when Windows     incorrectly validates kernel driver signatures. An     attacker who successfully exploited this vulnerability     could bypass security features and load improperly     signed drivers into the kernel. In an attack scenario,     an attacker could bypass security features intended to     prevent improperly signed drivers from being loaded by     the kernel. The update addresses the vulnerability by     correcting how Windows validates kernel driver     signatures. (CVE-2018-8549)\n\n  - A tampering vulnerability exists in PowerShell that     could allow an attacker to execute unlogged code.\n    (CVE-2018-8415)\n\n  - A remote code execution vulnerability exists in the way     that Windows Deployment Services TFTP Server handles     objects in memory. An attacker who successfully     exploited the vulnerability could execute arbitrary code     with elevated permissions on a target system.\n    (CVE-2018-8476)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-8562)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8542, CVE-2018-8543,     CVE-2018-8555, CVE-2018-8556, CVE-2018-8557,     CVE-2018-8588)\n\n  - An elevation of privilege vulnerability exists in the     way that the Microsoft RemoteFX Virtual GPU miniport     driver handles objects in memory. An attacker who     successfully exploited the vulnerability could execute     code with elevated permissions.  (CVE-2018-8471)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2018-8584)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2018-8544)\n\n  - An elevation of privilege exists in Windows COM     Aggregate Marshaler. An attacker who successfully     exploited the vulnerability could run arbitrary code     with elevated privileges.  (CVE-2018-8550)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2018-8408)\n\n  - A spoofing vulnerability exists when Microsoft Edge     improperly handles specific HTML content. An attacker     who successfully exploited this vulnerability could     trick a user into believing that the user was on a     legitimate website. The specially crafted website could     either spoof content or serve as a pivot to chain an     attack with other vulnerabilities in web services.\n    (CVE-2018-8564)\n\n  - A cross-site-scripting (XSS) vulnerability exists when     an open source customization for Microsoft Active     Directory Federation Services (AD FS) does not properly     sanitize a specially crafted web request to an affected     AD FS server. An authenticated attacker could exploit     the vulnerability by sending a specially crafted request     to an affected AD FS server. The attacker who     successfully exploited the vulnerability could then     perform cross-site scripting attacks on affected systems     and run scripts in the security context of the current     user. The attacks could allow the attacker to read     content that the attacker is not authorized to read, use     the victim&apos;s identity to take actions on the AD FS site     on behalf of the user, such as change permissions and     delete content, and inject malicious content in the     browser of the user. The security update addresses the     vulnerability by helping to ensure that the open source     customization for AD FS properly sanitizes web requests.\n    (CVE-2018-8547)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft Graphics Components handle objects in     memory. An attacker who successfully exploited the     vulnerability could execute arbitrary code on a target     system.  (CVE-2018-8553)\n\n  - An information disclosure vulnerability exists when     &amp;quot;Kernel Remote Procedure Call Provider&amp;quot; driver     improperly initializes objects in memory.\n    (CVE-2018-8407)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8565)\n\n  - An elevation of privilege vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2018-8485, CVE-2018-8561)","Apply Cumulative Update KB4467691.",,,,"26"
"183","119239",,"Security Updates for Windows 10 / Windows Server 2016 (September 2018) (Spectre)","The remote Windows host is missing a security update. It is, therefore, missing microcode updates to address Spectre Variant 2 (CVE-2017-5715: Branch Target Injection) vulnerability.","Microsoft has released security updates for Windows 10 and Windows Server 2016.",,,,"130"
"184","119559",,"Oracle GlassFish Server 3.1.2.x &lt; 3.1.2.19 (October 2018 CPU)","According to its self-reported version, the Oracle GlassFish Server running on the remote host is 3.1.2.x prior to 3.1.2.19. Is is, therefore, affected by multiple vulnerabilities:\n\n  - A vulnerability could allow an Attacker with unauthenticated     network access to compromise Oracle GlassFish Server. A successful     attack would allow the access to critical data including     creation, deletion or modification on the remote server. This     attack requires human interaction. (CVE-2018-2911)\n  - An unauthenticated attacker with Network access can compromise     Oracle GlassFish Server. An attacker who successfully exploited     the vulnerability could cause a hang or a complete DOS of Oracle     GlassFish Server. (CVE-2018-3152)\n  - An unauthenticated attacker with network access could compromise     Oracle GlassFish Server. An attacker who successfully exploited     the vulnerability could have read access to Oracle GlassFish     Server information. (CVE-2018-3210)","Upgrade to Oracle GlassFish Server version 3.1.2.19 or later as referenced in the October 2018 Oracle Critical Patch Update advisory.",,,,"28"
"185","119584",,"KB4471321: Windows 10 Version 1607 and Windows Server 2016 December 2018 Security Update","The remote Windows host is missing security update 4471321.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when the     Microsoft .NET Framework fails to validate input     properly. An attacker who successfully exploited this     vulnerability could take control of an affected system.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights. Users whose accounts are configured to have     fewer user rights on the system could be less impacted     than users who operate with administrative user rights.\n    (CVE-2018-8540)\n\n  - A Denial Of Service vulnerability exists when Connected     User Experiences and Telemetry Service fails to validate     certain function values. An attacker who successfully     exploited this vulnerability could deny dependent     security feature functionality.  (CVE-2018-8612)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2018-8595, CVE-2018-8596)\n\n  - A remote code execution vulnerability exists in Windows     where Microsoft text-to-speech fails to properly handle     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2018-8634)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2018-8631)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2018-8639)\n\n  - An elevation of privilege vulnerability exists when the     Diagnostics Hub Standard Collector Service improperly     impersonates certain file operations. An attacker who     successfully exploited this vulnerability could gain     elevated privileges. An attacker with unprivileged     access to a vulnerable system could exploit this     vulnerability. The security update addresses the     vulnerability by ensuring the Diagnostics Hub Standard     Collector Service properly impersonates file operations.\n    (CVE-2018-8599)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2018-8477)\n\n  - An information disclosure vulnerability exists when     Remote Procedure Call runtime improperly initializes     objects in memory.  (CVE-2018-8514)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2018-8617, CVE-2018-8618,     CVE-2018-8624, CVE-2018-8629)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2018-8611)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2018-8625)\n\n  - A remote code execution vulnerability exists when the     Internet Explorer VBScript execution policy does not     properly restrict VBScript under specific conditions. An     attacker who exploited the vulnerability could run     arbitrary code with medium-integrity level privileges     (the permissions of the current user).  (CVE-2018-8619)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2018-8643)\n\n  - A denial of service vulnerability exists when .NET     Framework improperly handles special web requests. An     attacker who successfully exploited this vulnerability     could cause a denial of service against an .NET     Framework web application. The vulnerability can be     exploited remotely, without authentication. A remote     unauthenticated attacker could exploit this     vulnerability by issuing specially crafted requests to     the .NET Framework application. The update addresses the     vulnerability by correcting how the .NET Framework web     application handles web requests. (CVE-2018-8517)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Windows kernel-mode driver fails to     properly handle objects in memory. An attacker who     successfully exploited this vulnerability could run     arbitrary code in kernel mode. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2018-8641)\n\n  - A remote code execution vulnerability exists in Windows     Domain Name System (DNS) servers when they fail to     properly handle requests. An attacker who successfully     exploited the vulnerability could run arbitrary code in     the context of the Local System Account. Windows servers     that are configured as DNS servers are at risk from this     vulnerability.  (CVE-2018-8626)","Apply Cumulative Update KB4471321.",,,,"211"
"186","119612",,"Security Updates for Microsoft .NET Framework (December 2018)","The Microsoft .NET Framework installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when the     Microsoft .NET Framework fails to validate input     properly. An attacker who successfully exploited this     vulnerability could take control of an affected system.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights. Users whose accounts are configured to have     fewer user rights on the system could be less impacted     than users who operate with administrative user rights.\n    (CVE-2018-8540)\n\n  - A denial of service vulnerability exists when .NET     Framework improperly handles special web requests. An     attacker who successfully exploited this vulnerability     could cause a denial of service against an .NET     Framework web application. The vulnerability can be     exploited remotely, without authentication. A remote     unauthenticated attacker could exploit this     vulnerability by issuing specially crafted requests to     the .NET Framework application. The update addresses the     vulnerability by correcting how the .NET Framework web     application handles web requests. (CVE-2018-8517)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"187","119769",,"KB4483229: Windows 10 Version 1607 and Windows Server 2016 December 2018 OOB Security Update","The remote Windows host is missing security update 4483229.\nIt is, therefore, affected by a remote code execution vulnerability:\n\n  - A remote code execution vulnerability exists in the way that the     scripting engine handles objects in memory in Internet Explorer.\n    The vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of the     current user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the current     user. If the current user is logged on with administrative user     rights, an attacker who successfully exploited the vulnerability     could take control of an affected system. An attacker could then     install programs; view, change, or delete data; or create new     accounts with full user rights. (CVE-2018-8653)","Apply Cumulative Update KB4483229.",,,,"111"
"188","121012",,"KB4480961: Windows 10 Version 1607 and Windows Server 2016 January 2019 Security Update","The remote Windows host is missing security update 4480961. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0536, CVE-2019-0549, CVE-2019-0554)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0539, CVE-2019-0567)\n\n  - An information disclosure vulnerability exists in .NET     Framework and .NET Core which allows bypassing Cross-     origin Resource Sharing (CORS) configurations. An     attacker who successfully exploited the vulnerability     could retrieve content, that is normally restricted,     from a web application. The security update addresses     the vulnerability by enforcing CORS configuration to     prevent its bypass. (CVE-2019-0545)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0538, CVE-2019-0575, CVE-2019-0576,     CVE-2019-0577, CVE-2019-0578, CVE-2019-0579,     CVE-2019-0580, CVE-2019-0581, CVE-2019-0582,     CVE-2019-0583, CVE-2019-0584)\n\n  - An elevation of privilege vulnerability exists in the     Microsoft XmlDocument class that could allow an attacker     to escape from the AppContainer sandbox in the browser.\n    An attacker who successfully exploited this     vulnerability could gain elevated privileges and break     out of the Edge AppContainer sandbox. The vulnerability     by itself does not allow arbitrary code to run. However,     this vulnerability could be used in conjunction with one     or more vulnerabilities (for example a remote code     execution vulnerability and another elevation of     privilege vulnerability) to take advantage of the     elevated privileges when running. The security update     addresses the vulnerability by modifying how the     Microsoft XmlDocument class enforces sandboxing.\n    (CVE-2019-0555)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles authentication requests. An     attacker who successfully exploited this vulnerability     could run processes in an elevated context. An attacker     could exploit this vulnerability by running a specially     crafted application on the victim system. The update     addresses the vulnerability by correcting the way     Windows handles authentication requests. (CVE-2019-0543)\n\n  - An elevation of privilege vulnerability exists when the     Windows Runtime improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could run arbitrary code in an elevated context. An     attacker could exploit this vulnerability by running a     specially crafted application on the victim system. The     update addresses the vulnerability by correcting the way     the Windows Runtime handles objects in memory.\n    (CVE-2019-0570)\n\n  - A remote code execution vulnerability exists in the way     that the MSHTML engine inproperly validates input. An     attacker could execute arbitrary code in the context of     the current user.  (CVE-2019-0541)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2019-0551)\n\n  - An elevation of privilege exists in Windows COM Desktop     Broker. An attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-0552)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Edge Browser Broker COM object. An attacker     who successfully exploited the vulnerability could use     the Browser Broker COM object to elevate privileges on     an affected system. This vulnerability by itself does     not allow arbitrary code execution; however, it could     allow arbitrary code to be run if the attacker uses it     in combination with another vulnerability (such as a     remote code execution vulnerability or another elevation     of privilege vulnerability) that is capable of     leveraging the elevated privileges when code execution     is attempted. (CVE-2019-0566)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how the Windows kernel handles objects in     memory. (CVE-2019-0569)\n\n  - An elevation of privilege vulnerability exists when the     Windows Data Sharing Service improperly handles file     operations. An attacker who successfully exploited this     vulnerability could run processes in an elevated     context. An attacker could exploit this vulnerability by     running a specially crafted application on the victim     system. The update addresses the vulnerability by     correcting the way the Windows Data Sharing Service     handles file operations. (CVE-2019-0571, CVE-2019-0572,     CVE-2019-0573, CVE-2019-0574)","Apply Cumulative Update KB4480961.",,,,"86"
"189","121014",,"KB4480964: Windows 8.1 and Windows Server 2012 R2 January 2019 Security Update","The remote Windows host is missing security update 4480964 or cumulative update 4480963. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0536, CVE-2019-0549, CVE-2019-0554)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0538, CVE-2019-0575, CVE-2019-0576,     CVE-2019-0577, CVE-2019-0578, CVE-2019-0579,     CVE-2019-0580, CVE-2019-0581, CVE-2019-0582,     CVE-2019-0583, CVE-2019-0584)\n\n  - An information disclosure vulnerability exists in .NET     Framework and .NET Core which allows bypassing Cross-     origin Resource Sharing (CORS) configurations. An     attacker who successfully exploited the vulnerability     could retrieve content, that is normally restricted,     from a web application. The security update addresses     the vulnerability by enforcing CORS configuration to     prevent its bypass. (CVE-2019-0545)\n\n  - An elevation of privilege vulnerability exists in the     Microsoft XmlDocument class that could allow an attacker     to escape from the AppContainer sandbox in the browser.\n    An attacker who successfully exploited this     vulnerability could gain elevated privileges and break     out of the Edge AppContainer sandbox. The vulnerability     by itself does not allow arbitrary code to run. However,     this vulnerability could be used in conjunction with one     or more vulnerabilities (for example a remote code     execution vulnerability and another elevation of     privilege vulnerability) to take advantage of the     elevated privileges when running. The security update     addresses the vulnerability by modifying how the     Microsoft XmlDocument class enforces sandboxing.\n    (CVE-2019-0555)\n\n  - An elevation of privilege vulnerability exists when the     Windows Runtime improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could run arbitrary code in an elevated context. An     attacker could exploit this vulnerability by running a     specially crafted application on the victim system. The     update addresses the vulnerability by correcting the way     the Windows Runtime handles objects in memory.\n    (CVE-2019-0570)\n\n  - A remote code execution vulnerability exists in the way     that the MSHTML engine improperly validates input. An     attacker could execute arbitrary code in the context of     the current user.  (CVE-2019-0541)\n\n  - An elevation of privilege exists in Windows COM Desktop     Broker. An attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-0552)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles authentication requests. An     attacker who successfully exploited this vulnerability     could run processes in an elevated context. An attacker     could exploit this vulnerability by running a specially     crafted application on the victim system. The update     addresses the vulnerability by correcting the way     Windows handles authentication requests. (CVE-2019-0543)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how the Windows kernel handles objects in     memory. (CVE-2019-0569)","Apply Security Only update KB4480964 or Cumulative Update KB4480963.",,,,"56"
"190","121021",,"Security Updates for Microsoft .NET Framework (January 2019)","The Microsoft .NET Framework installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerability :\n\n  - An information disclosure vulnerability exists in .NET     Framework and .NET Core which allows bypassing Cross-     origin Resource Sharing (CORS) configurations. An     attacker who successfully exploited the vulnerability     could retrieve content, that is normally restricted,     from a web application. The security update addresses     the vulnerability by enforcing CORS configuration to     prevent its bypass. (CVE-2019-0545)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"191","121023",,"Security Updates for Internet Explorer (January 2019)","The Internet Explorer installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerability :\n\n  - A remote code execution vulnerability exists in the way     that the MSHTML engine inproperly validates input. An     attacker could execute arbitrary code in the context of     the current user.  (CVE-2019-0541)","Microsoft has released the following security updates to address this issue:  \n  -KB4480963\n  -KB4480968\n  -KB4480970\n  -KB4480965\n  -KB4480975",,,,"288"
"192","121035",,"Security Updates for Windows 10 / Windows Server 2016 (January 2019) (Spectre)","The remote Windows host is missing a security update. It is, therefore, missing microcode updates to address Spectre Variant 2 (CVE-2017-5715: Branch Target Injection) vulnerability.","Microsoft has released security updates for Windows 10 and Windows Server 2016.",,,,"130"
"193","121231",,"Oracle Java SE 1.7.x &lt; 1.7.0_211 / 1.8.x &lt; 1.8.0_201 / 1.11.x &lt; 1.11.0_2 Multiple Vulnerabilities (January 2019 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 7 Update 211, 8 Update 201, 11 Update 2. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - An issue in libjpeg 9a, a divide-by-zero error, could     allow remote attackers to cause a denial of service     condition via a crafted file. (CVE-2018-11212)\n\n  - An unspecified vulnerability in Oracle Java SE in the     Networking subcomponent could allow an unauthenticated,     remote attacker with network access via multiple     protocols to compromise Java SE.\n    (CVE-2019-2426)\n\n  - An unspecified vulnerability in Oracle Java SE in the     Deployment subcomponent could allow an unauthenticated,     remote attacker with network access via multiple     protocols to compromise Java SE.\n    (CVE-2019-2449)\n\n  - An unspecified vulnerability in Oracle Java SE in the     Libraries subcomponent could allow an unauthenticated,     remote attacker with network access via multiple     protocols to compromise Java SE.\n    (CVE-2019-2422)\n\nNessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to Oracle JDK / JRE 11 Update 2, 8 Update 201 / 7 Update 211 or later. If necessary, remove any affected versions.",,,,"281"
"194","121544",,"LibreOffice 6.1.x &lt; 6.1.3.2 Arbitrary Code Execution","The version of LibreOffice installed on the remote Windows host is 6.1.x prior to 6.1.3.2. It is, therefore, affected by an an arbitrary code execution vulnerability as a result of a path traversal vulnerability allowing the ability to run any local python script, in addition to being able to pass user defined parameters to default python modules and functions included with libreoffice.\n\nNote that Nessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to LibreOffice version 6.1.3.2 or later.",,,,"101"
"195","122120",,"KB4487028: Windows 8.1 and Windows Server 2012 R2 February 2019 Security Update","The remote Windows host is missing security update 4487028 or cumulative update 4487000. It is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-0656)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0623)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-0635)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0602, CVE-2019-0615, CVE-2019-0616,     CVE-2019-0619, CVE-2019-0660, CVE-2019-0664)\n\n  - An information disclosure vulnerability exists when the     Human Interface Devices (HID) component improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could obtain information to     further compromise the victims system.  (CVE-2019-0600,     CVE-2019-0601)\n\n  - A remote code execution vulnerability exists in .NET     Framework and Visual Studio software when the software     fails to check the source markup of a file. An attacker     who successfully exploited the vulnerability could run     arbitrary code in the context of the current user. If     the current user is logged on with administrative user     rights, an attacker could take control of the affected     system. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2019-0613)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0621)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0628)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited this     vulnerability could test for the presence of files on     disk. For an attack to be successful, an attacker must     persuade a user to open a malicious website. The     security update addresses the vulnerability by changing     the way Internet Explorer handles objects in memory.\n    (CVE-2019-0676)\n\n  - A vulnerability exists in certain .Net Framework API&apos;s     and Visual Studio in the way they parse URL&apos;s. An     attacker who successfully exploited this vulnerability     could use it to bypass security logic intended to ensure     that a user-provided URL belonged to a specific hostname     or a subdomain of that hostname. This could be used to     cause privileged communication to be made to an     untrusted service as if it was a trusted service.\n    (CVE-2019-0657)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0606)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-0618,     CVE-2019-0662)\n\n  - An information vulnerability exists when Windows     improperly discloses file information. Successful     exploitation of the vulnerability could allow the     attacker to read the contents of files on disk.\n    (CVE-2019-0636)\n\n  - A spoofing vulnerability exists when Microsoft browsers     improperly handles specific redirects. An attacker who     successfully exploited this vulnerability could trick a     user into believing that the user was on a legitimate     website. The specially crafted website could either     spoof content or serve as a pivot to chain an attack     with other vulnerabilities in web services.\n    (CVE-2019-0654)\n\n  - A remote code execution vulnerability exists in the way     that the Microsoft Server Message Block 2.0 (SMBv2)     server handles certain requests. An attacker who     successfully exploited the vulnerability could gain the     ability to execute code on the target server.\n    (CVE-2019-0630, CVE-2019-0633)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when an attacker sends specially     crafted packets to a DHCP server. An attacker who     successfully exploited the vulnerability could run     arbitrary code on the DHCP server.  (CVE-2019-0626)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0595, CVE-2019-0596, CVE-2019-0597,     CVE-2019-0598, CVE-2019-0599, CVE-2019-0625)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    To exploit this vulnerability, an authenticated attacker     could run a specially crafted application. An attacker who     successfully exploited this vulnerability could obtain     information to further compromise the user&apos;s system.\n    (CVE-2019-0663)","Apply Security Only update KB4487028 or Cumulative Update KB4487000.",,,,"124"
"196","122126",,"KB4487026: Windows 10 Version 1607 and Windows Server 2016 February 2019 Security Update","The remote Windows host is missing security update 4487026. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information vulnerability exists when Windows     improperly discloses file information. Successful     exploitation of the vulnerability could allow the     attacker to read the contents of files on disk.\n    (CVE-2019-0636)\n\n  - A remote code execution vulnerability exists when     Microsoft Edge improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that enables an attacker to execute arbitrary code in     the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0645)\n\n  - An elevation of privilege vulnerability exists when the     Storage Service improperly handles file operations. An     attacker who successfully exploited this vulnerability     could gain elevated privileges on the victim system.\n    (CVE-2019-0659)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0590,     CVE-2019-0591, CVE-2019-0593, CVE-2019-0605,     CVE-2019-0642, CVE-2019-0644, CVE-2019-0651,     CVE-2019-0652, CVE-2019-0655)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0623)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-0635)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0621)\n\n  - An information disclosure vulnerability exists when the     Human Interface Devices (HID) component improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could obtain information to     further compromise the victims system.  (CVE-2019-0600,     CVE-2019-0601)\n\n  - A remote code execution vulnerability exists in .NET     Framework and Visual Studio software when the software     fails to check the source markup of a file. An attacker     who successfully exploited the vulnerability could run     arbitrary code in the context of the current user. If     the current user is logged on with administrative user     rights, an attacker could take control of the affected     system. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2019-0613)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0602, CVE-2019-0615, CVE-2019-0616,     CVE-2019-0619, CVE-2019-0660)\n\n  - A security feature bypass vulnerability exists in     Windows which could allow an attacker to bypass Device     Guard. An attacker who successfully exploited this     vulnerability could circumvent a User Mode Code     Integrity (UMCI) policy on the machine.  (CVE-2019-0627,     CVE-2019-0631, CVE-2019-0632)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0628)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited this     vulnerability could test for the presence of files on     disk. For an attack to be successful, an attacker must     persuade a user to open a malicious website. The     security update addresses the vulnerability by changing     the way Internet Explorer handles objects in memory.\n    (CVE-2019-0676)\n\n  - A vulnerability exists in certain .Net Framework API&apos;s     and Visual Studio in the way they parse URL&apos;s. An     attacker who successfully exploited this vulnerability     could use it to bypass security logic intended to ensure     that a user-provided URL belonged to a specific hostname     or a subdomain of that hostname. This could be used to     cause privileged communication to be made to an     untrusted service as if it was a trusted service.\n    (CVE-2019-0657)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0606)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-0618,     CVE-2019-0662)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-0656)\n\n  - A spoofing vulnerability exists when Microsoft browsers     improperly handles specific redirects. An attacker who     successfully exploited this vulnerability could trick a     user into believing that the user was on a legitimate     website. The specially crafted website could either     spoof content or serve as a pivot to chain an attack     with other vulnerabilities in web services.\n    (CVE-2019-0654)\n\n  - A remote code execution vulnerability exists in the way     that the Microsoft Server Message Block 2.0 (SMBv2)     server handles certain requests. An attacker who     successfully exploited the vulnerability could gain the     ability to execute code on the target server.\n    (CVE-2019-0630, CVE-2019-0633)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when an attacker sends specially     crafted packets to a DHCP server. An attacker who     successfully exploited the vulnerability could run     arbitrary code on the DHCP server.  (CVE-2019-0626)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0595, CVE-2019-0596, CVE-2019-0597,     CVE-2019-0598, CVE-2019-0599, CVE-2019-0625)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    To exploit this vulnerability, an authenticated attacker     could run a specially crafted application. An attacker who     successfully exploited this vulnerability could obtain     information to further compromise the user&apos;s system.\n    (CVE-2019-0663)","Apply Cumulative Update KB4487026.",,,,"294"
"197","122131",,"Security Updates for Internet Explorer (February 2019)","The Internet Explorer installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Internet Explorer accesses objects in memory. The     vulnerability could corrupt memory in such a way that     an attacker could execute arbitrary code in the context     of the current user. (CVE-2019-0606)\n\n  - A spoofing vulnerability exists when Microsoft browsers     improperly handles specific redirects. An attacker who     successfully exploited this vulnerability could trick a     user into believing that the user was on a legitimate     website. (CVE-2019-0654)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited this vulnerability     could test for the presence of files on disk. For an     attack to be successful, an attacker must persuade a user     to open a malicious website. (CVE-2019-0676)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    To exploit this vulnerability, an authenticated attacker     could run a specially crafted application. An attacker who     successfully exploited this vulnerability could obtain     information to further compromise the user&apos;s system.     (CVE-2019-0663)","Microsoft has released the following security updates to address this issue:  \n  -KB4487000\n  -KB4487023\n  -KB4486563\n  -KB4486474\n  -KB4487025",,,,"149"
"198","122234",,"Security Updates for Microsoft .NET Framework (February 2019)","The Microsoft .NET Framework installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in .NET     Framework and Visual Studio software when the software     fails to check the source markup of a file. An attacker     who successfully exploited the vulnerability could run     arbitrary code in the context of the current user. If     the current user is logged on with administrative user     rights, an attacker could take control of the affected     system. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2019-0613)\n\n  - A vulnerability exists in certain .Net Framework API&apos;s     and Visual Studio in the way they parse URL&apos;s. An     attacker who successfully exploited this vulnerability     could use it to bypass security logic intended to ensure     that a user-provided URL belonged to a specific hostname     or a subdomain of that hostname. This could be used to     cause privileged communication to be made to an     untrusted service as if it was a trusted service.\n    (CVE-2019-0657)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    To exploit this vulnerability, an authenticated attacker     could run a specially crafted application. An attacker who     successfully exploited this vulnerability could obtain     information to further compromise the user&apos;s system.\n    (CVE-2019-0663)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"199","122784",,"KB4489883: Windows 8.1 and Windows Server 2012 R2 March 2019 Security Update","The remote Windows host is missing security update 4489883 or cumulative update 4489881. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0617)\n\n  - A security feature bypass vulnerability exists when     Internet Explorer fails to validate the correct Security     Zone of requests for specific URLs. This could allow an     attacker to cause a user to access a URL in a less     restricted Internet Security Zone than intended.\n    (CVE-2019-0761)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0780)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0609)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0702, CVE-2019-0755, CVE-2019-0775)\n\n  - An information disclosure vulnerability exists in the     way that the Windows SMB Server handles certain     requests. An authenticated attacker who successfully     exploited this vulnerability could craft a special     packet, which could lead to information disclosure from     the server.  (CVE-2019-0703, CVE-2019-0704,     CVE-2019-0821)\n\n  - An information disclosure vulnerability exists when the     Windows Print Spooler does not properly handle objects     in memory. An attacker who successfully exploited this     vulnerability could use the information to further     exploit the victim system.  (CVE-2019-0759)\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0782)\n\n  - A security feature bypass vulnerability exists when     Microsoft browsers improperly handle requests of     different origins. The vulnerability allows Microsoft     browsers to bypass Same-Site cookie restrictions, and to     allow requests that should otherwise be ignored. An     attacker who successfully exploited the vulnerability     could force the browser to send data that would     otherwise be restricted.  (CVE-2019-0762)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2019-0690)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0797)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-0754)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0680, CVE-2019-0783)\n\n  - A remote code execution vulnerability exists in the way     that the ActiveX Data objects (ADO) handles objects in     memory. The vulnerability could corrupt memory in such a     way that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0784)\n\n  - A remote code execution vulnerability exists in the way     that Windows Deployment Services TFTP Server handles     objects in memory. An attacker who successfully     exploited the vulnerability could execute arbitrary code     with elevated permissions on a target system.\n    (CVE-2019-0603)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0614, CVE-2019-0774)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2019-0767)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0763)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0746)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-0756)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0665, CVE-2019-0666,     CVE-2019-0667, CVE-2019-0772)\n\n  - A remote code execution vulnerability exists in the way     that comctl32.dll handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0765)","Apply Security Only update KB4489883 or Cumulative Update KB4489881.",,,,"161"
"200","122785",,"KB4489882: Windows 10 Version 1607 and Windows Server 2016 March 2019 Security Update","The remote Windows host is missing security update 4489882.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0782)\n\n  - A remote code execution vulnerability exists when     Microsoft Edge improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that enables an attacker to execute arbitrary code in     the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0779)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0780)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0609)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0702, CVE-2019-0755, CVE-2019-0775)\n\n  - An information disclosure vulnerability exists in the     way that the Windows SMB Server handles certain     requests. An authenticated attacker who successfully     exploited this vulnerability could craft a special     packet, which could lead to information disclosure from     the server.  (CVE-2019-0703, CVE-2019-0704,     CVE-2019-0821)\n\n  - An information disclosure vulnerability exists when the     Windows Print Spooler does not properly handle objects     in memory. An attacker who successfully exploited this     vulnerability could use the information to further     exploit the victim system.  (CVE-2019-0759)\n\n  - An elevation of privilege vulnerability exists when     Microsoft Edge does not properly enforce cross-domain     policies, which could allow an attacker to access     information from one domain and inject it into another     domain.  (CVE-2019-0678)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0617)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2019-0690)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0797)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-0754)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0769,     CVE-2019-0770, CVE-2019-0771, CVE-2019-0773)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-0695)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0680, CVE-2019-0783)\n\n  - A remote code execution vulnerability exists in the way     that the ActiveX Data objects (ADO) handles objects in     memory. The vulnerability could corrupt memory in such a     way that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0784)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0776)\n\n  - An elevation of privilege vulnerability exists in     Windows AppX Deployment Server that allows file creation     in arbitrary locations.  (CVE-2019-0766)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-0696)\n\n  - A remote code execution vulnerability exists in the way     that Windows Deployment Services TFTP Server handles     objects in memory. An attacker who successfully     exploited the vulnerability could execute arbitrary code     with elevated permissions on a target system.\n    (CVE-2019-0603)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0614, CVE-2019-0774)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2019-0767)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0763)\n\n  - A security feature bypass vulnerability exists when     Internet Explorer fails to validate the correct Security     Zone of requests for specific URLs. This could allow an     attacker to cause a user to access a URL in a less     restricted Internet Security Zone than intended.\n    (CVE-2019-0761)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0746)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-0756)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0665, CVE-2019-0666,     CVE-2019-0667, CVE-2019-0772)\n\n  - A remote code execution vulnerability exists in the way     that comctl32.dll handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0765)","Apply Cumulative Update KB4489882.",,,,"283"
"201","122789",,"Security Updates for Internet Explorer (March 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0746)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0763)\n\n  - A security feature bypass vulnerability exists when     Internet Explorer fails to validate the correct Security     Zone of requests for specific URLs. This could allow an     attacker to cause a user to access a URL in a less     restricted Internet Security Zone than intended.\n    (CVE-2019-0761)\n\n  - A security feature bypass vulnerability exists when     Microsoft browsers improperly handle requests of     different origins. The vulnerability allows Microsoft     browsers to bypass Same-Site cookie restrictions, and to     allow requests that should otherwise be ignored. An     attacker who successfully exploited the vulnerability     could force the browser to send data that would     otherwise be restricted.  (CVE-2019-0762)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0680, CVE-2019-0783)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0780)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0609)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0665, CVE-2019-0666,     CVE-2019-0667)","Microsoft has released the following security updates to address this issue:  \n  -KB4489881\n  -KB4489880\n  -KB4489873\n  -KB4489891\n  -KB4489878",,,,"178"
"202","123940",,"KB4493467: Windows 8.1 and Windows Server 2012 R2 April 2019 Security Update","The remote Windows host is missing security update 4493467 or cumulative update 4493446. It is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists in     Windows which could allow an attacker to bypass Device     Guard when Windows improperly handles calls to the LUAFV     driver (luafv.sys). An attacker who successfully     exploited this vulnerability could circumvent a User     Mode Code Integrity (UMCI) policy on the machine.\n    (CVE-2019-0732)\n\n  - An information disclosure vulnerability exists when the     Terminal Services component improperly discloses the     contents of its memory. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise a users system.  (CVE-2019-0839)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0842)\n\n  - A remote code execution vulnerability exists when     Windows improperly handles objects in memory. An     attacker who successfully exploited these     vulnerabilities could take control of an affected     system.  (CVE-2019-0856)\n\n  - An information disclosure vulnerability exists when the     Windows TCP/IP stack improperly handles fragmented IP     packets. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0688)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-0790,     CVE-2019-0791, CVE-2019-0792, CVE-2019-0793,     CVE-2019-0795)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0803, CVE-2019-0859)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0752, CVE-2019-0753, CVE-2019-0862)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0846, CVE-2019-0847, CVE-2019-0851,     CVE-2019-0877, CVE-2019-0879)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to the LUAFV driver     (luafv.sys). An attacker who successfully exploited this     vulnerability could run arbitrary code in the security     context of the local system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-0730, CVE-2019-0731, CVE-2019-0805,     CVE-2019-0836)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0802, CVE-2019-0849)\n\n  - An information disclosure vulnerability exists when     Windows Task Scheduler improperly discloses credentials     to Windows Credential Manager. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights.  (CVE-2019-0838)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0835)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to the LUAFV driver     (luafv.sys). An attacker who successfully exploited this     vulnerability could set the short name of a file with a     long name to an arbitrary short name, overriding the     file system with limited privileges.  (CVE-2019-0796)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0848)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0844)\n\n  - An elevation of privilege vulnerability exists when the     Windows Client Server Run-Time Subsystem (CSRSS) fails     to properly handle objects in memory. An attacker who     successfully exploited this vulnerability could run     arbitrary code. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0735)\n\n  - A remote code execution vulnerability exists when OLE     automation improperly handles objects in memory. An     attacker who successfully exploited the vulnerability     could gain execution on the victim system.\n    (CVE-2019-0794)\n\n  - A remote code execution vulnerability exists when the     IOleCvt interface renders ASP webpage content. An     attacker who successfully exploited the vulnerability     could run malicious code remotely to take control of the     users system.  (CVE-2019-0845)\n\n  - A tampering vulnerability exists when Microsoft browsers     do not properly validate input under specific     conditions. An attacker who exploited the vulnerability     could pass custom command line parameters.\n    (CVE-2019-0764)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-0853)","Apply Security Only update KB4493467 or Cumulative Update KB4493446.",,,,"25"
"203","123943",,"KB4493470: Windows 10 Version 1607 and Windows Server 2016 April 2019 Security Update","The remote Windows host is missing security update 4493470.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists in     Windows which could allow an attacker to bypass Device     Guard when Windows improperly handles calls to the LUAFV     driver (luafv.sys). An attacker who successfully     exploited this vulnerability could circumvent a User     Mode Code Integrity (UMCI) policy on the machine.\n    (CVE-2019-0732)\n\n  - An information disclosure vulnerability exists when the     Terminal Services component improperly discloses the     contents of its memory. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise a users system.  (CVE-2019-0839)\n\n  - An information disclosure vulnerability exists when the     Windows TCP/IP stack improperly handles fragmented IP     packets. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0688)\n\n  - A tampering vulnerability exists when Microsoft browsers     do not properly validate input under specific     conditions. An attacker who exploited the vulnerability     could pass custom command line parameters.\n    (CVE-2019-0764)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to the LUAFV driver     (luafv.sys). An attacker who successfully exploited this     vulnerability could run arbitrary code in the security     context of the local system. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-0730, CVE-2019-0731, CVE-2019-0805,     CVE-2019-0836)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0752, CVE-2019-0753, CVE-2019-0862)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0844)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0802, CVE-2019-0849)\n\n  - A remote code execution vulnerability exists when OLE     automation improperly handles objects in memory. An     attacker who successfully exploited the vulnerability     could gain execution on the victim system.\n    (CVE-2019-0794)\n\n  - A remote code execution vulnerability exists when the     IOleCvt interface renders ASP webpage content. An     attacker who successfully exploited the vulnerability     could run malicious code remotely to take control of the     users system.  (CVE-2019-0845)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-0853)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-0842)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Microsoft Edge. The vulnerability could corrupt memory     in such a way that an attacker could execute arbitrary     code in the context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0739)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0846, CVE-2019-0847, CVE-2019-0851,     CVE-2019-0877, CVE-2019-0879)\n\n  - An elevation of privilege vulnerability exists when the     Windows Client Server Run-Time Subsystem (CSRSS) fails     to properly handle objects in memory. An attacker who     successfully exploited this vulnerability could run     arbitrary code. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0735)\n\n  - An information disclosure vulnerability exists when     Windows Task Scheduler improperly discloses credentials     to Windows Credential Manager. An attacker who     successfully exploited the vulnerability could obtain     information to further compromise the users system. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights.  (CVE-2019-0838)\n\n  - A remote code execution vulnerability exists when     Windows improperly handles objects in memory. An     attacker who successfully exploited these     vulnerabilities could take control of an affected     system.  (CVE-2019-0856)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0814, CVE-2019-0848)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-0685, CVE-2019-0803,     CVE-2019-0859)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-0790,     CVE-2019-0791, CVE-2019-0792, CVE-2019-0793,     CVE-2019-0795)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0806, CVE-2019-0810,     CVE-2019-0812, CVE-2019-0829, CVE-2019-0860,     CVE-2019-0861)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0835)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to the LUAFV driver     (luafv.sys). An attacker who successfully exploited this     vulnerability could set the short name of a file with a     long name to an arbitrary short name, overriding the     file system with limited privileges.  (CVE-2019-0796)","Apply Cumulative Update KB4493470.",,,,"185"
"204","123951",,"Security Updates for Internet Explorer (April 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0752, CVE-2019-0753, CVE-2019-0862)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-0835)\n\n  - A tampering vulnerability exists when Microsoft browsers     do not properly validate input under specific     conditions. An attacker who exploited the vulnerability     could pass custom command line parameters.\n    (CVE-2019-0764)","Microsoft has released the following security updates to address this issue:  \n  -KB4493446\n  -KB4493471\n  -KB4493472\n  -KB4493451\n  -KB4493435",,,,"280"
"205","124198",,"Oracle Java SE 1.7.0_221 / 1.8.0_211 / 1.11.0_3 / 1.12.0_1 Multiple Vulnerabilities (Apr 2019 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 7 Update 221, 8 Update 211, 11 Update 3, or 12 Update 1. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - 2D\n  - Libraries\n  - RMI\n  - Windows DLL\n\nNessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to Oracle JDK / JRE 12 Update 1 , 11 Update 3, 8 Update 211 / 7 Update 221 or later. If necessary, remove any affected versions.",,,,"53"
"206","124567",,"IBM MQ 9.1.0.x LTS &lt; 9.1.0.2 LTS / 9.1.1 CD Console Weak Cryptography Man in the Middle Vulnerability (CVE-2018-1925)","According to its self-reported version, the IBM MQ server installed on the remote host is 9.1.0.x LTS &lt; 9.1.0.2 LTS, or 9.1.1 CD and is therefore affected by an unspecified man in the middle vulnerability in the IBM MQ Console due to weaker than expected cryptographic algorithms.","Upgrade to IBM MQ 9.1.2 CD or IBM MQ 9.1.0.2 LTS as per the vendor advisory.",,,,"141"
"207","125058",,"KB4494440: Windows 10 Version 1607 and Windows Server 2016 May 2019 Security Update (MDSUM/RIDL) (MFBDS/RIDL/ZombieLoad) (MLPDS/RIDL) (MSBDS/Fallout)","The remote Windows host is missing security update 4494440. It is, therefore, affected by multiple vulnerabilities :\n\n  - A new subclass of speculative execution side channel vulnerabilities,     known as Microarchitectural Data Sampling, exist in Windows.\n    An attacker who successfully exploited these vulnerabilities     may be able to read privileged data across trust boundaries.     In shared resource environments (such as exists in some cloud     services configurations), these vulnerabilities could allow     one virtual machine to improperly access information from     another. In non-browsing scenarios on standalone systems, an     attacker would need prior access to the system or an ability     to run a specially crafted application on the target system     to leverage these vulnerabilities.\n    (CVE-2018-12126, CVE-2018-12127, CVE-2018-12130, CVE-2019-11091)\n\n  - A security feature bypass vulnerability exists when     urlmon.dll improperly handles certain Mark of the Web     queries. The vulnerability allows Internet Explorer to     bypass Mark of the Web warnings or restrictions for     files downloaded or created in a specific way.\n    (CVE-2019-0995)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0940)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0889, CVE-2019-0890, CVE-2019-0891,     CVE-2019-0893, CVE-2019-0894, CVE-2019-0895,     CVE-2019-0896, CVE-2019-0897, CVE-2019-0898,     CVE-2019-0899, CVE-2019-0900, CVE-2019-0901,     CVE-2019-0902)\n\n  - An elevation of privilege vulnerability exists when the     Windows Kernel improperly handles key enumeration. An     attacker who successfully exploited the vulnerability     could gain elevated privileges on a targeted system. A     locally authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The security update addresses the     vulnerability by helping to ensure that the Windows     Kernel properly handles key enumeration. (CVE-2019-0881)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-0903)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-0886)\n\n  - An elevation of privilege vulnerability exists in the     Unified Write Filter (UWF) feature for Windows 10 when     it improperly restricts access to the registry. An     attacker who successfully exploited the vulnerability     could make changes to the registry keys protected by UWF     without having administrator privileges.\n    (CVE-2019-0942)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0912, CVE-2019-0913,     CVE-2019-0914, CVE-2019-0915, CVE-2019-0916,     CVE-2019-0917, CVE-2019-0922, CVE-2019-0923,     CVE-2019-0924, CVE-2019-0925, CVE-2019-0927,     CVE-2019-0933)\n\n  - A security feature bypass vulnerability exists in     Windows Defender Application Control (WDAC) which could     allow an attacker to bypass WDAC enforcement. An     attacker who successfully exploited this vulnerability     could circumvent Windows PowerShell Constrained Language     Mode on the machine.  (CVE-2019-0733)\n\n  - An spoofing vulnerability exists when Internet Explorer     improperly handles URLs. An attacker who successfully     exploited this vulnerability could trick a user by     redirecting the user to a specially crafted website. The     specially crafted website could either spoof content or     serve as a pivot to chain an attack with other     vulnerabilities in web services.  (CVE-2019-0921)\n\n  - An elevation of privilege vulnerability exists when the     Diagnostics Hub Standard Collector or the Visual Studio     Standard Collector allows file deletion in arbitrary     locations.  (CVE-2019-0727)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows when a man-in-the-middle attacker is     able to successfully decode and replace authentication     request using Kerberos, allowing an attacker to be     validated as an Administrator. The update addresses this     vulnerability by changing how these requests are     validated. (CVE-2019-0734)\n\n  - A remote code execution vulnerability exists when     Microsoft Windows OLE fails to properly validate user     input. An attacker could exploit the vulnerability to     execute malicious code.  (CVE-2019-0885)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0884, CVE-2019-0911, CVE-2019-0918)\n\n  - An elevation of privilege vulnerability exists in the     way Windows Error Reporting (WER) handles files. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with administrator     privileges.  (CVE-2019-0863)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0930)\n\n  - A denial of service vulnerability exists when .NET     Framework and .NET Core improperly process RegEx     strings. An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET application. A remote unauthenticated attacker     could exploit this vulnerability by issuing specially     crafted requests to a .NET Framework (or .NET core)     application. The update addresses the vulnerability by     correcting how .NET Framework and .NET Core applications     handle RegEx string processing. (CVE-2019-0820)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows when Windows fails to properly handle     certain symbolic links. An attacker who successfully     exploited this vulnerability could potentially set     certain items to run at a higher level and thereby     elevate permissions.  (CVE-2019-0936)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when processing specially crafted     packets. An attacker who successfully exploited the     vulnerability could run arbitrary code on the DHCP     server.  (CVE-2019-0725)\n\n  - A denial of service vulnerability exists when .NET     Framework improperly handles objects in heap memory. An     attacker who successfully exploited this vulnerability     could cause a denial of service against a .NET     application.  (CVE-2019-0864)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0758, CVE-2019-0882, CVE-2019-0961)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Edge that could allow an attacker to escape     from the AppContainer sandbox in the browser. An     attacker who successfully exploited this vulnerability     could gain elevated privileges and break out of the Edge     AppContainer sandbox. The vulnerability by itself does     not allow arbitrary code to run. However, this     vulnerability could be used in conjunction with one or     more vulnerabilities (for example a remote code     execution vulnerability and another elevation of     privilege vulnerability) to take advantage of the     elevated privileges when running. The security update     addresses the vulnerability by modifying how Microsoft     Edge handles sandboxing. (CVE-2019-0938)\n\n  - An elevation of privilege vulnerability exists in the     Network Driver Interface Specification (NDIS) when     ndis.sys fails to check the length of a buffer prior to     copying memory to it.  (CVE-2019-0707)\n\n  - A denial of service vulnerability exists when .NET     Framework or .NET Core improperly handle web requests.\n    An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET Framework or .NET Core web application. The     vulnerability can be exploited remotely, without     authentication. A remote unauthenticated attacker could     exploit this vulnerability by issuing specially crafted     requests to the .NET Framework or .NET Core application.\n    The update addresses the vulnerability by correcting how     .NET Framework or .NET Core web applications handles web     requests. (CVE-2019-0980, CVE-2019-0981)","Apply Cumulative Update KB4494440.",,,,"121"
"208","125061",,"KB4499165: Windows 8.1 and Windows Server 2012 R2 May 2019 Security Update (MDSUM/RIDL) (MFBDS/RIDL/ZombieLoad) (MLPDS/RIDL) (MSBDS/Fallout)","The remote Windows host is missing security update 4499165 or cumulative update 4499151. It is, therefore, affected by multiple vulnerabilities :\n\n  - A new subclass of speculative execution side channel vulnerabilities,     known as Microarchitectural Data Sampling, exist in Windows.\n    An attacker who successfully exploited these vulnerabilities     may be able to read privileged data across trust boundaries.     In shared resource environments (such as exists in some cloud     services configurations), these vulnerabilities could allow     one virtual machine to improperly access information from     another. In non-browsing scenarios on standalone systems, an     attacker would need prior access to the system or an ability     to run a specially crafted application on the target system     to leverage these vulnerabilities.\n    (CVE-2018-12126, CVE-2018-12127, CVE-2018-12130, CVE-2019-11091)\n\n  - A denial of service vulnerability exists when .NET     Framework and .NET Core improperly process RegEx     strings. An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET application. A remote unauthenticated attacker     could exploit this vulnerability by issuing specially     crafted requests to a .NET Framework (or .NET core)     application. The update addresses the vulnerability by     correcting how .NET Framework and .NET Core applications     handle RegEx string processing. (CVE-2019-0820)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0940)\n\n  - A remote code execution vulnerability exists when     Microsoft Windows OLE fails to properly validate user     input. An attacker could exploit the vulnerability to     execute malicious code.  (CVE-2019-0885)\n\n  - An elevation of privilege vulnerability exists when the     Windows Kernel improperly handles key enumeration. An     attacker who successfully exploited the vulnerability     could gain elevated privileges on a targeted system. A     locally authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The security update addresses the     vulnerability by helping to ensure that the Windows     Kernel properly handles key enumeration. (CVE-2019-0881)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows when Windows fails to properly handle     certain symbolic links. An attacker who successfully     exploited this vulnerability could potentially set     certain items to run at a higher level and thereby     elevate permissions.  (CVE-2019-0936)\n\n  - An spoofing vulnerability exists when Internet Explorer     improperly handles URLs. An attacker who successfully     exploited this vulnerability could trick a user by     redirecting the user to a specially crafted website. The     specially crafted website could either spoof content or     serve as a pivot to chain an attack with other     vulnerabilities in web services.  (CVE-2019-0921)\n\n  - An elevation of privilege vulnerability exists in the     Network Driver Interface Specification (NDIS) when     ndis.sys fails to check the length of a buffer prior to     copying memory to it.  (CVE-2019-0707)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0884, CVE-2019-0911, CVE-2019-0918)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0889, CVE-2019-0890, CVE-2019-0891,     CVE-2019-0893, CVE-2019-0894, CVE-2019-0895,     CVE-2019-0896, CVE-2019-0897, CVE-2019-0898,     CVE-2019-0899, CVE-2019-0900, CVE-2019-0901,     CVE-2019-0902)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when processing specially crafted     packets. An attacker who successfully exploited the     vulnerability could run arbitrary code on the DHCP     server.  (CVE-2019-0725)\n\n  - A denial of service vulnerability exists when .NET     Framework improperly handles objects in heap memory. An     attacker who successfully exploited this vulnerability     could cause a denial of service against a .NET     application.  (CVE-2019-0864)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-0758, CVE-2019-0882, CVE-2019-0961)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0930)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows when a man-in-the-middle attacker is     able to successfully decode and replace authentication     request using Kerberos, allowing an attacker to be     validated as an Administrator. The update addresses this     vulnerability by changing how these requests are     validated. (CVE-2019-0734)\n\n  - An elevation of privilege vulnerability exists in the     way Windows Error Reporting (WER) handles files. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with administrator     privileges.  (CVE-2019-0863)\n\n  - A denial of service vulnerability exists when .NET     Framework or .NET Core improperly handle web requests.\n    An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET Framework or .NET Core web application. The     vulnerability can be exploited remotely, without     authentication. A remote unauthenticated attacker could     exploit this vulnerability by issuing specially crafted     requests to the .NET Framework or .NET Core application.\n    The update addresses the vulnerability by correcting how     .NET Framework or .NET Core web applications handles web     requests. (CVE-2019-0980, CVE-2019-0981)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-0903)","Apply Security Only update KB4499165 or Cumulative Update KB4499151.",,,,"14"
"209","125069",,"Security Updates for Internet Explorer (May 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - An spoofing vulnerability exists when Internet Explorer     improperly handles URLs. An attacker who successfully     exploited this vulnerability could trick a user by     redirecting the user to a specially crafted website. The     specially crafted website could either spoof content or     serve as a pivot to chain an attack with other     vulnerabilities in web services.  (CVE-2019-0921)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-0940)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0884, CVE-2019-0911, CVE-2019-0918)\n\n  - An information disclosure vulnerability exists when     Internet Explorer improperly handles objects in memory.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-0930)","Microsoft has released the following security updates to address this issue:  \n  -KB4498206\n  -KB4499149\n  -KB4499151\n  -KB4499164\n  -KB4499171",,,,"18"
"210","125070",,"Security Updates for Microsoft SQL Server (May 2019)","The Microsoft SQL Server installation on the remote host is missing a security update. It is, therefore, affected by an information disclosure vulnerability that exists in Microsoft SQL Server Analysis Services when it improperly enforces metadata permissions. An attacker who successfully exploited the vulnerability could query tables or columns for which they do not have access rights.","Microsoft has released the following security updates to address this issue:  \n  -KB4494352\n  -KB4494351",,,,"247"
"211","125074",,"Security Updates for Microsoft .NET Framework (May 2019)","The Microsoft .NET Framework installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A denial of service vulnerability exists when .NET     Framework improperly handles objects in heap memory. An     attacker who successfully exploited this vulnerability     could cause a denial of service against a .NET     application.  (CVE-2019-0864)\n\n  - A denial of service vulnerability exists when .NET     Framework and .NET Core improperly process RegEx     strings. An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET application. A remote unauthenticated attacker     could exploit this vulnerability by issuing specially     crafted requests to a .NET Framework (or .NET core)     application. The update addresses the vulnerability by     correcting how .NET Framework and .NET Core applications     handle RegEx string processing. (CVE-2019-0820)\n\n  - A denial of service vulnerability exists when .NET     Framework or .NET Core improperly handle web requests.\n    An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET Framework or .NET Core web application. The     vulnerability can be exploited remotely, without     authentication. A remote unauthenticated attacker could     exploit this vulnerability by issuing specially crafted     requests to the .NET Framework or .NET Core application.\n    The update addresses the vulnerability by correcting how     .NET Framework or .NET Core web applications handles web     requests. (CVE-2019-0980, CVE-2019-0981)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"212","125223",,"LibreOffice &lt; 6.1.6, 6.2.x &lt; 6.2.3 Hyperlink Processing Vulnerability (Windows)","The version of LibreOffice installed on the remote Windows host is prior to 6.1.6 or 6.2.x prior to 6.2.3. It is, therefore, affected by a hyperlink processing vulnerability. At attacker may exploit this issue by creating hyperlinks pointing to an executable on the target user&apos;s file system. This hyperlink is unconditionally launched as there is no judgement made on whether the target of the hyperlink is an executable file.\n\nNote that Nessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to LibreOffice version 6.1.6 / 6.2.3 or later.",,,,"43"
"213","125816",,"KB4503267: Windows 10 Version 1607 and Windows Server 2016 June 2019 Security Update","The remote Windows host is missing security update 4503267.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-0943)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-0989, CVE-2019-0991,     CVE-2019-0992, CVE-2019-0993, CVE-2019-1002,     CVE-2019-1003, CVE-2019-1051, CVE-2019-1052)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1014, CVE-2019-1017)\n\n  - A tampering vulnerability exists in Microsoft Windows     when a man-in-the-middle attacker is able to     successfully bypass the NTLM MIC (Message Integrity     Check) protection. An attacker who successfully     exploited this vulnerability could gain the ability to     downgrade NTLM security features.  (CVE-2019-1040)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-0710, CVE-2019-0711, CVE-2019-0713)\n\n  - An information disclosure vulnerability exists when the     scripting engine does not properly handle objects in     memory in Microsoft Edge. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2019-0990,     CVE-2019-1023)\n\n  - An elevation of privilege vulnerability exists when the     Storage Service improperly handles file operations. An     attacker who successfully exploited this vulnerability     could gain elevated privileges on the victim system.\n    (CVE-2019-0983)\n\n  - An elevation of privilege vulnerability exists in the     Windows Installer when the Windows Installer fails to     properly sanitize input leading to an insecure library     loading behavior. A locally authenticated attacker could     run arbitrary code with elevated system privileges. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights. The security update addresses the vulnerability     by correcting the input sanitization error to preclude     unintended elevation. (CVE-2019-0973)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0904, CVE-2019-0905, CVE-2019-0906,     CVE-2019-0907, CVE-2019-0908, CVE-2019-0909,     CVE-2019-0974)\n\n  - An elevation of privilege vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1018)\n\n  - An information disclosure vulnerability exists in the     Windows Event Viewer (eventvwr.msc) when it improperly     parses XML input containing a reference to an external     entity. An attacker who successfully exploited this     vulnerability could read arbitrary files via an XML     external entity (XXE) declaration.  (CVE-2019-0948)\n\n  - A security feature bypass vulnerability exists in Edge     that allows for bypassing Mark of the Web Tagging     (MOTW). Failing to set the MOTW means that a large     number of Microsoft security technologies are bypassed.\n    (CVE-2019-1054)\n\n  - A remote code execution vulnerability exists in the way     that comctl32.dll handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1043)\n\n  - A security feature bypass vulnerability exists where a     NETLOGON message is able to obtain the session key and     sign messages.  (CVE-2019-1019)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0920, CVE-2019-1005, CVE-2019-1055,     CVE-2019-1080)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1038)\n\n  - An elevation of privilege vulnerability exists when     Windows AppX Deployment Service (AppXSVC) improperly     handles hard links. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1064)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2019-0620, CVE-2019-0709,     CVE-2019-0722)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-1025)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0988)\n\n  - An elevation of privilege exists in Windows Audio     Service. An attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-1007, CVE-2019-1028)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2019-1039)\n\n  - This security update corrects a denial of service in the     Local Security Authority Subsystem Service (LSASS)     caused when an authenticated attacker sends a specially     crafted authentication request. A remote attacker who     successfully exploited this vulnerability could cause a     denial of service on the target system&apos;s LSASS service,     which triggers an automatic reboot of the system. The     security update addresses the vulnerability by changing     the way that LSASS handles specially crafted     authentication requests. (CVE-2019-0972)\n\n  - An information disclosure vulnerability exists when     affected Microsoft browsers improperly handle objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1081)\n\n  - An elevation of privilege vulnerability exists when the     Windows Shell fails to validate folder shortcuts. An     attacker who successfully exploited the vulnerability     could elevate privileges by escaping a sandbox.\n    (CVE-2019-1053)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1010, CVE-2019-1012, CVE-2019-1046,     CVE-2019-1050)\n\n  - A remote code execution vulnerability exists in the way     that ActiveX Data Objects (ADO) handle objects in     memory. An attacker who successfully exploited the     vulnerability could execute arbitrary code with the     victim users privileges. An attacker could craft a     website that exploits the vulnerability and then     convince a victim user to visit the website. The     security update addresses the vulnerability by modifying     how ActiveX Data Objects handle objects in memory.\n    (CVE-2019-0888)\n\n  - An elevation of privilege vulnerability exists when the     Windows Common Log File System (CLFS) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2019-0984)\n\n  - A denial of service exists in Microsoft IIS Server when     the optional request filtering feature improperly     handles requests. An attacker who successfully exploited     this vulnerability could perform a temporary denial of     service against pages configured to use request     filtering.  (CVE-2019-0941)\n\n  - An elevation of privilege vulnerability exists in the     way the Task Scheduler Service validates certain file     operations. An attacker who successfully exploited the     vulnerability could gain elevated privileges on a victim     system.  (CVE-2019-1069)\n\n  - An elevation of privilege vulnerability exists when the     Windows User Profile Service (ProfSvc) improperly     handles symlinks. An attacker who successfully exploited     this vulnerability could delete files and folders in an     elevated context.  (CVE-2019-0986)","Apply Cumulative Update KB4503267.",,,,"250"
"214","125818",,"KB4503290: Windows 8.1 and Windows Server 2012 R2 June 2019 Security Update","The remote Windows host is missing security update 4503290 or cumulative update 4503276. It is, therefore, affected by multiple vulnerabilities :\n\n  - An information disclosure vulnerability exists in the     Windows Event Viewer (eventvwr.msc) when it improperly     parses XML input containing a reference to an external     entity. An attacker who successfully exploited this     vulnerability could read arbitrary files via an XML     external entity (XXE) declaration.  (CVE-2019-0948)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2019-0620, CVE-2019-0722)\n\n  - A security feature bypass vulnerability exists where a     NETLOGON message is able to obtain the session key and     sign messages.  (CVE-2019-1019)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1014, CVE-2019-1017)\n\n  - A tampering vulnerability exists in Microsoft Windows     when a man-in-the-middle attacker is able to     successfully bypass the NTLM MIC (Message Integrity     Check) protection. An attacker who successfully     exploited this vulnerability could gain the ability to     downgrade NTLM security features.  (CVE-2019-1040)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-0710, CVE-2019-0711, CVE-2019-0713)\n\n  - A remote code execution vulnerability exists in the way     that comctl32.dll handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1043)\n\n  - An elevation of privilege vulnerability exists in the     Windows Installer when the Windows Installer fails to     properly sanitize input leading to an insecure library     loading behavior. A locally authenticated attacker could     run arbitrary code with elevated system privileges. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights. The security update addresses the vulnerability     by correcting the input sanitization error to preclude     unintended elevation. (CVE-2019-0973)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-0904, CVE-2019-0905, CVE-2019-0906,     CVE-2019-0907, CVE-2019-0908, CVE-2019-0909,     CVE-2019-0974)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-0943)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0920, CVE-2019-1005, CVE-2019-1055,     CVE-2019-1080)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1038)\n\n  - An information disclosure vulnerability exists when     affected Microsoft browsers improperly handle objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1081)\n\n  - An elevation of privilege exists in Windows Audio     Service. An attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-1028)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-1025)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0988)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly initializes objects in memory.\n    (CVE-2019-1039)\n\n  - This security update corrects a denial of service in the     Local Security Authority Subsystem Service (LSASS)     caused when an authenticated attacker sends a specially     crafted authentication request. A remote attacker who     successfully exploited this vulnerability could cause a     denial of service on the target system&apos;s LSASS service,     which triggers an automatic reboot of the system. The     security update addresses the vulnerability by changing     the way that LSASS handles specially crafted     authentication requests. (CVE-2019-0972)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Network File System (NFS) handles     objects in memory. An attacker who successfully     exploited the vulnerability could execute code with     elevated permissions.  (CVE-2019-1045)\n\n  - An elevation of privilege vulnerability exists when the     Windows Shell fails to validate folder shortcuts. An     attacker who successfully exploited the vulnerability     could elevate privileges by escaping a sandbox.\n    (CVE-2019-1053)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1010, CVE-2019-1012, CVE-2019-1046,     CVE-2019-1050)\n\n  - A remote code execution vulnerability exists in the way     that ActiveX Data Objects (ADO) handle objects in     memory. An attacker who successfully exploited the     vulnerability could execute arbitrary code with the     victim users privileges. An attacker could craft a     website that exploits the vulnerability and then     convince a victim user to visit the website. The     security update addresses the vulnerability by modifying     how ActiveX Data Objects handle objects in memory.\n    (CVE-2019-0888)\n\n  - An elevation of privilege vulnerability exists when the     Windows Common Log File System (CLFS) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2019-0984)\n\n  - A denial of service exists in Microsoft IIS Server when     the optional request filtering feature improperly     handles requests. An attacker who successfully exploited     this vulnerability could perform a temporary denial of     service against pages configured to use request     filtering.  (CVE-2019-0941)\n\n  - An elevation of privilege vulnerability exists when the     Windows User Profile Service (ProfSvc) improperly     handles symlinks. An attacker who successfully exploited     this vulnerability could delete files and folders in an     elevated context.  (CVE-2019-0986)","Apply Security Only update KB4503290 or Cumulative Update KB4503276.",,,,"179"
"215","125828",,"Security Updates for Internet Explorer (June 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1038)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0920, CVE-2019-1005, CVE-2019-1055,     CVE-2019-1080)\n\n  - An information disclosure vulnerability exists when     affected Microsoft browsers improperly handle objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1081)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-0988)","Microsoft has released the following security updates to address this issue:  \n  -KB4503259\n  -KB4503273\n  -KB4503276\n  -KB4503285\n  -KB4503292",,,,"105"
"216","125882",,"Tenable Nessus Agent &lt; 7.4.0 Third Party Vulnerability (OpenSSL) (TNS-2019-03)","The version of Nessus Agent installed on the remote Windows host is prior to 7.4.0. It is, therefore, affected by one of the third-party components (OpenSSL) was found to contain a single vulnerability, and updated versions have been made available by the providers.","Upgrade to Tenable Nessus Agent version 7.4.0 or later.",,,,"174"
"217","125896",,"IBM MQ 8.0.0.x &lt; 8.0.0.11 / 9.0.0.x &lt; 9.0.0.6 / 9.1.0.x &lt; 9.1.0.2 / 9.1.1 TLS Key Renegotiation DoS","According to its self-reported version, the IBM MQ server installed on the remote host is 8.0.0.x prior to 8.0.0.11 LTS, 9.0.0.x prior to 9.0.0.6 LTS, 9.1.0.x prior to 9.1.0.2 LTS, or 9.1.1 CD and is therefore affected by a denial-of-service vulnerability in the IBM MQ Queue Manager due to a weakness in the TLS key renegotiation functions. An unauthenticated, remote attacker could exploit this vulnerability to impact the availability of the service.","Upgrade to IBM MQ 8.0.0.11, 9.0.0.6, 9.1.0.2, 9.1.2 or later as per the vendor advisory.",,,,"91"
"218","126570",,"KB4507457: Windows 8.1 and Windows Server 2012 R2 July 2019 Security Update (SWAPGS)","The remote Windows host is missing security update 4507457 or cumulative update 4507448. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in .NET     software when the software fails to check the source     markup of a file. An attacker who successfully exploited     the vulnerability could run arbitrary code in the     context of the current user. If the current user is     logged on with administrative user rights, an attacker     could take control of the affected system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1113)\n\n  - A local elevation of privilege vulnerability exists in     how splwow64.exe handles certain calls. An attacker who     successfully exploited the vulnerability could elevate     privileges on an affected system from low-integrity to     medium-integrity. This vulnerability by itself does not     allow arbitrary code execution; however, it could allow     arbitrary code to be run if the attacker uses it in     combination with another vulnerability (such as a remote     code execution vulnerability or another elevation of     privilege vulnerability) that is capable of leveraging     the elevated privileges when code execution is     attempted. (CVE-2019-0880)\n\n  - An information disclosure vulnerability exists when the     Windows RDP client improperly discloses the contents of     its memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1108)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1096)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows where a certain dll, with Local     Service privilege, is vulnerable to race planting a     customized dll. An attacker who successfully exploited     this vulnerability could potentially elevate privilege     to SYSTEM. The update addresses this vulnerability by     requiring system privileges for a certain DLL.\n    (CVE-2019-1082)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1001)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1063)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1104)\n\n  - An information disclosure vulnerability exists when     DirectWrite improperly discloses the contents of its     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how DirectWrite handles objects in memory.\n    (CVE-2019-1093, CVE-2019-1097)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1094, CVE-2019-1095)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how the Windows kernel handles objects in     memory. (CVE-2019-1071)\n\n  - An elevation of privilege exists in Windows Audio     Service. An attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-1086, CVE-2019-1087,     CVE-2019-1088)\n\n  - An elevation of privilege vulnerability exists when     Windows AppX Deployment Service (AppXSVC) improperly     handles hard links. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1130)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1004, CVE-2019-1056, CVE-2019-1059)\n\n  - A security feature bypass vulnerability exists in Active     Directory Federation Services (ADFS) which could allow     an attacker to bypass the extranet lockout policy.\n    (CVE-2019-1126)\n\n  - A remote code execution vulnerability exists in Remote     Desktop Services formerly known as Terminal Services     when an authenticated attacker abuses clipboard     redirection. An attacker who successfully exploited this     vulnerability could execute arbitrary code on the victim     system. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2019-0887)\n\n  - An elevation of privilege vulnerability exists in the     way that the wlansvc.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1085)\n\n  - A denial of service vulnerability exists when Microsoft     Common Object Runtime Library improperly handles web     requests. An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET web application. A remote unauthenticated attacker     could exploit this vulnerability by issuing specially     crafted requests to the .NET application. The update     addresses the vulnerability by correcting how the .NET     web application handles web requests. (CVE-2019-1083)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when an attacker sends specially     crafted packets to a DHCP failover server. An attacker     who successfully exploited the vulnerability could     either run arbitrary code on the DHCP failover server or     cause the DHCP service to become nonresponsive.\n    (CVE-2019-0785)\n\n  - An elevation of privilege vulnerability exists in     rpcss.dll when the RPC service Activation Kernel     improperly handles an RPC request.  (CVE-2019-1089)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1073)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-1102)\n\n  - An authentication bypass vulnerability exists in Windows     Communication Foundation (WCF) and Windows Identity     Foundation (WIF), allowing signing of SAML tokens with     arbitrary symmetric keys. This vulnerability allows an     attacker to impersonate another user, which can lead to     elevation of privileges. The vulnerability exists in     WCF, WIF 3.5 and above in .NET Framework, WIF 1.0     component in Windows, WIF Nuget package, and WIF     implementation in SharePoint. An unauthenticated     attacker can exploit this by signing a SAML token with     any arbitrary symmetric key. This security update     addresses the issue by ensuring all versions of WCF and     WIF validate the key used to sign SAML tokens correctly.\n    (CVE-2019-1006)\n\n  - A denial of service vulnerability exists in Windows DNS     Server when it fails to properly handle DNS queries. An     attacker who successfully exploited this vulnerability     could cause the DNS Server service to become     nonresponsive.  (CVE-2019-0811)     \n  - An information disclosure vulnerability exists when     certain central processing units (CPU) speculatively     access memory. An attacker who successfully exploited     the vulnerability could read privileged data across     trust boundaries. (CVE-2019-1125)","Apply Security Only update KB4507457 or Cumulative Update KB4507448.",,,,"82"
"219","126577",,"KB4507460: Windows 10 Version 1607 and Windows Server 2016 July 2019 Security Update (SWAPGS)","The remote Windows host is missing security update 4507460.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-0999)\n\n  - A remote code execution vulnerability exists in .NET     software when the software fails to check the source     markup of a file. An attacker who successfully exploited     the vulnerability could run arbitrary code in the     context of the current user. If the current user is     logged on with administrative user rights, an attacker     could take control of the affected system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1113)\n\n  - A local elevation of privilege vulnerability exists in     how splwow64.exe handles certain calls. An attacker who     successfully exploited the vulnerability could elevate     privileges on an affected system from low-integrity to     medium-integrity. This vulnerability by itself does not     allow arbitrary code execution; however, it could allow     arbitrary code to be run if the attacker uses it in     combination with another vulnerability (such as a remote     code execution vulnerability or another elevation of     privilege vulnerability) that is capable of leveraging     the elevated privileges when code execution is     attempted. (CVE-2019-0880)\n\n  - An elevation of privilege vulnerability exists in     rpcss.dll when the RPC service Activation Kernel     improperly handles an RPC request.  (CVE-2019-1089)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-1062, CVE-2019-1092,     CVE-2019-1103, CVE-2019-1106, CVE-2019-1107)\n\n  - An information disclosure vulnerability exists when the     Windows RDP client improperly discloses the contents of     its memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1108)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1096)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-0966)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows where a certain dll, with Local     Service privilege, is vulnerable to race planting a     customized dll. An attacker who successfully exploited     this vulnerability could potentially elevate privilege     to SYSTEM. The update addresses this vulnerability by     requiring system privileges for a certain DLL.\n    (CVE-2019-1082)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1001)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1063)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1104)\n\n  - An information disclosure vulnerability exists when     DirectWrite improperly discloses the contents of its     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how DirectWrite handles objects in memory.\n    (CVE-2019-1093, CVE-2019-1097)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1094, CVE-2019-1095)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how the Windows kernel handles objects in     memory. (CVE-2019-1071)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-1067)\n\n  - An elevation of privilege exists in Windows Audio     Service. An attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-1086, CVE-2019-1087,     CVE-2019-1088)\n\n  - An elevation of privilege vulnerability exists when     Windows AppX Deployment Service (AppXSVC) improperly     handles hard links. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1130)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1004, CVE-2019-1056, CVE-2019-1059)\n\n  - A security feature bypass vulnerability exists in Active     Directory Federation Services (ADFS) which could allow     an attacker to bypass the extranet lockout policy.\n    (CVE-2019-1126)\n\n  - A remote code execution vulnerability exists in Remote     Desktop Services formerly known as Terminal Services     when an authenticated attacker abuses clipboard     redirection. An attacker who successfully exploited this     vulnerability could execute arbitrary code on the victim     system. An attacker could then install programs; view,     change, or delete data; or create new accounts with full     user rights.  (CVE-2019-0887)\n\n  - An elevation of privilege vulnerability exists in the     way that the wlansvc.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1085)\n\n  - A denial of service vulnerability exists when Microsoft     Common Object Runtime Library improperly handles web     requests. An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET web application. A remote unauthenticated attacker     could exploit this vulnerability by issuing specially     crafted requests to the .NET application. The update     addresses the vulnerability by correcting how the .NET     web application handles web requests. (CVE-2019-1083)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when an attacker sends specially     crafted packets to a DHCP failover server. An attacker     who successfully exploited the vulnerability could     either run arbitrary code on the DHCP failover server or     cause the DHCP service to become nonresponsive.\n    (CVE-2019-0785)\n\n  - A security feature bypass vulnerability exists when     Active Directory Federation Services (ADFS) improperly     updates its list of banned IP addresses.\n    (CVE-2019-0975)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1073)\n\n  - A remote code execution vulnerability exists in the way     that the Windows Graphics Device Interface (GDI) handles     objects in the memory. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-1102)\n\n  - An authentication bypass vulnerability exists in Windows     Communication Foundation (WCF) and Windows Identity     Foundation (WIF), allowing signing of SAML tokens with     arbitrary symmetric keys. This vulnerability allows an     attacker to impersonate another user, which can lead to     elevation of privileges. The vulnerability exists in     WCF, WIF 3.5 and above in .NET Framework, WIF 1.0     component in Windows, WIF Nuget package, and WIF     implementation in SharePoint. An unauthenticated     attacker can exploit this by signing a SAML token with     any arbitrary symmetric key. This security update     addresses the issue by ensuring all versions of WCF and     WIF validate the key used to sign SAML tokens correctly.\n    (CVE-2019-1006)\n\n  - An information disclosure vulnerability exists when     Unistore.dll fails to properly handle objects in memory.\n    An attacker who successfully exploited the vulnerability     could potentially disclose memory contents of an     elevated process.  (CVE-2019-1091)\n\n  - A denial of service vulnerability exists in Windows DNS     Server when it fails to properly handle DNS queries. An     attacker who successfully exploited this vulnerability     could cause the DNS Server service to become     nonresponsive.  (CVE-2019-0811)     \n  - An information disclosure vulnerability exists when     certain central processing units (CPU) speculatively     access memory. An attacker who successfully exploited     the vulnerability could read privileged data across     trust boundaries. (CVE-2019-1125)","Apply Cumulative Update KB4507460.",,,,"99"
"220","126582",,"Security Updates for Internet Explorer (July 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1063)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1004, CVE-2019-1056, CVE-2019-1059)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1104)\n\n  - A remote code execution vulnerability exists in the way     the scripting engine handles objects in memory in     Microsoft browsers. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1001)","Microsoft has released the following security updates to address this issue:  \n  -KB4507434\n  -KB4507448\n  -KB4507449\n  -KB4507452\n  -KB4507462",,,,"12"
"221","126600",,"Security Updates for Microsoft .NET Framework (July 2019)","The Microsoft .NET Framework installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - An authentication bypass vulnerability exists in Windows     Communication Foundation (WCF) and Windows Identity     Foundation (WIF), allowing signing of SAML tokens with     arbitrary symmetric keys. This vulnerability allows an     attacker to impersonate another user, which can lead to     elevation of privileges. The vulnerability exists in     WCF, WIF 3.5 and above in .NET Framework, WIF 1.0     component in Windows, WIF Nuget package, and WIF     implementation in SharePoint. An unauthenticated     attacker can exploit this by signing a SAML token with     any arbitrary symmetric key. This security update     addresses the issue by ensuring all versions of WCF and     WIF validate the key used to sign SAML tokens correctly.\n    (CVE-2019-1006)\n\n  - A remote code execution vulnerability exists in .NET     software when the software fails to check the source     markup of a file. An attacker who successfully exploited     the vulnerability could run arbitrary code in the     context of the current user. If the current user is     logged on with administrative user rights, an attacker     could take control of the affected system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1113)\n\n  - A denial of service vulnerability exists when Microsoft     Common Object Runtime Library improperly handles web     requests. An attacker who successfully exploited this     vulnerability could cause a denial of service against a     .NET web application. A remote unauthenticated attacker     could exploit this vulnerability by issuing specially     crafted requests to the .NET application. The update     addresses the vulnerability by correcting how the .NET     web application handles web requests. (CVE-2019-1083)","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"222","126631",,"Security Updates for Microsoft SQL Server (July 2019)","The Microsoft SQL Server installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerability :\n\n  - A remote code execution vulnerability exists in     Microsoft SQL Server when it incorrectly handles     processing of internal functions. An attacker who     successfully exploited this vulnerability could execute     code in the context of the SQL Server Database Engine     service account.  (CVE-2019-1068)","Microsoft has released the following security updates to address this issue:  \n  -KB4505217\n  -KB4505419\n  -KB4505422\n  -KB4505218\n  -KB4505219\n  -KB4505225\n  -KB4505224\n  -KB4505222\n  -KB4505221\n  -KB4505220",,,,"31"
"223","126764",,"Oracle Solaris Critical Patch Update : jul2019_SRU11_3_36_13_0","This Solaris system is missing necessary patches to address a critical security update :\n\n  - Vulnerability in the Oracle Solaris product of Oracle     Sun Systems Products Suite (component: Kernel).\n    Supported versions that are affected are 11.4 and 11.3.\n    Easily exploitable vulnerability allows unauthenticated     attacker with network access via IPv6 to compromise     Oracle Solaris. Successful attacks of this vulnerability     can result in unauthorized creation, deletion or     modification access to critical data or all Oracle     Solaris accessible data and unauthorized ability to     cause a hang or frequently repeatable crash (complete     DOS) of Oracle Solaris. (CVE-2019-5597)","Install the jul2019 CPU from the Oracle support website.",,,,"61"
"224","126821",,"Oracle Java SE 1.7.0_231 / 1.8.0_221 / 1.11.0_4 / 1.12.0_2 Multiple Vulnerabilities (Jul 2019 CPU)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 7 Update 231, 8 Update 221, 11 Update 4, or 12 Update 2. It is, therefore, affected by multiple vulnerabilities:\n\n  - Unspecified vulnerabilities in the utilities and JCE     subcomponents of Oracle Java SE, which could allow an     unauthenticated remote attacker to cause a partial denial     of service. (CVE-2019-2762, CVE-2019-2769, CVE-2019-2842)\n\n  - An unspecified vulnerability in the security subcomponent     of Oracle Java SE, which could allow an unauthenticated     local attacker to gain unauthorized access to critical Java     SE data. (CVE-2019-2745)\n\n  - Unspecified vulnerabilities in the networking and security     subcomponents of Oracle Java SE, which could allow an     unauthenticated remote attacker to gain unauthorized     access to Java SE data. Exploitation of this vulnerability     requires user interaction.     (CVE-2019-2766, CVE-2019-2786, CVE-2019-2818)\n\n  - An unspecified vulnerability in the networking subcomponent     of Oracle Java SE, which could allow an unauthenticated     remote attacker unauthorized read, update, insert or     delete access to Java SE data. (CVE-2019-2816)\n\n  - An unspecified vulnerability in the JSSE subcomponent of     Oracle Java SE, which could allow an unauthenticated,     remote attacker to gain unauthorized access to critical     Java SE data. Exploitation of this vulnerability requires     user interaction. (CVE-2019-2821)\n\n  - A use after free vulnerability exists in the libpng     subcomponent of Oracle Java SE. An unauthenticated,     remote attacker can exploit this to cause a complete     denial of service condition in Java SE. Exploitation     of this vulnerability requires user interaction.\n    (CVE-2019-7317)\n\nNessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to Oracle JDK / JRE 12 Update 2 , 11 Update 4, 8 Update 221 / 7 Update 231 or later. If necessary, remove any affected versions.",,,,"263"
"225","127114",,"LibreOffice &lt; 6.2.5 Multiple Vulnerabilities (Windows)","The version of LibreOffice installed on the remote Windows host is prior to 6.2.5. It is, therefore, affected by multiple vulnerabilities :\n\n  - An arbitrary script execution vulnerability exists due     to a flaw allowing event-based execution of python     scripts within a document. Note, LibreLogo must be     installed for this vulnerability to be exploitable.\n    LibreLogo is frequently bundled with LibreOffice.\n    (CVE-2019-9848)\n\n  - An information disclosure vulnerability exists due to how     bullet graphics are handled when in &apos;stealth mode&apos;. An     unauthenticated, remote, attacker could utilize this     vulnerability to cause LibreOffice to perform remote     requests when they would typically not be permitted.\n    (CVE-2019-9849)\n\nNote that Nessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to LibreOffice version 6.2.5 or later.",,,,"52"
"226","127843",,"KB4512489: Windows 8.1 and Windows Server 2012 R2 August 2019 Security Update","The remote Windows host is missing security update 4512489 or cumulative update 4512488. It is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1162)\n\n  - A security feature bypass vulnerability exists when     Microsoft browsers improperly handle requests of     different origins. The vulnerability allows Microsoft     browsers to bypass Same-Origin Policy (SOP)     restrictions, and to allow requests that should     otherwise be ignored. An attacker who successfully     exploited the vulnerability could force the browser to     send data that would otherwise be restricted.\n    (CVE-2019-1192)\n\n  - An information disclosure vulnerability exists when the     Microsoft Windows Graphics Component improperly handles     objects in memory. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2019-1148,     CVE-2019-1153)\n\n  - A denial of service vulnerability exists when the     XmlLite runtime (XmlLite.dll) improperly parses XML     input. An attacker who successfully exploited this     vulnerability could cause a denial of service against an     XML application. A remote unauthenticated attacker could     exploit this vulnerability by issuing specially crafted     requests to an XML application. The update addresses the     vulnerability by correcting how the XmlLite runtime     parses XML input. (CVE-2019-1187)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1146, CVE-2019-1147, CVE-2019-1155,     CVE-2019-1156, CVE-2019-1157)\n\n  - &lt;h1&gt;Executive Summary&lt;/h1&gt; Microsoft is aware of the     Bluetooth BR/EDR (basic rate/enhanced data rate, known     as &amp;quot;Bluetooth Classic&amp;quot;) key negotiation     vulnerability that exists at the hardware specification     level of any BR/EDR Bluetooth device. An attacker could     potentially be able to negotiate the offered key length     down to 1 byte of entropy, from a maximum of 16 bytes.\n    (CVE-2019-9506)\n\n  - An elevation of privilege vulnerability exists in the     way that the wcmsvc.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1180)\n\n  - An elevation of privilege exists in the p2pimsvc service     where an attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-1168)\n\n  - An information disclosure vulnerability exists when the     Windows Graphics component improperly handles objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system. An authenticated attacker     could exploit this vulnerability by running a specially     crafted application. The update addresses the     vulnerability by correcting how the Windows Graphics     Component handles objects in memory. (CVE-2019-1078)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when an attacker sends specially     crafted packets to a DHCP failover server. An attacker     who successfully exploited the vulnerability could cause     the DHCP service to become nonresponsive.\n    (CVE-2019-1206)\n\n  - An elevation of privilege vulnerability exists in the     way that the ssdpsrv.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1178)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited the vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-1144,     CVE-2019-1145, CVE-2019-1149, CVE-2019-1150,     CVE-2019-1151, CVE-2019-1152)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-1159, CVE-2019-1164)\n\n  - A remote code execution vulnerability exists in Remote     Desktop Services formerly known as Terminal Services     when an unauthenticated attacker connects to the target     system using RDP and sends specially crafted requests.\n    This vulnerability is pre-authentication and requires no     user interaction. An attacker who successfully exploited     this vulnerability could execute arbitrary code on the     target system. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1181, CVE-2019-1182)\n\n  - A memory corruption vulnerability exists in the Windows     DHCP client when an attacker sends specially crafted     DHCP responses to a client. An attacker who successfully     exploited the vulnerability could run arbitrary code on     the client machine.  (CVE-2019-0736)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1133, CVE-2019-1194)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1183)\n\n  - An elevation of privilege vulnerability exists in the     way that the rpcss.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1177)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1193)\n\n  - An information disclosure vulnerability exists in Azure     Active Directory (AAD) Microsoft Account (MSA) during     the login request session. An attacker who successfully     exploited the vulnerability could take over a user&apos;s     account.  (CVE-2019-1172)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2019-0714, CVE-2019-0715, CVE-2019-0718,     CVE-2019-0723)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-0716)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise a users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document     or by convincing a user to visit an untrusted webpage.\n    The update addresses the vulnerability by correcting how     the Windows GDI component handles objects in memory.\n    (CVE-2019-1143, CVE-2019-1158)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V Network Switch on a host server fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-0720)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when processing specially crafted     packets. An attacker who successfully exploited the     vulnerability could cause the DHCP server service to     stop responding.  (CVE-2019-1212)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-1057)","Apply Security Only update KB4512489 or Cumulative Update KB4512488.",,,,"201"
"227","127850",,"KB4512517: Windows 10 Version 1607 and Windows Server 2016 August 2019 Security Update","The remote Windows host is missing security update 4512517.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1162)\n\n  - A security feature bypass vulnerability exists when     Microsoft browsers improperly handle requests of     different origins. The vulnerability allows Microsoft     browsers to bypass Same-Origin Policy (SOP)     restrictions, and to allow requests that should     otherwise be ignored. An attacker who successfully     exploited the vulnerability could force the browser to     send data that would otherwise be restricted.\n    (CVE-2019-1192)\n\n  - An information disclosure vulnerability exists when the     Microsoft Windows Graphics Component improperly handles     objects in memory. An attacker who successfully     exploited the vulnerability could obtain information to     further compromise the users system.  (CVE-2019-1148,     CVE-2019-1153)\n\n  - A denial of service vulnerability exists when the     XmlLite runtime (XmlLite.dll) improperly parses XML     input. An attacker who successfully exploited this     vulnerability could cause a denial of service against an     XML application. A remote unauthenticated attacker could     exploit this vulnerability by issuing specially crafted     requests to an XML application. The update addresses the     vulnerability by correcting how the XmlLite runtime     parses XML input. (CVE-2019-1187)\n\n  - An elevation of privilege vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could run arbitrary code in kernel mode. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1176)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1146, CVE-2019-1147, CVE-2019-1155,     CVE-2019-1156, CVE-2019-1157)\n\n  - A denial of service vulnerability exists in the HTTP/2     protocol stack (HTTP.sys) when HTTP.sys improperly     parses specially crafted HTTP/2 requests. An attacker     who successfully exploited the vulnerability could     create a denial of service condition, causing the target     system to become unresponsive.  (CVE-2019-9511,     CVE-2019-9512, CVE-2019-9513, CVE-2019-9514,     CVE-2019-9518)\n\n  - &lt;h1&gt;Executive Summary&lt;/h1&gt; Microsoft is aware of the     Bluetooth BR/EDR (basic rate/enhanced data rate, known     as &amp;quot;Bluetooth Classic&amp;quot;) key negotiation     vulnerability that exists at the hardware specification     level of any BR/EDR Bluetooth device. An attacker could     potentially be able to negotiate the offered key length     down to 1 byte of entropy, from a maximum of 16 bytes.\n    (CVE-2019-9506)\n\n  - A remote code execution vulnerability exists in the way     that the Chakra scripting engine handles objects in     memory in Microsoft Edge. The vulnerability could     corrupt memory in such a way that an attacker could     execute arbitrary code in the context of the current     user. An attacker who successfully exploited the     vulnerability could gain the same user rights as the     current user.  (CVE-2019-1139, CVE-2019-1140,     CVE-2019-1195, CVE-2019-1197)\n\n  - An elevation of privilege exists in the p2pimsvc service     where an attacker who successfully exploited the     vulnerability could run arbitrary code with elevated     privileges.  (CVE-2019-1168)\n\n  - An information disclosure vulnerability exists when the     Windows Graphics component improperly handles objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system. An authenticated attacker     could exploit this vulnerability by running a specially     crafted application. The update addresses the     vulnerability by correcting how the Windows Graphics     Component handles objects in memory. (CVE-2019-1078)\n\n  - An elevation of privilege vulnerability exists in the     way that the wcmsvc.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1180, CVE-2019-1186)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when an attacker sends specially     crafted packets to a DHCP failover server. An attacker     who successfully exploited the vulnerability could cause     the DHCP service to become nonresponsive.\n    (CVE-2019-1206)\n\n  - An elevation of privilege vulnerability exists in the     way that the unistore.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1179)\n\n  - An elevation of privilege exists in SyncController.dll.\n    An attacker who successfully exploited the vulnerability     could run arbitrary code with elevated privileges.\n    (CVE-2019-1198)\n\n  - An elevation of privilege vulnerability exists in the     way that the ssdpsrv.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1178)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited the vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-1144,     CVE-2019-1145, CVE-2019-1149, CVE-2019-1150,     CVE-2019-1151, CVE-2019-1152)\n\n  - A security feature bypass exists when Windows     incorrectly validates CAB file signatures. An attacker     who successfully exploited this vulnerability could     inject code into a CAB file without invalidating the     file&apos;s signature.  (CVE-2019-1163)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-1159, CVE-2019-1164)\n\n  - A remote code execution vulnerability exists in Remote     Desktop Services formerly known as Terminal Services     when an unauthenticated attacker connects to the target     system using RDP and sends specially crafted requests.\n    This vulnerability is pre-authentication and requires no     user interaction. An attacker who successfully exploited     this vulnerability could execute arbitrary code on the     target system. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1181, CVE-2019-1182)\n\n  - A memory corruption vulnerability exists in the Windows     DHCP client when an attacker sends specially crafted     DHCP responses to a client. An attacker who successfully     exploited the vulnerability could run arbitrary code on     the client machine.  (CVE-2019-0736)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1133, CVE-2019-1194)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1183)\n\n  - An elevation of privilege vulnerability exists in the     way that the rpcss.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1177)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1193)\n\n  - An information disclosure vulnerability exists when     Microsoft Edge improperly handles objects in memory. An     attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1030)\n\n  - An information disclosure vulnerability exists in Azure     Active Directory (AAD) Microsoft Account (MSA) during     the login request session. An attacker who successfully     exploited the vulnerability could take over a user&apos;s     account.  (CVE-2019-1172)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2019-0714, CVE-2019-0715, CVE-2019-0718,     CVE-2019-0723)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-0716)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise a users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document     or by convincing a user to visit an untrusted webpage.\n    The update addresses the vulnerability by correcting how     the Windows GDI component handles objects in memory.\n    (CVE-2019-1143, CVE-2019-1158)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V Network Switch on a host server fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-0720)\n\n  - A memory corruption vulnerability exists in the Windows     Server DHCP service when processing specially crafted     packets. An attacker who successfully exploited the     vulnerability could cause the DHCP server service to     stop responding.  (CVE-2019-1212)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-1057)","Apply Cumulative Update KB4512517.",,,,"167"
"228","127852",,"Security Updates for Internet Explorer (August 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A security feature bypass vulnerability exists when     Microsoft browsers improperly handle requests of     different origins. The vulnerability allows Microsoft     browsers to bypass Same-Origin Policy (SOP)     restrictions, and to allow requests that should     otherwise be ignored. An attacker who successfully     exploited the vulnerability could force the browser to     send data that would otherwise be restricted.\n    (CVE-2019-1192)\n\n  - A remote code execution vulnerability exists in the way     that Microsoft browsers access objects in memory. The     vulnerability could corrupt memory in a way that could     allow an attacker to execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1193)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1133, CVE-2019-1194)","Microsoft has released the following security updates to address this issue:  \n  -KB4512506\n  -KB4512518\n  -KB4512476\n  -KB4511872\n  -KB4512488",,,,"192"
"229","127910",,"Microsoft Defender Elevation of Privilege Vulnerability (CVE-2019-1161)","The version of Microsoft Malware Protection Signature Update Stub (MpSigStub.exe) installed on the remote Windows host is prior to 1.1.16200.1. It is, therefore, affected by a elevation of privilege vulnerability which could allow an attacker who successfully exploited this vulnerability to elevate privileges on the system.","Enable automatic updates to update the scan engine for the relevant antimalware applications. Refer to Knowledge Base Article 2510781 for information on how to verify that MMPE has been updated.",,,,"148"
"230","128637",,"KB4516044: Windows 10 Version 1607 and Windows Server 2016 September 2019 Security Update","The remote Windows host is missing security update 4516044.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists in     Windows Text Service Framework (TSF) when the TSF server     process does not validate the source of input or     commands it receives. An attacker who successfully     exploited this vulnerability could inject commands or     read input sent through a malicious Input Method Editor     (IME). This only affects systems that have installed an     IME.  (CVE-2019-1235)\n\n  - An information disclosure exists in the Windows Common     Log File System (CLFS) driver when it fails to properly     handle sandbox checks. An attacker who successfully     exploited this vulnerability could potentially read data     outside their expected limits.  (CVE-2019-1282)\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1274)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V writes uninitialized memory to disk. An     attacker could exploit the vulnerability by reading a     file to recover kernel memory.  (CVE-2019-1254)\n\n  - An elevation of privilege vulnerability exists when the     Windows Update Delivery Optimization does not properly     enforce file share permissions. An attacker who     successfully exploited the vulnerability could overwrite     files that require higher privileges than what the     attacker already has.  (CVE-2019-1289)\n\n  - An elevation of privilege vulnerability exists when the     .NET Framework common language runtime (CLR) allows file     creation in arbitrary locations. An attacker who     successfully exploited this vulnerability could write     files to folders that require higher privileges than     what the attacker already has.  (CVE-2019-1142)\n\n  - An information disclosure vulnerability exists when     DirectWrite improperly discloses the contents of its     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how DirectWrite handles objects in memory.\n    (CVE-2019-1244, CVE-2019-1245)\n\n  - An elevation of privilege vulnerability exists in     Windows store installer where WindowsApps directory is     vulnerable to symbolic link attack. An attacker who     successfully exploited this vulnerability could bypass     access restrictions to add or remove files.\n    (CVE-2019-1270)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Compatibility Appraiser where a configuration     file, with local privileges, is vulnerable to symbolic     link and hard link attacks. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1267)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1269, CVE-2019-1272)\n\n  - A remote code execution vulnerability exists in     Microsoft Windows that could allow remote code execution     if a .LNK file is processed. An attacker who     successfully exploited this vulnerability could gain the     same user rights as the local user.  (CVE-2019-1280)\n\n  - An information disclosure vulnerability exists in     Windows when the Windows SMB Client kernel-mode driver     fails to properly handle objects in memory. An attacker     who successfully exploited the vulnerability could     potentially disclose contents of System memory.\n    (CVE-2019-1293)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1240, CVE-2019-1241, CVE-2019-1242,     CVE-2019-1243, CVE-2019-1246, CVE-2019-1247,     CVE-2019-1248, CVE-2019-1249, CVE-2019-1250)\n\n  - An elevation of privilege vulnerability exists when the     Diagnostics Hub Standard Collector Service improperly     impersonates certain file operations. An attacker who     successfully exploited this vulnerability could gain     elevated privileges. An attacker with unprivileged     access to a vulnerable system could exploit this     vulnerability. The security update addresses the     vulnerability by ensuring the Diagnostics Hub Standard     Collector Service properly impersonates file operations.\n    (CVE-2019-1232)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1256, CVE-2019-1285)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1208, CVE-2019-1236)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Network Connectivity Assistant     handles objects in memory. An attacker who successfully     exploited the vulnerability could execute code with     elevated permissions.  (CVE-2019-1287)\n\n  - A remote code execution vulnerability exists in the     Windows Remote Desktop Client when a user connects to a     malicious server. An attacker who successfully exploited     this vulnerability could execute arbitrary code on the     computer of the connecting client. An attacker could     then install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-1290, CVE-2019-1291)\n\n  - A security feature bypass vulnerability exists when     Microsoft Browsers fail to validate the correct Security     Zone of requests for specific URLs. This could allow an     attacker to cause a user to access a URL in a less     restricted Internet Security Zone than intended.\n    (CVE-2019-1220)\n\n  - An elevation of privilege exists when Winlogon does not     properly handle file path information. An attacker who     successfully exploited this vulnerability could run     arbitrary code. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1268)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-0928)\n\n  - An elevation of privilege vulnerability exists when the     Windows Common Log File System (CLFS) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2019-1214)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1252, CVE-2019-1286)\n\n  - An elevation of privilege vulnerability exists in the     way that the unistore.dll handles objects in memory. An     attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1278)\n\n  - An information disclosure vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how DirectX handles objects in memory.\n    (CVE-2019-1216)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-1292)\n\n  - An elevation of privilege exists in hdAudio.sys which     may lead to an out of band write. An attacker who     successfully exploited this vulnerability could run     processes in an elevated context. An attacker could then     install programs; view, change or delete data.\n    (CVE-2019-1271)\n\n  - An information disclosure vulnerability exists when the     Windows Transaction Manager improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could potentially read data that was not     intended to be disclosed.  (CVE-2019-1219)\n\n  - An elevation of privilege vulnerability exists in the     way that ws2ifsl.sys (Winsock) handles objects in     memory. An attacker who successfully exploited the     vulnerability could execute code with elevated     privileges.  (CVE-2019-1215)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1221)","Apply Cumulative Update KB4516044.",,,,"202"
"231","128642",,"KB4516064: Windows 8.1 and Windows Server 2012 R2 September 2019 Security Update","The remote Windows host is missing security update 4516064 or cumulative update 4516067. It is, therefore, affected by multiple vulnerabilities :\n\n  - An elevation of privilege vulnerability exists in     Windows Text Service Framework (TSF) when the TSF server     process does not validate the source of input or     commands it receives. An attacker who successfully     exploited this vulnerability could inject commands or     read input sent through a malicious Input Method Editor     (IME). This only affects systems that have installed an     IME.  (CVE-2019-1235)\n\n  - An information disclosure exists in the Windows Common     Log File System (CLFS) driver when it fails to properly     handle sandbox checks. An attacker who successfully     exploited this vulnerability could potentially read data     outside their expected limits.  (CVE-2019-1282)\n\n  - An information disclosure vulnerability exists when the     Windows kernel fails to properly initialize a memory     address. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1274)\n\n  - An elevation of privilege vulnerability exists when the     .NET Framework common language runtime (CLR) allows file     creation in arbitrary locations. An attacker who     successfully exploited this vulnerability could write     files to folders that require higher privileges than     what the attacker already has.  (CVE-2019-1142)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1240, CVE-2019-1241, CVE-2019-1242,     CVE-2019-1243, CVE-2019-1246, CVE-2019-1247,     CVE-2019-1248, CVE-2019-1249, CVE-2019-1250)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Compatibility Appraiser where a configuration     file, with local privileges, is vulnerable to symbolic     link and hard link attacks. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1267)\n\n  - A remote code execution vulnerability exists in     Microsoft Windows that could allow remote code execution     if a .LNK file is processed. An attacker who     successfully exploited this vulnerability could gain the     same user rights as the local user.  (CVE-2019-1280)\n\n  - An information disclosure vulnerability exists in     Windows when the Windows SMB Client kernel-mode driver     fails to properly handle objects in memory. An attacker     who successfully exploited the vulnerability could     potentially disclose contents of System memory.\n    (CVE-2019-1293)\n\n  - An information disclosure vulnerability exists when     DirectWrite improperly discloses the contents of its     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how DirectWrite handles objects in memory.\n    (CVE-2019-1244, CVE-2019-1245)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1256, CVE-2019-1285)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1208, CVE-2019-1236)\n\n  - An elevation of privilege vulnerability exists in the     way that the Windows Network Connectivity Assistant     handles objects in memory. An attacker who successfully     exploited the vulnerability could execute code with     elevated permissions.  (CVE-2019-1287)\n\n  - A remote code execution vulnerability exists in the     Windows Remote Desktop Client when a user connects to a     malicious server. An attacker who successfully exploited     this vulnerability could execute arbitrary code on the     computer of the connecting client. An attacker could     then install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-1290, CVE-2019-1291)\n\n  - An elevation of privilege vulnerability exists when     Windows improperly handles calls to Advanced Local     Procedure Call (ALPC). An attacker who successfully     exploited this vulnerability could run arbitrary code in     the security context of the local system. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    (CVE-2019-1269)\n\n  - A security feature bypass vulnerability exists when     Microsoft Browsers fail to validate the correct Security     Zone of requests for specific URLs. This could allow an     attacker to cause a user to access a URL in a less     restricted Internet Security Zone than intended.\n    (CVE-2019-1220)\n\n  - An elevation of privilege exists when Winlogon does not     properly handle file path information. An attacker who     successfully exploited this vulnerability could run     arbitrary code. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1268)\n\n  - An elevation of privilege vulnerability exists when the     Windows Common Log File System (CLFS) driver improperly     handles objects in memory. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context.  (CVE-2019-1214)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1252, CVE-2019-1286)\n\n  - An information disclosure vulnerability exists when     DirectX improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system. An authenticated attacker could exploit this     vulnerability by running a specially crafted     application. The update addresses the vulnerability by     correcting how DirectX handles objects in memory.\n    (CVE-2019-1216)\n\n  - An elevation of privilege exists in hdAudio.sys which     may lead to an out of band write. An attacker who     successfully exploited this vulnerability could run     processes in an elevated context. An attacker could then     install programs; view, change or delete data.\n    (CVE-2019-1271)\n\n  - An information disclosure vulnerability exists when the     Windows Transaction Manager improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could potentially read data that was not     intended to be disclosed.  (CVE-2019-1219)\n\n  - An elevation of privilege vulnerability exists in the     way that ws2ifsl.sys (Winsock) handles objects in     memory. An attacker who successfully exploited the     vulnerability could execute code with elevated     privileges.  (CVE-2019-1215)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1221)","Apply Security Only update KB4516064 or Cumulative Update KB4516067.",,,,"46"
"232","128647",,"Security Updates for Internet Explorer (September 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1208, CVE-2019-1236)\n\n  - A security feature bypass vulnerability exists when     Microsoft Browsers fail to validate the correct Security     Zone of requests for specific URLs. This could allow an     attacker to cause a user to access a URL in a less     restricted Internet Security Zone than intended.\n    (CVE-2019-1220)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1221)","Microsoft has released the following security updates to address this issue:  \n  -KB4516065\n  -KB4516067\n  -KB4516026\n  -KB4516046\n  -KB4516055",,,,"180"
"233","128742",,"Security Updates for Microsoft .NET Framework (September 2019)","The Microsoft .NET Framework installation on the remote host is missing a security update. It is, therefore, affected by an elevation of privilege vulnerability, which exists when the .NET Framework common language runtime (CLR) allows file creation in arbitrary locations. An attacker who successfully exploited this vulnerability could write files to folders that require higher privileges than what the attacker already has.","Microsoft has released security updates for Microsoft .NET Framework.",,,,"145"
"234","129166",,"Security Update for Internet Explorer (CVE-2019-1367)","The Internet Explorer installation on the remote host is missing security  updates. It is, therefore, affected by a remote code execution vulnerability in the way that the scripting engine handles objects in memory. The vulnerability could corrupt memory in such a way that an attacker could execute arbitrary code in the context of the current user. An attacker who successfully exploited the vulnerability could gain the same user rights as the current user.","Microsoft has released the following security update to address this issue:  \n  -KB4522007",,,,"38"
"235","129535",,"LibreOffice &lt; 6.2.7 / 6.3.x &lt; 6.3.1 Multiple Vulnerabilities (Windows)","The version of LibreOffice installed on the remote Windows host is prior to 6.2.7 or 6.3.x prior to 6.3.1. It is, therefore, affected by the following vulnerabilities:\n\n  - A directory traversal vulnerability resulting from a feature in LibreOffice which allows documents to     specify pre-installed macros that can be executed on various script events. Only scripts under the     &apos;share/Scripts/python&apos; and /user/Scripts/python&apos; sub-directories of the LibreOffice install should be     accessible. Previous protection to address CVE-2019-9852 to avoid a similar attack was added, however this     protection can be bypassed due to a flaw in how LibreOffice assembles the final script URL location. This     flaw can be exploited to allow scripts in arbitrary locations on the file system to be executed.     (CVE-2019-9854)\n\n  - An arbitrary script execution vulnerability caused by a flaw allowing event-based execution of Python     scripts within a document. Previous protection was added to address this flaw, however due to a Windows     8.3 path equivalence flaw, Windows systems are still vulnerable via Windows filename pseudonyms. Note,     LibreLogo must be installed for this vulnerability to be exploitable, however LibreLogo is frequently     bundled with LibreOffice. (CVE-2019-9855)\n\nNote that Nessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to LibreOffice version 6.2.7, 6.3.1 or later.",,,,"106"
"236","129719",,"KB4519998: Windows 10 Version 1607 and Windows Server 2016 October 2019 Security Update","The remote Windows host is missing security update 4519998.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A spoofing vulnerability exists when Microsoft Browsers     does not properly parse HTTP content. An attacker who     successfully exploited this vulnerability could     impersonate a user request by crafting HTTP queries. The     specially crafted website could either spoof content or     serve as a pivot to chain an attack with other     vulnerabilities in web services.  (CVE-2019-0608)\n\n  - A denial of service vulnerability exists when Windows     improperly handles hard links. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-1317)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-1343,     CVE-2019-1346, CVE-2019-1347)\n\n  - An elevation of privilege vulnerability exists when     Windows Error Reporting manager improperly handles a     process crash. An attacker who successfully exploited     this vulnerability could delete a targeted file leading     to an elevated status.  (CVE-2019-1342)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1238)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1371)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1334, CVE-2019-1345)\n\n  - A spoofing vulnerability exists when Transport Layer     Security (TLS) accesses non- Extended Master Secret     (EMS) sessions. An attacker who successfully exploited     this vulnerability may gain access to unauthorized     information.  (CVE-2019-1318)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-1060)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1358, CVE-2019-1359)\n\n  - A remote code execution vulnerability exists in the     Windows Remote Desktop Client when a user connects to a     malicious server. An attacker who successfully exploited     this vulnerability could execute arbitrary code on the     computer of the connecting client. An attacker could     then install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-1333)\n\n  - A tampering vulnerability exists in Microsoft Windows     when a man-in-the-middle attacker is able to     successfully bypass the NTLM MIC (Message Integrity     Check) protection. An attacker who successfully     exploited this vulnerability could gain the ability to     downgrade NTLM security features.  (CVE-2019-1166)\n\n  - An elevation of privilege vulnerability exists in the     Windows redirected drive buffering system (rdbss.sys)     when the operating system improperly handles specific     local calls within Windows 7 for 32-bit systems. When     this vulnerability is exploited within other versions of     Windows it can cause a denial of service, but not an     elevation of privilege.  (CVE-2019-1325)\n\n  - An elevation of privilege vulnerability exists when     Windows Error Reporting manager improperly handles hard     links. An attacker who successfully exploited this     vulnerability could overwrite a targeted file leading to     an elevated status.  (CVE-2019-1315, CVE-2019-1339)\n\n  - An elevation of privilege vulnerability exists when     Microsoft IIS Server fails to check the length of a     buffer prior to copying memory to it. An attacker who     successfully exploited this vulnerability can allow an     unprivileged function ran by the user to execute code in     the context of NT AUTHORITY\\system escaping the Sandbox.\n    The security update addresses the vulnerability by     correcting how Microsoft IIS Server sanitizes web     requests. (CVE-2019-1365)\n\n  - A spoofing vulnerability exists when Microsoft Browsers     improperly handle browser cookies. An attacker who     successfully exploited this vulnerability could trick a     browser into overwriting a secure cookie with an     insecure cookie. The insecure cookie could serve as a     pivot to chain an attack with other vulnerabilities in     web services.  (CVE-2019-1357)\n\n  - An elevation of privilege vulnerability exists in     Microsoft Windows Setup when it does not properly handle     privileges. An attacker who successfully exploited this     vulnerability could run processes in an elevated     context. An attacker could then install programs; view,     change or delete data.  (CVE-2019-1316)\n\n  - An information disclosure vulnerability exists in the     way that the Windows Code Integrity Module handles     objects in memory. An attacker who successfully     exploited this vulnerability could obtain information to     further compromise the users system.  (CVE-2019-1344)\n\n  - A remote code execution vulnerability exists when the     Windows Imaging API improperly handles objects in     memory. The vulnerability could corrupt memory in a way     that enables an attacker to execute arbitrary code in     the context of the current user.  (CVE-2019-1311)\n\n  - A denial of service vulnerability exists in Remote     Desktop Protocol (RDP) when an attacker connects to the     target system using RDP and sends specially crafted     requests. An attacker who successfully exploited this     vulnerability could cause the RDP service on the target     system to stop responding.  (CVE-2019-1326)\n\n  - An elevation of privilege vulnerability exists when     umpo.dll of the Power Service, improperly handles a     Registry Restore Key function. An attacker who     successfully exploited this vulnerability could delete a     targeted registry key leading to an elevated status.\n    (CVE-2019-1341)\n\n  - An elevation of privilege vulnerability exists in     Windows Error Reporting (WER) when WER handles and     executes files. The vulnerability could allow elevation     of privilege if an attacker can successfully exploit it.\n    An attacker who successfully exploited the vulnerability     could gain greater access to sensitive information and     system functionality.  (CVE-2019-1319)","Apply Cumulative Update KB4519998.",,,,"177"
"237","129722",,"KB4519990: Windows 8.1 and Windows Server 2012 R2 October 2019 Security Update","The remote Windows host is missing security update 4519990 or cumulative update 4520005. It is, therefore, affected by multiple vulnerabilities :\n\n  - A spoofing vulnerability exists when Microsoft Browsers     improperly handle browser cookies. An attacker who     successfully exploited this vulnerability could trick a     browser into overwriting a secure cookie with an     insecure cookie. The insecure cookie could serve as a     pivot to chain an attack with other vulnerabilities in     web services.  (CVE-2019-1357)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1358, CVE-2019-1359)\n\n  - A remote code execution vulnerability exists in the     Windows Remote Desktop Client when a user connects to a     malicious server. An attacker who successfully exploited     this vulnerability could execute arbitrary code on the     computer of the connecting client. An attacker could     then install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-1333)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1371)\n\n  - An information disclosure vulnerability exists in the     way that the Windows Code Integrity Module handles     objects in memory. An attacker who successfully     exploited this vulnerability could obtain information to     further compromise the users system.  (CVE-2019-1344)\n\n  - A remote code execution vulnerability exists when the     Windows Imaging API improperly handles objects in     memory. The vulnerability could corrupt memory in a way     that enables an attacker to execute arbitrary code in     the context of the current user.  (CVE-2019-1311)\n\n  - A spoofing vulnerability exists when Transport Layer     Security (TLS) accesses non- Extended Master Secret     (EMS) sessions. An attacker who successfully exploited     this vulnerability may gain access to unauthorized     information.  (CVE-2019-1318)\n\n  - An elevation of privilege vulnerability exists when     Windows Error Reporting manager improperly handles a     process crash. An attacker who successfully exploited     this vulnerability could delete a targeted file leading     to an elevated status.  (CVE-2019-1342)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1238)\n\n  - A denial of service vulnerability exists in Remote     Desktop Protocol (RDP) when an attacker connects to the     target system using RDP and sends specially crafted     requests. An attacker who successfully exploited this     vulnerability could cause the RDP service on the target     system to stop responding.  (CVE-2019-1326)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1334)\n\n  - A tampering vulnerability exists in Microsoft Windows     when a man-in-the-middle attacker is able to     successfully bypass the NTLM MIC (Message Integrity     Check) protection. An attacker who successfully     exploited this vulnerability could gain the ability to     downgrade NTLM security features.  (CVE-2019-1166)\n\n  - An elevation of privilege vulnerability exists in the     Windows redirected drive buffering system (rdbss.sys)     when the operating system improperly handles specific     local calls within Windows 7 for 32-bit systems. When     this vulnerability is exploited within other versions of     Windows it can cause a denial of service, but not an     elevation of privilege.  (CVE-2019-1325)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2019-1343,     CVE-2019-1346, CVE-2019-1347)\n\n  - An elevation of privilege vulnerability exists when     Windows Error Reporting manager improperly handles hard     links. An attacker who successfully exploited this     vulnerability could overwrite a targeted file leading to     an elevated status.  (CVE-2019-1315, CVE-2019-1339)\n\n  - An elevation of privilege vulnerability exists when     Microsoft IIS Server fails to check the length of a     buffer prior to copying memory to it. An attacker who     successfully exploited this vulnerability can allow an     unprivileged function ran by the user to execute code in     the context of NT AUTHORITY\\system escaping the Sandbox.\n    The security update addresses the vulnerability by     correcting how Microsoft IIS Server sanitizes web     requests. (CVE-2019-1365)\n\n  - A remote code execution vulnerability exists when the     Microsoft XML Core Services MSXML parser processes user     input. An attacker who successfully exploited the     vulnerability could run malicious code remotely to take     control of the users system.  (CVE-2019-1060)\n\n  - An elevation of privilege vulnerability exists in     Windows Error Reporting (WER) when WER handles and     executes files. The vulnerability could allow elevation     of privilege if an attacker can successfully exploit it.\n    An attacker who successfully exploited the vulnerability     could gain greater access to sensitive information and     system functionality.  (CVE-2019-1319)\n\n  - A spoofing vulnerability exists when Microsoft Browsers     does not properly parse HTTP content. An attacker who     successfully exploited this vulnerability could     impersonate a user request by crafting HTTP queries. The     specially crafted website could either spoof content or     serve as a pivot to chain an attack with other     vulnerabilities in web services.  (CVE-2019-0608)\n\n  - An elevation of privilege vulnerability exists when     umpo.dll of the Power Service, improperly handles a     Registry Restore Key function. An attacker who     successfully exploited this vulnerability could delete a     targeted registry key leading to an elevated status.\n    (CVE-2019-1341)","Apply Security Only update KB4519990 or Cumulative Update KB4520005.",,,,"1"
"238","129728",,"Security Updates for Internet Explorer (October 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1238)\n\n  - A spoofing vulnerability exists when Microsoft Browsers     improperly handle browser cookies. An attacker who     successfully exploited this vulnerability could trick a     browser into overwriting a secure cookie with an     insecure cookie. The insecure cookie could serve as a     pivot to chain an attack with other vulnerabilities in     web services.  (CVE-2019-1357)\n\n  - A spoofing vulnerability exists when Microsoft Browsers     does not properly parse HTTP content. An attacker who     successfully exploited this vulnerability could     impersonate a user request by crafting HTTP queries. The     specially crafted website could either spoof content or     serve as a pivot to chain an attack with other     vulnerabilities in web services.  (CVE-2019-0608)\n\n  - A remote code execution vulnerability exists when     Internet Explorer improperly accesses objects in memory.\n    The vulnerability could corrupt memory in such a way     that an attacker could execute arbitrary code in the     context of the current user. An attacker who     successfully exploited the vulnerability could gain the     same user rights as the current user.  (CVE-2019-1371)","Microsoft has released the following security updates to address this issue:  \n  -KB4519974\n  -KB4519976\n  -KB4520002\n  -KB4520005\n  -KB4520007",,,,"212"
"239","130006",,"Oracle Solaris Critical Patch Update : oct2019_SRU11_3_36_15_0","This Solaris system is missing necessary patches to address critical security updates :\n\n  - Vulnerability in the Oracle Solaris product of Oracle     Systems (component: Filesystem). Supported versions that     are affected are 10 and 11. Difficult to exploit     vulnerability allows low privileged attacker with logon     to the infrastructure where Oracle Solaris executes to     compromise Oracle Solaris. While the vulnerability is in     Oracle Solaris, attacks may significantly impact     additional products. Successful attacks of this     vulnerability can result in unauthorized update, insert     or delete access to some of Oracle Solaris accessible     data as well as unauthorized read access to a subset of     Oracle Solaris accessible data and unauthorized ability     to cause a partial denial of service (partial DOS) of     Oracle Solaris. (CVE-2019-2765)\n\n  - Vulnerability in the Oracle Solaris product of Oracle     Systems (component: XScreenSaver). The supported version     that is affected is 11. Easily exploitable vulnerability     allows low privileged attacker with logon to the     infrastructure where Oracle Solaris executes to     compromise Oracle Solaris. While the vulnerability is in     Oracle Solaris, attacks may significantly impact     additional products. Successful attacks of this     vulnerability can result in takeover of Oracle Solaris.\n    (CVE-2019-3010)","Install the oct2019 CPU from the Oracle support website.",,,,"241"
"240","130011",,"Oracle Java SE 1.7.0_241 / 1.8.0_231 / 1.11.0_5 / 1.13.0_1 Multiple Vulnerabilities (Oct 2019 CPU) (Windows)","The version of Oracle (formerly Sun) Java SE or Java for Business installed on the remote host is prior to 7 Update 241, 8 Update 231, 11 Update 5, or 13 Update 1. It is, therefore, affected by multiple vulnerabilities related to the following components :\n\n  - 2D\n  - Libraries\n  - Kerberos\n  - Networking\n  - JavaFX\n  - Hotspot\n  - Scripting\n  - Javadoc\n  - Deployment\n  - Concurrency\n  - JAXP\n  - Serialization\n  - Security\n\nNessus has not tested for these issues but has instead relied only on the application&apos;s self-reported version number.","Upgrade to Oracle JDK / JRE 13 Update 1, 11 Update 5, 8 Update 231 / 7 Update 241 or later. If necessary, remove any affected versions.",,,,"158"
"241","130906",,"KB4525236: Windows 10 Version 1607 and Windows Server 2016 November 2019 Security Update","The remote Windows host is missing security update 4525236. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V Network Switch on a host server fails     to properly validate input from an authenticated user     on a guest operating system.  (CVE-2019-0719)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2019-1389, CVE-2019-1397)\n\n  - A security feature bypass vulnerability exists when     Windows Netlogon improperly handles a secure     communications channel. An attacker who successfully     exploited the vulnerability could downgrade aspects of     the connection allowing for further modification of the     transmission.  (CVE-2019-1424)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-11135)\n\n  - An information disclosure vulnerability exists in the     way Windows Error Reporting (WER) handles objects in     memory. An attacker who successfully exploited this     vulnerability could obtain information to further     compromise the users system.  (CVE-2019-1374)\n\n  - An elevation of privilege vulnerability exists in the     Windows Certificate Dialog when it does not properly     enforce user privileges. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1388)\n\n  - A local elevation of privilege vulnerability exists in     how splwow64.exe handles certain calls. An attacker who     successfully exploited the vulnerability could elevate     privileges on an affected system from low-integrity to     medium-integrity. This vulnerability by itself does not     allow arbitrary code execution; however, it could allow     arbitrary code to be run if the attacker uses it in     combination with another vulnerability (such as a remote     code execution vulnerability or another elevation of     privilege vulnerability) that is capable of leveraging     the elevated privileges when code execution is     attempted. The security update addresses the     vulnerability by ensuring splwow64.exe properly handles     these calls.. (CVE-2019-1380)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1429)\n\n  - A security feature bypass vulnerability exists where a     NETLOGON message is able to obtain the session key and     sign messages.  (CVE-2019-1384)\n\n  - An elevation of privilege vulnerability exists when the     Windows Graphics Component improperly handles objects in     memory. An attacker who successfully exploited this     vulnerability could run processes in an elevated     context.  (CVE-2019-1407, CVE-2019-1433, CVE-2019-1435,     CVE-2019-1438)\n\n  - An information vulnerability exists when Windows Modules     Installer Service improperly discloses file information.\n    Successful exploitation of the vulnerability could allow     the attacker to read the contents of a log file on disk.\n    (CVE-2019-1418)\n\n  - An elevation of privilege vulnerability exists when the     Windows User Profile Service (ProfSvc) improperly     handles symlinks. An attacker who successfully exploited     this vulnerability could delete files and folders in an     elevated context.  (CVE-2019-1454)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2019-0712)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2018-12207,     CVE-2019-1391)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1393, CVE-2019-1394,     CVE-2019-1395, CVE-2019-1396, CVE-2019-1408)\n\n  - An elevation of privilege vulnerability exists in     Windows Installer because of the way Windows Installer     handles certain filesystem operations.  (CVE-2019-1415)\n\n  - An information disclosure vulnerability exists when     DirectWrite improperly discloses the contents of its     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how DirectWrite handles objects in memory.\n    (CVE-2019-1411)\n\n  - An information disclosure vulnerability exists when the     Windows Servicing Stack allows access to unprivileged     file locations. An attacker who successfully exploited     the vulnerability could potentially access unauthorized     files.  (CVE-2019-1381)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1390)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1436)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1439)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1406)\n\n  - An elevation of privilege vulnerability exists when the     Windows Universal Plug and Play (UPnP) service     improperly allows COM object creation. An attacker who     successfully exploited this vulnerability could run     arbitrary code with elevated system privileges. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights.  (CVE-2019-1405)\n\n  - A remote code execution vulnerability exists in     Microsoft Windows when the Windows Adobe Type Manager     Library improperly handles specially crafted OpenType     fonts. For all systems except Windows 10, an attacker     who successfully exploited the vulnerability could     execute code remotely. For systems running Windows 10,     an attacker who successfully exploited the vulnerability     could execute code in an AppContainer sandbox context     with limited privileges and capabilities. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    There are multiple ways an attacker could exploit the     vulnerability, such as by either convincing a user to     open a specially crafted document, or by convincing a     user to visit a webpage that contains specially crafted     embedded OpenType fonts. The update addresses the     vulnerability by correcting how the Windows Adobe Type     Manager Library handles OpenType fonts. (CVE-2019-1419,     CVE-2019-1456)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-1399)\n\n  - An elevation of privilege vulnerability exists when the     Windows Data Sharing Service improperly handles file     operations. An attacker who successfully exploited this     vulnerability could run processes in an elevated     context. An attacker could exploit this vulnerability by     running a specially crafted application on the victim     system. The update addresses the vulnerability by     correcting the way the Windows Data Sharing Service     handles file operations. (CVE-2019-1383, CVE-2019-1417)\n\n  - An elevation of privilege vulnerability exists when     ActiveX Installer service may allow access to files     without proper authentication. An attacker who     successfully exploited the vulnerability could     potentially access unauthorized files.  (CVE-2019-1382)\n\n  - An information disclosure vulnerability exists when the     Windows Remote Procedure Call (RPC) runtime improperly     initializes objects in memory. An attacker who     successfully exploited this vulnerability could obtain     information to further compromise the users system.\n    (CVE-2019-1409)\n\n  - An elevation of privilege vulnerability exists in the     way that the dssvc.dll handles file creation allowing     for a file overwrite or creation in a secured location.\n    An attacker who successfully exploited the vulnerability     could execute code with elevated permissions.\n    (CVE-2019-1420)\n\n  - An elevation of privilege vulnerability exists in the     way that the iphlpsvc.dll handles file creation allowing     for a file overwrite. An attacker who successfully     exploited the vulnerability could execute code with     elevated permissions.  (CVE-2019-1422)","Apply Cumulative Update KB4525236.",,,,"298"
"242","130909",,"KB4525250: Windows 8.1 and Windows Server 2012 R2 November 2019 Security Update","The remote Windows host is missing security update 4525250 or cumulative update 4525243. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V Network Switch on a host server fails     to properly validate input from an authenticated user     on a guest operating system. (CVE-2019-0719)\n\n  - A remote code execution vulnerability exists when     Windows Hyper-V on a host server fails to properly     validate input from an authenticated user on a guest     operating system.  (CVE-2019-1389, CVE-2019-1397)\n\n  - A security feature bypass vulnerability exists when     Windows Netlogon improperly handles a secure     communications channel. An attacker who successfully     exploited the vulnerability could downgrade aspects of     the connection allowing for further modification of the     transmission.  (CVE-2019-1424)\n\n  - An information disclosure vulnerability exists when     DirectWrite improperly discloses the contents of its     memory. An attacker who successfully exploited the     vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how DirectWrite handles objects in memory.\n    (CVE-2019-1411, CVE-2019-1432)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-11135)\n\n  - An elevation of privilege vulnerability exists in the     Windows Certificate Dialog when it does not properly     enforce user privileges. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1388)\n\n  - A local elevation of privilege vulnerability exists in     how splwow64.exe handles certain calls. An attacker who     successfully exploited the vulnerability could elevate     privileges on an affected system from low-integrity to     medium-integrity. This vulnerability by itself does not     allow arbitrary code execution; however, it could allow     arbitrary code to be run if the attacker uses it in     combination with another vulnerability (such as a remote     code execution vulnerability or another elevation of     privilege vulnerability) that is capable of leveraging     the elevated privileges when code execution is     attempted. The security update addresses the     vulnerability by ensuring splwow64.exe properly handles     these calls.. (CVE-2019-1380)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1429)\n\n  - A security feature bypass vulnerability exists where a     NETLOGON message is able to obtain the session key and     sign messages.  (CVE-2019-1384)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Windows kernel-mode driver fails to     properly handle objects in memory. An attacker who     successfully exploited this vulnerability could run     arbitrary code in kernel mode. An attacker could then     install programs; view, change, or delete data; or     create new accounts with full user rights.\n    (CVE-2019-1434)\n\n  - An information vulnerability exists when Windows Modules     Installer Service improperly discloses file information.\n    Successful exploitation of the vulnerability could allow     the attacker to read the contents of a log file on disk.\n    (CVE-2019-1418)\n\n  - An elevation of privilege vulnerability exists when the     Windows User Profile Service (ProfSvc) improperly     handles symlinks. An attacker who successfully exploited     this vulnerability could delete files and folders in an     elevated context.  (CVE-2019-1454)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V Network Switch on a host server fails to     properly validate input from a privileged user on a     guest operating system. An attacker who successfully     exploited the vulnerability could cause the host server     to crash.  (CVE-2019-0712)\n\n  - A denial of service vulnerability exists when Windows     improperly handles objects in memory. An attacker who     successfully exploited the vulnerability could cause a     target system to stop responding.  (CVE-2018-12207,     CVE-2019-1391)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1393, CVE-2019-1394,     CVE-2019-1395, CVE-2019-1396, CVE-2019-1408)\n\n  - An elevation of privilege vulnerability exists in     Windows Installer because of the way Windows Installer     handles certain filesystem operations.  (CVE-2019-1415)\n\n  - An elevation of privilege vulnerability exists when the     Windows Graphics Component improperly handles objects in     memory. An attacker who successfully exploited this     vulnerability could run processes in an elevated     context.  (CVE-2019-1407, CVE-2019-1433, CVE-2019-1435,     CVE-2019-1438)\n\n  - An information disclosure vulnerability exists when the     Windows Servicing Stack allows access to unprivileged     file locations. An attacker who successfully exploited     the vulnerability could potentially access unauthorized     files.  (CVE-2019-1381)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1390)\n\n  - An information disclosure vulnerability exists in     Windows Adobe Type Manager Font Driver (ATMFD.dll) when     it fails to properly handle objects in memory. An     attacker who successfully exploited this vulnerability     could potentially read data that was not intended to be     disclosed. Note that this vulnerability would not allow     an attacker to execute code or to elevate their user     rights directly, but it could be used to obtain     information that could be used to try to further     compromise the affected system.  (CVE-2019-1412)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1439)\n\n  - A remote code execution vulnerability exists when the     Windows Jet Database Engine improperly handles objects     in memory. An attacker who successfully exploited this     vulnerability could execute arbitrary code on a victim     system. An attacker could exploit this vulnerability by     enticing a victim to open a specially crafted file. The     update addresses the vulnerability by correcting the way     the Windows Jet Database Engine handles objects in     memory. (CVE-2019-1406)\n\n  - An elevation of privilege vulnerability exists when the     Windows Universal Plug and Play (UPnP) service     improperly allows COM object creation. An attacker who     successfully exploited this vulnerability could run     arbitrary code with elevated system privileges. An     attacker could then install programs; view, change, or     delete data; or create new accounts with full user     rights.  (CVE-2019-1405)\n\n  - An elevation of privilege vulnerability exists when the     Windows kernel fails to properly handle objects in     memory. An attacker who successfully exploited this     vulnerability could run arbitrary code in kernel mode.\n    An attacker could then install programs; view, change,     or delete data; or create new accounts with full user     rights.  (CVE-2019-1392)\n\n  - A remote code execution vulnerability exists in     Microsoft Windows when the Windows Adobe Type Manager     Library improperly handles specially crafted OpenType     fonts. For all systems except Windows 10, an attacker     who successfully exploited the vulnerability could     execute code remotely. For systems running Windows 10,     an attacker who successfully exploited the vulnerability     could execute code in an AppContainer sandbox context     with limited privileges and capabilities. An attacker     could then install programs; view, change, or delete     data; or create new accounts with full user rights.\n    There are multiple ways an attacker could exploit the     vulnerability, such as by either convincing a user to     open a specially crafted document, or by convincing a     user to visit a webpage that contains specially crafted     embedded OpenType fonts. The update addresses the     vulnerability by correcting how the Windows Adobe Type     Manager Library handles OpenType fonts. (CVE-2019-1419,     CVE-2019-1456)\n\n  - A denial of service vulnerability exists when Microsoft     Hyper-V on a host server fails to properly validate     input from a privileged user on a guest operating     system.  (CVE-2019-1399)\n\n  - An elevation of privilege vulnerability exists when     ActiveX Installer service may allow access to files     without proper authentication. An attacker who     successfully exploited the vulnerability could     potentially access unauthorized files.  (CVE-2019-1382)\n\n  - An information disclosure vulnerability exists when the     Windows Remote Procedure Call (RPC) runtime improperly     initializes objects in memory. An attacker who     successfully exploited this vulnerability could obtain     information to further compromise the users system.\n    (CVE-2019-1409)\n\n  - An elevation of privilege vulnerability exists in the     way that the iphlpsvc.dll handles file creation allowing     for a file overwrite. An attacker who successfully     exploited the vulnerability could execute code with     elevated permissions.  (CVE-2019-1422)","Apply Security Only update KB4525250 or Cumulative Update KB4525243.",,,,"80"
"243","130912",,"Security Updates for Internet Explorer (November 2019)","The Internet Explorer installation on the remote host is missing security updates. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1390)\n\n  - A remote code execution vulnerability exists in the way     that the scripting engine handles objects in memory in     Internet Explorer. The vulnerability could corrupt     memory in such a way that an attacker could execute     arbitrary code in the context of the current user. An     attacker who successfully exploited the vulnerability     could gain the same user rights as the current user.\n    (CVE-2019-1429)","Microsoft has released the following security updates to address this issue:  \n  -KB4525243\n  -KB4525234\n  -KB4525106\n  -KB4525235\n  -KB4525246",,,,"68"
"244","131927",,"KB4530689: Windows 10 Version 1607 and Windows Server 2016 December 2019 Security Update","The remote Windows host is missing security update 4530689.\nIt is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Microsoft Windows OLE fails to properly validate user     input. An attacker could exploit the vulnerability to     execute malicious code.  (CVE-2019-1484)\n\n  - A denial of service vulnerability exists in Remote     Desktop Protocol (RDP) when an attacker connects to the     target system using RDP and sends specially crafted     requests. An attacker who successfully exploited this     vulnerability could cause the RDP service on the target     system to stop responding.  (CVE-2019-1453)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1472, CVE-2019-1474)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-1468)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1465, CVE-2019-1466, CVE-2019-1467)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1469)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1458)\n\n  - An elevation of privilege vulnerability exists when     Windows AppX Deployment Service (AppXSVC) improperly     handles hard links. An attacker who successfully     exploited this vulnerability could run processes in an     elevated context. An attacker could then install     programs; view, change or delete data.  (CVE-2019-1476)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-1470)\n\n  - A security feature bypass vulnerability exists when     Microsoft Defender improperly handles specific buffers.\n    An attacker could exploit the vulnerability to trigger     warnings and false positives when no threat is present.\n    (CVE-2019-1488)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1485)","Apply Cumulative Update KB4530689.",,,,"293"
"245","131930",,"KB4530730: Windows 8.1 and Windows Server 2012 R2 December 2019 Security Update","The remote Windows host is missing security update 4530730 or cumulative update 4530702. It is, therefore, affected by multiple vulnerabilities :\n\n  - A remote code execution vulnerability exists when     Microsoft Windows OLE fails to properly validate user     input. An attacker could exploit the vulnerability to     execute malicious code.  (CVE-2019-1484)\n\n  - A denial of service vulnerability exists in Remote     Desktop Protocol (RDP) when an attacker connects to the     target system using RDP and sends specially crafted     requests. An attacker who successfully exploited this     vulnerability could cause the RDP service on the target     system to stop responding.  (CVE-2019-1453)\n\n  - An information disclosure vulnerability exists when the     Windows kernel improperly handles objects in memory. An     attacker who successfully exploited this vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1474)\n\n  - A remote code execution vulnerability exists when the     Windows font library improperly handles specially     crafted embedded fonts. An attacker who successfully     exploited this vulnerability could take control of the     affected system. An attacker could then install     programs; view, change, or delete data; or create new     accounts with full user rights.  (CVE-2019-1468)\n\n  - An information disclosure vulnerability exists when the     Windows GDI component improperly discloses the contents     of its memory. An attacker who successfully exploited     the vulnerability could obtain information to further     compromise the users system. There are multiple ways an     attacker could exploit the vulnerability, such as by     convincing a user to open a specially crafted document,     or by convincing a user to visit an untrusted webpage.\n    The security update addresses the vulnerability by     correcting how the Windows GDI component handles objects     in memory. (CVE-2019-1465, CVE-2019-1466, CVE-2019-1467)\n\n  - An information disclosure vulnerability exists when the     win32k component improperly provides kernel information.\n    An attacker who successfully exploited the vulnerability     could obtain information to further compromise the users     system.  (CVE-2019-1469)\n\n  - An elevation of privilege vulnerability exists in     Windows when the Win32k component fails to properly     handle objects in memory. An attacker who successfully     exploited this vulnerability could run arbitrary code in     kernel mode. An attacker could then install programs;\n    view, change, or delete data; or create new accounts     with full user rights.  (CVE-2019-1458)\n\n  - An information disclosure vulnerability exists when     Windows Hyper-V on a host operating system fails to     properly validate input from an authenticated user on a     guest operating system.  (CVE-2019-1470)\n\n  - A security feature bypass vulnerability exists when     Microsoft Defender improperly handles specific buffers.\n    An attacker could exploit the vulnerability to trigger     warnings and false positives when no threat is present.\n    (CVE-2019-1488)\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1485)","Apply Security Only update KB4530730 or Cumulative Update KB4530702.",,,,"193"
"246","131936",,"Security Updates for Internet Explorer (December 2019)","The Internet Explorer installation on the remote host is missing a security update. It is, therefore, affected by the following vulnerability :\n\n  - A remote code execution vulnerability exists in the way     that the VBScript engine handles objects in memory. The     vulnerability could corrupt memory in such a way that an     attacker could execute arbitrary code in the context of     the current user. An attacker who successfully exploited     the vulnerability could gain the same user rights as the     current user.  (CVE-2019-1485)","Microsoft has released the following security updates to address this issue:  \n  -KB4530677\n  -KB4530691\n  -KB4530695\n  -KB4530702\n  -KB4530734",,,,"118"
"247","132101",,"Windows Speculative Execution Configuration Check","The remote host has not properly mitigated a series of known speculative execution vulnerabilities. It, therefore, may be affected by :\n  - Branch Target Injection (BTI) (CVE-2017-5715)\n  - Bounds Check Bypass (BCB) (CVE-2017-5753)\n  - Rogue Data Cache Load (RDCL) (CVE-2017-5754)\n  - Rogue System Register Read (RSRE) (CVE-2018-3640)\n  - Speculative Store Bypass (SSB) (CVE-2018-3639)\n  - L1 Terminal Fault (L1TF) (CVE-2018-3615, CVE-2018-3620, CVE-2018-3646)\n  - Microarchitectural Data Sampling Uncacheable Memory (MDSUM) (CVE-2019-11091)\n  - Microarchitectural Store Buffer Data Sampling (MSBDS) (CVE-2018-12126)\n  - Microarchitectural Load Port Data Sampling (MLPDS) (CVE-2018-12127)\n  - Microarchitectural Fill Buffer Data Sampling (MFBDS) (CVE-2018-12130)\n  - TSX Asynchronous Abort (TAA) (CVE-2019-11135)","Apply vendor recommended settings.",,,,"30"
"248",,"1048832","OS command injection","<p>Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.</p>\n<p>OS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application's own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.</p>","<p>If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks: </p>\n<ul>\n  <li>The user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.</li>\n  <li>The application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.</li>\n</ul>",,,,"267"
"249",,"1049104","SQL injection (second order)","<p>SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>A wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server. </p>\n \n<p>Second-order SQL injection arises when user-supplied data is stored by the application and later incorporated into SQL queries in an unsafe way. To detect the vulnerability, it is normally necessary to submit suitable data in one location, and then use some other application function that processes the data in an unsafe way.</p>","<p>The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>\n<p>You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>\n<ul>\n  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>\n  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>\n</ul>",,,,"81"
"250",,"1049216","ASP.NET tracing enabled","<p>ASP.NET tracing is a debugging feature that is designed for use during development to help troubleshoot problems. It discloses sensitive information to users, and if enabled in production contexts may present a serious security threat.</p>\n<p>Application-level tracing enables any user to retrieve full details about recent requests to the application, including those of other users. This information typically includes session tokens and request parameters, which may enable an attacker to compromise other users and even take control of the entire application.</p>\n<p>Page-level tracing returns the same information, but relating only to the current request. This may still contain sensitive data in session and server variables that would be of use to an attacker.</p>","<p>To disable tracing, open the Web.config file for the application, and find the &lt;trace&gt; element within the &lt;system.web&gt; section. Either set the enabled attribute to ""false"" (to disable tracing) or set the localOnly attribute to ""true"" (to enable tracing only on the server itself).</p>\n<p>Note that even with tracing disabled in this way, it is possible for individual pages to turn on page-level tracing either within the Page directive of the ASP.NET page, or programmatically through application code. If you observe tracing output only on some application pages, you should review the page source and the code behind, to find the reason why tracing is occurring.</p>\n<p>It is strongly recommended that you refer to your platform's documentation relating to this issue, and do not rely solely on the above remediation.</p>",,,,"20"
"251",,"1049344","File path traversal","<p>File path traversal vulnerabilities arise when user-controllable data is used within a filesystem operation in an unsafe manner. Typically, a user-supplied filename is appended to a directory prefix in order to read or write the contents of a file. If vulnerable, an attacker can supply path traversal sequences (using dot-dot-slash characters) to break out of the intended directory and read or write files elsewhere on the filesystem.</p>\n<p>This is typically a very serious vulnerability, enabling an attacker to access sensitive files containing configuration data, passwords, database records, log data, source code, and program scripts and binaries. </p>","<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be passed to filesystem operations. This can normally be achieved by referencing known files via an index number rather than their name, and using application-generated filenames to save user-supplied file content.</p>\n<p>If it is considered unavoidable to pass user-controllable data to a filesystem operation, three layers of defense can be employed to prevent path traversal attacks: </p>\n<ul><li>User-controllable data should be strictly validated before being passed to any filesystem operation. In particular, input containing dot-dot sequences should be blocked.</li><li>After validating user input, the application can use a suitable filesystem API to verify that the file to be accessed is actually located within the base directory used by the application. In Java, this can be achieved by instantiating a java.io.File object using the user-supplied filename and then calling the getCanonicalPath method on this object. If the string returned by this method does not begin with the name of the start directory, then the user has somehow bypassed the application's input filters, and the request should be rejected. In ASP.NET, the same check can be performed by passing the user-supplied filename to the System.Io.Path.GetFullPath method and checking the returned string in the same way as described for Java.</li><li>The directory used to store files that are accessed using user-controllable data can be located on a separate logical volume to other sensitive application and operating system files, so that these cannot be reached via path traversal attacks. In Unix-based systems, this can be achieved using a chrooted filesystem; on Windows, this can be achieved by mounting the base directory as a new logical drive and using the associated drive letter to access its contents.</li></ul>",,,,"270"
"252",,"1049600","XML external entity injection","<p>XML external entity (XXE) injection vulnerabilities arise when applications process user-supplied XML documents without disabling references to external resources. XML parsers typically support external references by default, even though they are rarely required by applications during normal usage.</p>\n<p>External entities can reference files on the parser's filesystem; exploiting this feature may allow retrieval of arbitrary files, or denial of service by causing the server to read from a file such as /dev/random.</p>\n<p>External entities can often also reference network resources via the HTTP protocol handler. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. \n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.\n</p>","<p>Parsers that are used to process XML from untrusted sources should be configured to disable processing of all external resources. This is usually possible, and will prevent a number of related attacks.&nbsp;You should consult the documentation for your XML parsing library to determine how to achieve this.</p>\n\n<p>XML external entity injection makes use of the DOCTYPE tag to define the injected entity. It may also be possible to disable the DOCTYPE tag or use input validation to block input containing it.</p>",,,,"235"
"253",,"1049856","LDAP injection","<p>LDAP injection arises when user-controllable data is copied in an unsafe way into an LDAP query that is performed by the application. If an attacker can inject LDAP metacharacters into the query, then they can interfere with the query's logic. Depending on the function for which the query is used, the attacker may be able to retrieve sensitive data to which they are not authorized, or subvert the application's logic to perform some unauthorized action.</p>\n<p>Note that automated difference-based tests for LDAP injection flaws can often be unreliable and are prone to false positive results. Scanner results should be manually reviewed to confirm whether a vulnerability is actually present. </p>","<p>If possible, applications should avoid copying user-controllable data into LDAP queries. If this is unavoidable, then the data should be strictly validated to prevent LDAP injection attacks. In most situations, it will be appropriate to allow only short alphanumeric strings to be copied into queries, and any other input should be rejected. At a minimum, input containing any LDAP metacharacters should be rejected; characters that should be blocked include ( ) ; , * | & = and whitespace.</p>",,,,"273"
"254",,"1050112","XPath injection","<p>XPath injection vulnerabilities arise when user-controllable data is incorporated into XPath queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.</p>\n<p>Depending on the purpose for which the vulnerable query is being used, an attacker may be able to exploit an XPath injection flaw to read sensitive application data or interfere with application logic. </p>","<p>User input should be strictly validated before being \n  incorporated into XPath queries. \n  In most cases, it will be appropriate to accept input containing only short \n  alphanumeric strings. At the very least, input containing any XPath metacharacters \n  such as "" ' / @ = * [ ] ( and ) should be rejected.</p>",,,,"233"
"255",,"1050368","XML injection","<p>XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML metacharacters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data.</p>\n<p>This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose that the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable. </p>","<p>The application should validate or sanitize user input before incorporating it into an XML document or SOAP message. It may be possible to block any input containing XML metacharacters such as &lt; and &gt;. Alternatively, these characters can be replaced with the corresponding entities: &amp;lt; and &amp;gt;.</p>",,,,"297"
"256",,"1050624","ASP.NET debugging enabled","<p>ASP.NET allows remote debugging of web applications, if configured to do so. By default, debugging is subject to access control and requires platform-level authentication. </p>\n<p>If an attacker can successfully start a remote debugging session, this is likely to disclose sensitive information about the web application and supporting infrastructure that may be valuable in formulating targeted attacks against the system. </p>","<p>To disable debugging, open the Web.config file for the application, and find the &lt;compilation&gt; element within the &lt;system.web&gt; section. Set the debug attribute to ""false"". Note that it is also possible to enable debugging for all applications within the Machine.config file. You should confirm that the debug attribute in the &lt;compilation&gt; element has not been set to ""true"" within the Machine.config file.</p>\n<p>It is strongly recommended that you refer to your platform's documentation relating to this issue, and do not rely solely on the above remediation. </p>",,,,"107"
"257",,"1050880","HTTP PUT method is enabled","<p>The HTTP PUT method is normally used to upload data that is saved on the server at a user-supplied URL. If enabled, an attacker may be able to place arbitrary, and potentially malicious, content into the application. Depending on the server's configuration, this may lead to compromise of other users (by uploading client-executable scripts), compromise of the server (by uploading server-executable code), or other attacks.</p>","<p>Refer to your platform's documentation to determine how to disable the HTTP PUT method on the server.</p>",,,,"165"
"258",,"1051136","Out-of-band resource load (HTTP)","<p>Out-of-band resource load arises when it is possible to induce an application to fetch content from an arbitrary external location, and incorporate that content into the application's own response(s). The ability to trigger arbitrary out-of-band resource load does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. \nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\n<p>The ability to request and retrieve web content from other systems can allow the application server to be used as a two-way attack proxy. \n  By submitting suitable payloads, an attacker can cause the application server to attack, or retrieve content from, other systems that it can interact with. \n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers.</p>\n<p>Additionally, the application's processing of web content that is retrieved from arbitrary URLs exposes some important and non-conventional attack surface. \n  An attacker can deploy a web server that returns malicious content, and then induce the application to retrieve and process that content. \n  This processing might give rise to the types of input-based vulnerabilities that are normally found when unexpected input is submitted directly in requests to the application. \n  The out-of-band attack surface that the application exposes should be thoroughly tested for these types of vulnerabilities. </p>","<p>You should review the purpose and intended use of the relevant application functionality, and determine whether the ability to trigger arbitrary out-of-band resource load is intended behavior. \n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter. \nYou should also ensure that content retrieved from other systems is processed in a safe manner, with the usual precautions that are applicable when processing input from direct incoming web requests.</p>\n<p>If the ability to trigger arbitrary out-of-band resource load is not intended behavior, then you should implement a whitelist of permitted URLs, and block requests to URLs that do not appear on this whitelist.</p>",,,,"23"
"259",,"1051392","File path manipulation","<p>File path manipulation vulnerabilities arise when user-controllable data is placed into a file or URL path that is used on the server to access local resources, which may be within or outside the web root. If vulnerable, an attacker can modify the file path to access different resources, which may contain sensitive information. Even where an attack is constrained within the web root, it is often possible to retrieve items that are normally protected from direct access, such as application configuration files, the source code for server-executable scripts, or files with extensions that the web server is not configured to serve directly.</p>","<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be placed into file or URL paths in order to access local resources on the server. This can normally be achieved by referencing known files via an index number rather than their name.</p>\n<p>If it is considered unavoidable to place user data into file or URL paths, the data should be strictly validated against a whitelist of accepted values. Note that when accessing resources within the web root, simply blocking input containing file path traversal sequences (such as dot-dot-slash) is not always sufficient to prevent retrieval of sensitive information, because some protected items may be accessible at the original path without using any traversal sequences. </p>",,,,"206"
"260",,"1051648","PHP code injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"261",,"1051904","Server-side JavaScript code injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"262",,"1052160","Perl code injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"263",,"1052416","Ruby code injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"264",,"1052432","Python code injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"265",,"1052448","Expression Language injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"266",,"1052672","Unidentified code injection","<p>Server-side code injection vulnerabilities arise when an application \n  incorporates user-controllable data into a string that is dynamically evaluated by \n  a code interpreter. If the user data is not strictly validated, an attacker \n  can use crafted input to modify the code to be executed, and inject \n  arbitrary code that will be executed by the server.</p>\n<p>Server-side code injection vulnerabilities are usually very serious and lead to \n  complete compromise of the application's \n  data and functionality, and often of the server that is hosting the application.\n  It may also be possible to use the server as a platform for further attacks against other systems.</p>","<p>Whenever possible, applications should avoid incorporating user-controllable data into \n  dynamically evaluated code. In almost every situation, there are safer alternative \n  methods of implementing application functions, which cannot be \n  manipulated to inject arbitrary code into the server's processing.</p>\n<p>If it is considered unavoidable to incorporate user-supplied data into \n  dynamically evaluated code, then the data should be strictly validated. Ideally, a whitelist of specific accepted \n  values should be used. Otherwise, only short alphanumeric strings should be accepted. \n  Input containing any other data, including any conceivable code metacharacters, should be rejected. </p>",,,,"109"
"267",,"1052800","Server-side template injection","<p> Server-side template injection occurs when user input is unsafely embedded into a server-side template, allowing users to inject template directives. Using malicious template directives, an attacker may be able to execute arbitrary code and take full control of the web server. </p>\n<p>The severity of this issue varies depending on the type of template engine being used. Template engines range from being trivial to almost impossible to exploit. The following  steps should be used when attempting to develop an exploit: </p><ul>\n  <li>Identify the type of template engine being used.</li>\n  <li>Review its documentation for basic syntax, security considerations, and built-in methods and variables.</li>\n  <li>Explore the template environment and map the attack surface.</li>\n<li>Audit every exposed object and method.</li>\n</ul>\n<p>\nTemplate injection vulnerabilities can be very serious and can lead to complete compromise of the application's data and functionality, and often of the server that is hosting the application. It may also be possible to use the server as a platform for further attacks against other systems. On the other hand, some template injection vulnerabilities may pose no significant security risk.\n</p>","<p>Wherever possible, avoid creating templates from user input. Passing user input into templates as parameters is normally a safe alternative.</p>\n<p>If supporting user-submitted templates is a business requirement, consider using a simple logic-less template engine such as Mustache or one provided by the native language like Python's Template. If this is not an option, review the chosen template engine's documentation for hardening advice, and consider rendering the template within a sandboxed execution environment.</p>",,,,"7"
"268",,"1052928","SSI injection","<p>Server-Side Include (SSI) injection vulnerabilities arise when an application incorporates user-controllable data into response that is then parsed for Server-Side Include directives. If the data is not strictly validated, an attacker can modify or inject directives to carry out malicious actions.</p>\n<p>SSI injection vulnerabilities can typically be exploited to inject arbitrary content, including JavaScript, into the application's response, with the same impact as cross-site scripting. Depending on the server configuration, it may also be possible to read protected files, or perform arbitrary code execution on the server, with the same impact as OS command injection. </p>","<p>If possible, applications should avoid incorporating user-controllable data into pages that are processed for SSI directives. In almost every situation, there are safer alternative methods of implementing the required functionality. If this is not considered feasible, then the data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable SSI metacharacter, should be rejected.</p>",,,,"275"
"269",,"2097408","Cross-site scripting (stored)","<p>Stored cross-site scripting vulnerabilities arise when user input is stored and later embedded into the application's responses in an unsafe way. An attacker can use the vulnerability to inject malicious JavaScript code into the application, which will execute within the browser of any user who views the relevant application content.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing victims' session tokens or login credentials, performing arbitrary actions on their behalf, and logging their keystrokes.</p>\n<p>Methods for introducing malicious content include any function where request parameters or headers are processed and stored by the application, and any out-of-band channel whereby data can be introduced into the application's processing space (for example, email messages sent over SMTP that are ultimately rendered within a web mail application).</p>\n<p>Stored cross-site scripting flaws are typically more serious than reflected vulnerabilities because they do not require a separate delivery mechanism in order to reach target users, and are not hindered by web browsers' XSS filters. Depending on the affected page, ordinary users may be exploited during normal use of the application. In some situations this can be used to create web application worms that spread exponentially and ultimately exploit all active users.</p>\n<p>Note that automated detection of stored cross-site scripting vulnerabilities cannot reliably determine whether attacks that are persisted within the application can be accessed by any other user, only by authenticated users, or only by the attacker themselves. You should review the functionality in which the vulnerability appears to determine whether the application's behavior can feasibly be used to compromise other application users. </p>","<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; "" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",,,,"214"
"270",,"2097472","HTTP request smuggling","<p>\n    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.\n</p>\n<p>\n    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.\n</p>","<p>\n    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.\n</p><p>\n    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.\n</p>",,,,"19"
"271",,"2097536","Web cache poisoning","<p>Web caches identify resources using a few specific components of each HTTP request, together known as the cache key. Two requests with the same cache key are regarded by the\n    cache as equivalent. </p>\n<p>\n    Web cache poisoning vulnerabilities arise when an application behind a cache processes input that is not included in the cache key. Attackers can exploit this by sending\n    crafted input to trigger a harmful response that the cache will then save and serve to other users.\n</p>\n<p>\n    The impact is potentially serious as the malicious cached page may be served to a large number of users without other interaction. The threat posed by this vulnerability\n    depends largely on what can be achieved with the input. Often the input is vulnerable to XSS, or can be used to trigger a redirect to another domain. Other times, it can simply\n    be used to swap pages around.\n</p>","<p>To resolve this issue, either disable support for the affected input, or disable caching on all affected pages.</p>\n<p>If both the affected input and caching behavior are required, configure the cache to ensure that the input is included in the cache key. Depending on which caching solution you\n    use, if the input is in a request header it might be possible to achieve this using the Vary response header.</p>",,,,"75"
"272",,"2097664","HTTP response header injection","<p>HTTP response header injection vulnerabilities arise when user-supplied data is copied into a response header in an unsafe way. If an attacker can inject newline characters into the header, then they can inject new HTTP headers and also, by injecting an empty line, break out of the headers into the message body and write arbitrary content into the application's response.</p>\n<p>Various kinds of attack can be delivered via HTTP response header injection vulnerabilities. Any attack that can be delivered via cross-site scripting can usually be delivered via response header injection, because the attacker can construct a request that causes arbitrary JavaScript to appear within the response body. Further, it is sometimes possible to leverage response header injection vulnerabilities to poison the cache of any proxy server via which users access the application. Here, an attacker sends a crafted request that results in a ""split"" response containing arbitrary content. If the proxy server can be manipulated to associate the injected response with another URL used within the application, then the attacker can perform a ""stored"" attack against this URL, which will compromise other users who request that URL in future.\n</p>","<p>If possible, applications should avoid copying user-controllable data into HTTP response headers. If this is unavoidable, then the data should be strictly validated to prevent response header injection attacks. In most situations, it will be appropriate to allow only short alphanumeric strings to be copied into headers, and any other input should be rejected. At a minimum, input containing any characters with ASCII codes less than 0x20 should be rejected.</p>",,,,"79"
"273",,"2097920","Cross-site scripting (reflected)","<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>","<p>In most situations where user-controllable data is copied into application responses, cross-site scripting \n  attacks can be prevented using two layers of defenses:</p>\n<ul>\n  <li>Input should be validated as strictly as possible on arrival, given the kind of content that \nit is expected to contain. For example, personal names should consist of alphabetical \nand a small range of typographical characters, and be relatively short; a year of birth \nshould consist of exactly four numerals; email addresses should match a well-defined \nregular expression. Input which fails the validation should be rejected, not sanitized.</li>\n<li>User input should be HTML-encoded at any point where it is copied into \napplication responses. All HTML metacharacters, including &lt; &gt; "" ' and =, should be \nreplaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>\n<p>In cases where the application's functionality allows users to author content using \n  a restricted subset of HTML tags and attributes (for example, blog comments which \n  allow limited formatting and linking), it is necessary to parse the supplied HTML to \n  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>",,,,"214"
"274",,"2097928","Client-side template injection","<p>Client-side template injection vulnerabilities arise when applications using a client-side template framework dynamically embed user input in web pages. When a web page is rendered, the framework will scan the page for template expressions, and execute any that it encounters. An attacker can exploit this by supplying a malicious template expression that launches a cross-site scripting (XSS) attack. As with normal cross-site scripting, the attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>\n<p>The security impact of client-side template injection vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a client-side template injection flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, client-side template injection should always be considered high risk. </p>\n<p>Client-side template frameworks often implement a sandbox aimed at hindering direct execution of arbitrary JavaScript from within a template expression. However, these sandboxes are not intended to be a security control and can normally be bypassed.</p>\n<p>Browser cross-site scripting filters are typically unable to detect or prevent client-side template injection attacks.</p>","<p>If possible, avoid using server-side code to dynamically embed user input into client-side templates. If this is not practical, consider filtering out template expression syntax from user input prior to embedding it within client-side templates. </p>\n<p>Note that HTML-encoding is not sufficient to prevent client-side template injection attacks, because frameworks perform an HTML-decode of relevant content prior to locating and executing template expressions.</p>",,,,"209"
"275",,"2097936","Cross-site scripting (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>",,,,"45"
"276",,"2097937","Cross-site scripting (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>",,,,"45"
"277",,"2097938","Cross-site scripting (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>",,,,"45"
"278",,"2097952","JavaScript injection (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>",,,,"115"
"279",,"2097953","JavaScript injection (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>",,,,"115"
"280",,"2097954","JavaScript injection (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>\n<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>\n<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>",,,,"115"
"281",,"2097968","Client-side SQL injection (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>Client-side SQL injection arises when a script incorporates controllable  data into a client-side SQL query in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will execute an arbitrary SQL query within the local SQL database of the user's browser.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of the SQL database. If the database is used to store sensitive data (such as messages in a social networking application), then the attacker may be able to retrieve this data. If the database is used to store pending user actions (such as outgoing messages in an email application), then the attacker may be able to modify this data and carry out actions on the user's behalf.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based client-side SQL injection vulnerabilities is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. In the JavaScript executeSql() API, parameterized items can be designated within the query string using the query character (?), and for each parameterized item, an additional parameter is passed to the API containing the item's value. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>",,,,"207"
"282",,"2097969","Client-side SQL injection (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>Client-side SQL injection arises when a script incorporates controllable  data into a client-side SQL query in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will execute an arbitrary SQL query within the local SQL database of the user's browser.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of the SQL database. If the database is used to store sensitive data (such as messages in a social networking application), then the attacker may be able to retrieve this data. If the database is used to store pending user actions (such as outgoing messages in an email application), then the attacker may be able to modify this data and carry out actions on the user's behalf.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based client-side SQL injection vulnerabilities is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. In the JavaScript executeSql() API, parameterized items can be designated within the query string using the query character (?), and for each parameterized item, an additional parameter is passed to the API containing the item's value. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>",,,,"207"
"283",,"2097970","Client-side SQL injection (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>Client-side SQL injection arises when a script incorporates controllable  data into a client-side SQL query in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will execute an arbitrary SQL query within the local SQL database of the user's browser.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of the SQL database. If the database is used to store sensitive data (such as messages in a social networking application), then the attacker may be able to retrieve this data. If the database is used to store pending user actions (such as outgoing messages in an email application), then the attacker may be able to modify this data and carry out actions on the user's behalf.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based client-side SQL injection vulnerabilities is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. In the JavaScript executeSql() API, parameterized items can be designated within the query string using the query character (?), and for each parameterized item, an additional parameter is passed to the API containing the item's value. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>",,,,"207"
"284",,"2097984","WebSocket URL poisoning (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>WebSocket URL poisoning occurs when a  script uses controllable  data as the target URL of a WebSocket connection. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open a WebSocket connection to a URL that is under the attacker's control.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of WebSockets. If the application transmits sensitive data from the user's browser to the WebSocket server, then the attacker may be able to capture this data. If the application reads data from the WebSocket server and performs processing on this data, then the attacker may be able to subvert the application's logic or deliver additional client-side attacks against the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based WebSocket URL poisoning vulnerabilities is not to dynamically set the target URL of a WebSocket connection using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a target of a WebSocket. In general, this is best achieved by using a whitelist of URLs that are permitted WebSocket targets, and strictly validating the target against this list before creating the WebSocket. </p>",,,,"67"
"285",,"2097985","WebSocket URL poisoning (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>WebSocket URL poisoning occurs when a  script uses controllable  data as the target URL of a WebSocket connection. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open a WebSocket connection to a URL that is under the attacker's control.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of WebSockets. If the application transmits sensitive data from the user's browser to the WebSocket server, then the attacker may be able to capture this data. If the application reads data from the WebSocket server and performs processing on this data, then the attacker may be able to subvert the application's logic or deliver additional client-side attacks against the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based WebSocket URL poisoning vulnerabilities is not to dynamically set the target URL of a WebSocket connection using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a target of a WebSocket. In general, this is best achieved by using a whitelist of URLs that are permitted WebSocket targets, and strictly validating the target against this list before creating the WebSocket. </p>",,,,"67"
"286",,"2097986","WebSocket URL poisoning (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>WebSocket URL poisoning occurs when a  script uses controllable  data as the target URL of a WebSocket connection. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open a WebSocket connection to a URL that is under the attacker's control.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of WebSockets. If the application transmits sensitive data from the user's browser to the WebSocket server, then the attacker may be able to capture this data. If the application reads data from the WebSocket server and performs processing on this data, then the attacker may be able to subvert the application's logic or deliver additional client-side attacks against the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based WebSocket URL poisoning vulnerabilities is not to dynamically set the target URL of a WebSocket connection using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a target of a WebSocket. In general, this is best achieved by using a whitelist of URLs that are permitted WebSocket targets, and strictly validating the target against this list before creating the WebSocket. </p>",,,,"67"
"287",,"2098000","Local file path manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>Local file path manipulation  arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.</p>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API. </p>",,,,"37"
"288",,"2098001","Local file path manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>Local file path manipulation  arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.</p>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API. </p>",,,,"37"
"289",,"2098002","Local file path manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>Local file path manipulation  arises when a script uses controllable data as the filename parameter to a file handling API. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to open an arbitrary local file.</p>\n<p>The potential impact of the vulnerability depends on the application's usage of the opened file. If the application reads data from the file, then the attacker may be able to retrieve this data. If the application writes data to the file, then the attacker may be able to write specific data to a sensitive file, such as an operating system configuration file. In both these cases, the actual exploitability of the potential vulnerability may depend on other suitable functionality being present in the application.</p>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based local file path manipulation vulnerabilities is not to dynamically pass a filename to a file handling API using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from accessing arbitrary files. In general, this is best achieved by using a whitelist of permitted filenames, and strictly validating the filename against this list before invoking the file handling API. </p>",,,,"37"
"290",,"2098016","Client-side XPath injection (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed. </p>",,,,"156"
"291",,"2098017","Client-side XPath injection (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed. </p>",,,,"156"
"292",,"2098018","Client-side XPath injection (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed. </p>",,,,"156"
"293",,"2098032","Client-side JSON injection (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>DOM-based JSON injection  arises when a script  incorporates controllable data into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.</p>",,,,"154"
"294",,"2098033","Client-side JSON injection (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based JSON injection  arises when a script  incorporates controllable data into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.</p>",,,,"154"
"295",,"2098034","Client-side JSON injection (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based JSON injection  arises when a script  incorporates controllable data into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.</p>",,,,"154"
"296",,"2098176","Flash cross-domain policy","<p>The Flash cross-domain policy controls whether Flash client components running on other domains can perform two-way interaction with the domain that publishes the policy. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially gain full access to the application within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application that allows access. Any domains that are allowed by the Flash cross-domain policy should be reviewed to determine whether it is appropriate for the application to fully trust both their intentions and security posture. </p>","<p>Any inappropriate entries in the Flash cross-domain policy file should be removed.</p>",,,,"89"
"297",,"2098432","Silverlight cross-domain policy","<p>The Silverlight cross-domain policy controls whether Silverlight client components running on other domains can perform two-way interaction with the domain that publishes the policy. If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially gain full access to the application within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by a third-party attacker to exploit the trust relationship and attack the application that allows access. Any domains that are allowed by the Silverlight cross-domain policy should be reviewed to determine whether it is appropriate for the application to fully trust both their intentions and security posture. </p>","<p>Any inappropriate entries in the Silverlight cross-domain policy file should be removed.</p>",,,,"227"
"298",,"2098688","Cross-origin resource sharing","<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>","<p>Any inappropriate domains should be removed from the CORS policy.</p>",,,,"76"
"299",,"2098689","Cross-origin resource sharing: arbitrary origin trusted","<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>","<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",,,,"182"
"300",,"2098690","Cross-origin resource sharing: unencrypted origin trusted","<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p>\n<p>If a site allows interaction from an origin that uses unencrypted HTTP communications, then it is vulnerable to an attacker who is in a position to view and modify a user's unencrypted network traffic. The attacker can control the responses from unencrypted origins, thereby injecting content that is able to interact with the application that publishes the policy. This means that the application is effectively extending trust to all such attackers, thereby undoing much of the benefit of using HTTPS communications. </p>","<p>Only trust origins that use encrypted HTTPS communications.</p>",,,,"103"
"301",,"2098691","Cross-origin resource sharing: all subdomains trusted","<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p>\n<p>If an application allows interaction from all subdomains, then this significantly increases its attack surface. For example, a cross-site scripting (XSS) vulnerability in any subdomain could potentially compromise the application that publishes the policy. Some consumer ISPs return custom content when requests are made to unregistered subdomains, which can introduce XSS vulnerabilities even if all of an organization's own applications are secure.</p>","<p>Rather than trusting all subdomains,  use a whitelisted of trusted subdomains.</p>",,,,"129"
"302",,"2099200","SMTP header injection","<p>SMTP header injection vulnerabilities arise when user input is placed into email headers without adequate sanitization, allowing an attacker to inject additional headers with arbitrary values. This behavior can be exploited to send copies of emails to third parties, attach viruses, deliver phishing attacks, and often alter the content of emails. It is typically exploited by spammers looking to leverage the vulnerable company's reputation to add legitimacy to their emails.\n</p>\n<p>\nThis issue is particularly serious if the email contains sensitive information not intended for the attacker, such as a password reset token.\n</p>","<p>Validate that user input conforms to a whitelist of safe characters before placing it into email headers. In particular, input containing newlines and carriage returns should be rejected.\nAlternatively, consider switching to an email library that automatically prevents such attacks.\n</p>",,,,"197"
"303",,"3146240","External service interaction (DNS)","<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. \nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\n<p>In cases where DNS-based interactions can be triggered, it is normally possible to trigger interactions using other service types, and these are reported as separate issues. \n  If a payload that specifies a particular service type (e.g. a URL) triggers only a DNS-based interaction, \n  then this strongly indicates that the application attempted to connect using that other service, \n  but was prevented from doing so by egress filters in place at the network layer. The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. \n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>","<p>You should review the purpose and intended use of the relevant application functionality, \n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>",,,,"60"
"304",,"3146256","External service interaction (HTTP)","<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. \nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\n<p>The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. \n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>","<p>You should review the purpose and intended use of the relevant application functionality, \n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>",,,,"60"
"305",,"3146272","External service interaction (SMTP)","<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application. \nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\n<p>The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy. \n  By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. \n  This may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself. \n  Depending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>\n<p>The facility to generate an email to an arbitrary address is often intended application behavior. But this is not necessarily the case, particulary in cases where the destination address is not explicitly entered on-screen by the user.</p>","<p>You should review the purpose and intended use of the relevant application functionality, \n  and determine whether the ability to trigger arbitrary external service interactions is intended behavior. \n  If so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures. \n  These measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>",,,,"60"
"306",,"4194560","Referer-dependent response","<p>Application responses may depend systematically on the presence or absence of the Referer header in requests. This behavior does not necessarily constitute a security vulnerability, and you should investigate the nature of and reason for the differential responses to determine whether a vulnerability is present.</p>\n<p>Common explanations for Referer-dependent responses include: </p>\n<ul><li>Referer-based access controls, where the application assumes that if you have arrived from one privileged location then you are authorized to access another privileged location. These controls can be trivially defeated by supplying an accepted Referer header in requests for the vulnerable function.</li><li>Attempts to prevent cross-site request forgery attacks by verifying that requests to perform privileged actions originated from within the application itself and not from some external location. Such defenses are often not robust, and can be bypassed by removing the Referer header entirely.</li>\n<li>Delivery of Referer-tailored content, such as welcome messages to visitors from specific domains, search-engine optimization (SEO) techniques, and other ways of tailoring the user's experience. Such behaviors often have no security impact; however, unsafe processing of the Referer header may introduce vulnerabilities such as SQL injection and cross-site scripting. If parts of the document (such as META keywords) are updated based on search engine queries contained in the Referer header, then the application may be vulnerable to persistent code injection attacks, in which search terms are manipulated to cause malicious content to appear in responses served to other application users.</li></ul>","<p>The Referer header is not a robust foundation on which to build access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to Referer spoofing.</p>\n<p>If the contents of responses is updated based on Referer data, then the same defenses against malicious input should be employed here as for any other kinds of user-supplied data. </p>",,,,"102"
"307",,"4194576","Spoofable client IP address","<p>\nIf an application trusts an HTTP request header like X-Forwarded-For to accurately specify the remote IP address of the connecting client, then malicious clients can spoof their IP address. This behavior does not necessarily constitute a security vulnerability, however some applications use client IP addresses to enforce access controls and rate limits. For example, an application might expose administrative functionality only to clients connecting from the local IP address of the server, or allow a certain number of failed login attempts from each unique IP address.\nConsider reviewing relevant functionality to determine whether this might be the case. </p>","<p>HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP are not a robust foundation on which to build any security measures, such as access controls. Any such measures should be replaced with more secure alternatives that are not vulnerable to spoofing.</p>\n<p>If the platform application server returns incorrect information about the client's IP address due to the presence of any particular HTTP request header, then the server may need to be reconfigured, or an alternative method of identifying clients should be used. </p>",,,,"50"
"308",,"4194816","Password returned in later response","<p>Some applications return passwords submitted to the application in clear form in later responses. This behavior increases the risk that users' passwords will be captured by an attacker. Many types of vulnerability, such as weaknesses in session handling, broken access controls, and cross-site scripting, could enable an attacker to leverage this behavior to retrieve the passwords of other application users. This possibility typically exacerbates the impact of those other vulnerabilities, and in some situations can enable an attacker to quickly compromise the entire application.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>There is usually no good reason for an application to return users' passwords in its responses. If user impersonation is a business requirement this would be better implemented as a custom function with associated logging.</p>",,,,"96"
"309",,"4195072","Password submitted using GET method","<p>Some applications use the GET method to submit passwords, which are transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing passwords into the URL increases the risk that they will be captured by an attacker.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>All forms submitting passwords should use the POST method. To achieve this, applications should specify the method attribute of the FORM tag as <b>method=""POST""</b>. It may also be necessary to modify the corresponding server-side form handler to ensure that submitted passwords are properly retrieved from the message body, rather than the URL.\n</p>",,,,"252"
"310",,"4195328","Password returned in URL query string","<p>The application responds to login submissions with a link containing the user's password within the URL query string. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing passwords into the URL increases the risk that they will be captured by an attacker.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>The application should never transmit any sensitive information within the URL query string. There is no good reason for a login mechanism to echo passwords back to the user, and the mechanism should be modified to remove this behavior.</p>",,,,"248"
"311",,"4195456","SQL statement in request parameter","<p>HTTP requests sometimes contain SQL syntax. If this is incorporated into a SQL query and executed by the server, then the application is almost certainly vulnerable to SQL injection.</p>\n<p>When SQL-like syntax is observed, you should verify whether the request contains a genuine SQL query and whether this is being executed by the server. </p>","<p>Applications should not incorporate any user-controllable data directly into SQL queries. Parameterized queries (also known as prepared statements) should be used to safely insert data into predefined queries. In no circumstances should users be able to control or modify the structure of the SQL query itself.</p>",,,,"224"
"312",,"4195584","Cross-domain POST","<p>Applications sometimes use POST requests to transfer sensitive information from one domain to another. This does not necessarily constitute a security vulnerability, but it creates a trust relationship between the two domains. Data transmitted between domains should be reviewed to determine whether the originating application should be trusting the receiving domain with this information.</p>",,,,,"8"
"313",,"4195840","ASP.NET ViewState without MAC enabled","<p>The ViewState is a mechanism built in to the ASP.NET platform for persisting elements of the user interface and other data across successive requests. The data to be persisted is serialized by the server and transmitted via a hidden form field. When it is posted back to the server, the ViewState parameter is deserialized and the data is retrieved.</p>\n<p>By default, the serialized value is signed by the server to prevent tampering by the user; however, this behavior can be disabled by setting the Page.EnableViewStateMac property to false. If this is done, then an attacker can modify the contents of the ViewState and cause arbitrary data to be deserialized and processed by the server. If the ViewState contains any items that are critical to the server's processing of the request, then this may result in a security exposure.</p>\n<p>The contents of the deserialized ViewState should be reviewed to determine whether it contains any critical items that can be manipulated to attack the application. </p>","<p>There is no good reason to disable the default ASP.NET behavior in which the ViewState is signed to prevent tampering. To ensure that this occurs, you should set the Page.EnableViewStateMac property to true on any pages where the ViewState is not currently signed.</p>",,,,"255"
"314",,"4196096","XML entity expansion","<p>XML entity expansion vulnerabilities arise because the XML specification allows XML documents to define entities that reference other entities defined within the document. If this is done recursively to a significant depth, then the XML parser will consume exponentially increasing amounts of memory and processor resources as each level of recursion is processed. This might result in a denial-of-service condition, causing the entire application to stop functioning.</p>\n<p><b>Note:</b> To avoid causing an actual denial-of-service, Burp Suite merely verifies that entities are being recursively expanded to a modest depth. It is possible that reported applications are not actually vulnerable because they are designed to prevent entity expansion beyond a given depth.\n</p>","<p>XML entity expansion makes use of the DOCTYPE tag to define the injected entities. XML parsers can usually be configured to disable support for this tag. You should consult the documentation for your XML parsing library to determine how to disable this feature.</p>\n<p>It may also be possible to use input validation to block input containing a DOCTYPE tag. </p>",,,,"63"
"315",,"4196608","Serialized object in HTTP message","<p>Applications may submit a serialized object in a request parameter. This behavior can expose the application in various ways, including:</p>\n<ul>\n<li>Any sensitive data contained within the object can be viewed by the user.</li><li>An attacker may be able to interfere with server-side logic by tampering with the contents of the object and re-serializing it.</li><li>An attacker may be able to cause unauthorized code execution on the server, by controlling the server-side function that is invoked when the object is processed.</li></ul>\n<p>Actual exploitation of any code execution vulnerabilities arising from the application's use of serialized objects will typically require the attacker to have access to the source code of the server-side application. This may mitigate the practical impact of this issue in many situations. However, it is still highly recommended to fix the underlying vulnerability. Vulnerabilities in native deserialization functions often allow practical exploitation without source code access.</p>","<p>The best way to avoid vulnerabilities that arise from the use of serialized objects is not to pass these in request parameters, or expose them in any other way to the client. Generally, it is possible to transmit application data in plain non-serialized form, and handle it with the same precautions that apply to all client-submitted data. If it is considered unavoidable to place serialized objects into request parameters, then it may be possible to prevent attacks by also placing a server-generated cryptographic signature of the object into the same request, and validating the signature before performing deserialization or other processing on the object.</p>",,,,"128"
"316",,"4196864","Duplicate cookies set","<p>The response contains two or more Set-Cookie headers that attempt to set the same cookie to different values. Browsers will only accept one of these values, typically the value in the last header. The presence of the duplicate headers may indicate a programming error.</p>",,,,,"8"
"317",,"4197120","Input returned in response (stored)","<p>Retrieval of stored input arises when user input is stored and later embedded into the application's responses. </p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>\n\n<p>Vulnerabilities resulting from retrieval of stored input  are typically more serious than the equivalent reflected vulnerabilities because they do not require a separate delivery mechanism in order to reach target users. Depending on the affected functionality, ordinary users may be exploited during normal use of the application. Note that automated detection of stored data retrieval cannot reliably determine whether input that is persisted within the application can be retrieved by any other user, only by authenticated users, or only by the attacker themselves. You should review the functionality in which the vulnerability appears to determine whether the application's behavior can feasibly be used to compromise other application users. </p>",,,,,"8"
"318",,"4197632","Suspicious input transformation (reflected)","<p>Suspicious input transformation arises when an application receives user input, transforms it in some way, and then performs further processing on the result. The types of transformations that can lead to problems include decoding common formats, such as UTF-8 and URL-encoding, or processing of escape sequences, such as backslash escaping. </p>\n<p>Performing these input transformations does not constitute a vulnerability in its own right, but might lead to problems in conjunction with other application behaviors. An attacker might be able to bypass input filters by suitably encoding their payloads, if the input is decoded after the input filters have been applied. Or an attacker might be able to interfere with other data that is concatenated onto their input, by finishing their input with the start of a multi-character encoding or escape sequence, the transformation of which will consume the start of the following data.</p>","<p>Review the transformation that is being applied, to understand whether this is intended and desirable behavior given the nature of the application functionality, and whether it gives rise to any vulnerabilities in relation to  bypassing of input filters or character consumption.</p>",,,,"164"
"319",,"4197888","Suspicious input transformation (stored)","<p>Suspicious input transformation arises when an application receives user input, transforms it in some way, and then performs further processing on the result. The types of transformations that can lead to problems include decoding common formats, such as UTF-8 and URL-encoding, or processing of escape sequences, such as backslash escaping. </p>\n<p>Performing these input transformations does not constitute a vulnerability in its own right, but might lead to problems in conjunction with other application behaviors. An attacker might be able to bypass input filters by suitably encoding their payloads, if the input is decoded after the input filters have been applied. Or an attacker might be able to interfere with other data that is concatenated onto their input, by finishing their input with the start of a multi-character encoding or escape sequence, the transformation of which will consume the start of the following data.</p>\n\n<p>Stored suspicious input transformation arises when the transformed input is stored and later embedded into the application's responses.</p>","<p>Review the transformation that is being applied, to understand whether this is intended and desirable behavior given the nature of the application functionality, and whether it gives rise to any vulnerabilities in relation to  bypassing of input filters or character consumption.</p>",,,,"164"
"320",,"4198144","Request URL override","<p>Some applications and frameworks support HTTP headers that can be used to override parts of the request URL, potentially affecting the routing and processing of the request.</p>\n<p>Intermediate systems are often oblivious to these headers. In the case of reverse proxies and web application firewalls, this can lead to security rulesets being bypassed. If a caching system is in place, this may enable cache poisoning attacks. These headers may also enable forging of log entries. </p>\n<p>Even if the application is intended to be accessed directly, some visitors may be using a corporate proxy enabling localised cache poisoning. </p>","<p>\n    To fully resolve this issue, locate the component that processes the affected headers, and disable it entirely. If you are using a framework, applying any pending security updates may do this for you.\n</p>\n<p>\n    If this isn't practical, an alternative workaround is to configure an intermediate system to automatically strip the affected headers before they are processed.\n</p>",,,,"228"
"321",,"5243136","Open redirection (reflected)","<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>","<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:</p>\n<ul>\n  <li>Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.</li>\n  <li>Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</li>\n</ul>\n<p>If it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:</p>\n<ul>\n  <li>The application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.</li>\n  <li>The application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend http://yourdomainname.com to the URL before issuing the redirect.</li>\n  <li>The application should use absolute URLs for all of its redirects, and the redirection function should verify that the user-supplied URL begins with http://yourdomainname.com/ before issuing the redirect.</li>\n</ul>",,,,"186"
"322",,"5243137","Open redirection (stored)","<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>","<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:</p>\n<ul>\n  <li>Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.</li>\n  <li>Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</li>\n</ul>\n<p>If it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:</p>\n<ul>\n  <li>The application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.</li>\n  <li>The application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend http://yourdomainname.com to the URL before issuing the redirect.</li>\n  <li>The application should use absolute URLs for all of its redirects, and the redirection function should verify that the user-supplied URL begins with http://yourdomainname.com/ before issuing the redirect.</li>\n</ul>\n\n<p>Stored open redirection vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application. This is often more serious than reflected open redirection because an attacker might be able to place persistent input into the application which, when viewed by other users, causes their browser to invisibly redirect to a domain of the attacker's choice.</p>",,,,"41"
"323",,"5243152","Open redirection (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>\n<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>",,,,"125"
"324",,"5243153","Open redirection (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>\n<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>",,,,"125"
"325",,"5243154","Open redirection (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>\n<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>",,,,"125"
"326",,"5243392","TLS cookie without secure flag set","<p>If the secure flag is set on a cookie, then browsers will not submit the cookie in any requests that use an unencrypted HTTP connection, thereby preventing the cookie from being trivially intercepted by an attacker monitoring network traffic. If the secure flag is not set, then the cookie will be transmitted in clear-text if the user visits any HTTP URLs within the cookie's scope. An attacker may be able to induce this event by feeding a user suitable links, either directly or via another web site. Even if the domain that issued the cookie does not host any content that is accessed over HTTP, an attacker may be able to use links of the form http://example.com:443/ to perform the same attack.</p>\n<p>To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>","<p>The secure flag should be set on all cookies that are used for transmitting sensitive data when accessing content over HTTPS. If cookies are used to transmit session tokens, then areas of the application that are accessed over HTTPS should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications.</p>",,,,"262"
"327",,"5243648","Cookie scoped to parent domain","<p>A cookie's domain attribute determines which domains can access the cookie. Browsers will automatically submit the cookie in requests to in-scope domains, and those domains will also be able to access the cookie via JavaScript. If a cookie is scoped to a parent domain, then that cookie will be accessible by the parent domain and also by any other subdomains of the parent domain. If the cookie contains sensitive data (such as a session token) then this data may be accessible by less trusted or less secure applications residing at those domains, leading to a security compromise.</p>","<p>By default, cookies are scoped to the issuing domain, and on IE/Edge to subdomains. If you remove the explicit domain attribute from your Set-cookie directive, then the cookie will have this default scope, which is safe and appropriate in most situations. If you particularly need a cookie to be accessible by a parent domain, then you should thoroughly review the security of the applications residing on that domain and its subdomains, and confirm that you are willing to trust the people and systems that support those applications.</p>",,,,"133"
"328",,"5244416","Cookie without HttpOnly flag set","<p>If the HttpOnly attribute is set on a cookie, then the cookie's value cannot be read or set by client-side JavaScript. This measure makes certain client-side attacks, such as cross-site scripting, slightly harder to exploit by preventing them from trivially capturing the cookie's value via an injected script.</p>","<p>There is usually no good reason not to set the HttpOnly flag on all cookies. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive.</p>\n<p>You should be aware that the restrictions imposed by the HttpOnly flag can potentially be circumvented in some circumstances, and that numerous other serious attacks can be delivered by client-side script injection, aside from simple cookie stealing. </p>",,,,"127"
"329",,"5244672","Session token in URL","<p>Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing session tokens into the URL increases the risk that they will be captured by an attacker.</p>","<p>Applications should use an alternative mechanism for transmitting session tokens, such as HTTP cookies or hidden fields in forms that are submitted using the POST method.</p>",,,,"35"
"330",,"5245184","Password value set in cookie","<p>Some applications issue a cookie containing the clear-text value of the password supplied by the user. This behavior increases the risk that users' passwords will be captured by an attacker. Any cookie-stealing vulnerabilities within the application or browser would enable an attacker to steal the user's credentials to the application.</p>\n<p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>Applications should not store user credentials within any client-side mechanism such as cookies.</p>",,,,"195"
"331",,"5245312","File upload functionality","<p>File upload functionality is commonly associated with a number of vulnerabilities, including:</p>\n<ul>\n<li>File path traversal</li><li>Persistent cross-site scripting</li><li>Placing of other client-executable code into the domain</li><li>Transmission of viruses and other malware</li><li>Denial of service</li></ul>\n<p>You should review file upload functionality to understand its purpose, and establish whether uploaded content is ever returned to other application users, either through their normal usage of the application or by being fed a specific link by an attacker.</p>\n<p>Some factors to consider when evaluating the security impact of this functionality include:</p>\n<ul>\n<li>Whether uploaded content can subsequently be downloaded via a URL within the application.</li><li>What Content-type and Content-disposition headers the application returns when the file's content is downloaded.</li><li>Whether it is possible to place executable HTML/JavaScript into the file, which executes when the file's contents are viewed.</li><li>Whether the application performs any filtering on the file extension or MIME type of the uploaded file.</li><li>Whether it is possible to construct a hybrid file containing both executable and non-executable content, to bypass any content filters - for example, a file containing both a GIF image and a Java archive (known as a GIFAR file).</li><li>What location is used to store uploaded content, and whether it is possible to supply a crafted filename to escape from this location.</li><li>Whether archive formats such as ZIP are unpacked by the application.</li><li>How the application handles attempts to upload very large files, or decompression bomb files.</li></ul>","<p>File upload functionality is not straightforward to implement securely. Some recommendations to consider in the design of this functionality include:</p>\n<ul>\n<li>Use a server-generated filename if storing uploaded files on disk.</li><li>Inspect the content of uploaded files, and enforce a whitelist of accepted, non-executable content types. Additionally, enforce a blacklist of common executable formats, to hinder hybrid file attacks.</li><li>Enforce a whitelist of accepted, non-executable file extensions.</li>\n<li>If uploaded files are downloaded by users, supply an accurate non-generic Content-Type header, the X-Content-Type-Options: nosniff header, and also a Content-Disposition header that specifies that browsers should handle the file as an attachment.</li>\n<li>Enforce a size limit on uploaded files (for defense-in-depth, this can be implemented both within application code and in the web server's configuration).</li><li>Reject attempts to upload archive formats such as ZIP.</li></ul>",,,,"33"
"332",,"5245360","Browser cross-site scripting filter disabled","<p>Some browsers, including Internet Explorer, contain built-in filters designed to protect against cross-site scripting (XSS) attacks. Applications can instruct browsers to disable this filter by setting the following response header:</p>\n<p><b>X-XSS-Protection: 0</b></p>\n<p>This behavior does not in itself constitute a vulnerability; in some cases XSS filters may themselves be leveraged to perform attacks against application users. However, in typical situations XSS filters do provide basic protection for application users against some XSS vulnerabilities in applications. The presence of this header should be reviewed to establish whether it affects the application's security posture. </p>","<p>Review whether the application needs to disable XSS filters. In most cases you can gain the protection provided by XSS filters without the associated risks by using the following response header:</p>\n<p><b>X-XSS-Protection: 1; mode=block</b></p>\n<p>When this header is set, browsers that detect an XSS attack will simply render a blank page instead of attempting to sanitize the injected script. This behavior is considerably less likely to introduce new security issues. </p>",,,,"3"
"333",,"5245440","HTTP TRACE method is enabled","<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>","<p>The TRACE method should be disabled on production web servers.</p>",,,,"55"
"334",,"5245696","Cookie manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.</p>\n<p>The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>",,,,"150"
"335",,"5245697","Cookie manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.</p>\n<p>The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>",,,,"150"
"336",,"5245698","Cookie manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.</p>\n<p>The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>",,,,"150"
"337",,"5245952","Ajax request header manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>Ajax request header manipulation  arises when a script writes controllable data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.</p>\n<p>The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.</p>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application. </p>",,,,"5"
"338",,"5245953","Ajax request header manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>Ajax request header manipulation  arises when a script writes controllable data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.</p>\n<p>The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.</p>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application. </p>",,,,"5"
"339",,"5245954","Ajax request header manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>Ajax request header manipulation  arises when a script writes controllable data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.</p>\n<p>The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.</p>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application. </p>",,,,"5"
"340",,"5246208","Denial of service (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>DOM-based denial of service  arises when a script passes controllable data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space. This may result in side effects if the web browser restricts application functionality; for example, by rejecting attempts to store data in localStorage or killing busy scripts.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. </p>",,,,"173"
"341",,"5246209","Denial of service (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based denial of service  arises when a script passes controllable data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space. This may result in side effects if the web browser restricts application functionality; for example, by rejecting attempts to store data in localStorage or killing busy scripts.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. </p>",,,,"173"
"342",,"5246210","Denial of service (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based denial of service  arises when a script passes controllable data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space. This may result in side effects if the web browser restricts application functionality; for example, by rejecting attempts to store data in localStorage or killing busy scripts.</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. </p>",,,,"173"
"343",,"5246464","HTML5 web message manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>HTML5 web message manipulation arises when a script sends controllable data as a web message to another document within the browser. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to send a web message containing data that is under the attacker's control.</p>\n<p>The potential impact of the vulnerability depends on the destination document's handling of the incoming message. If the destination document trusts the sender not to transmit malicious data in the message, and handles the data in an unsafe manner, then the joint behavior of the two documents may allow an attacker to compromise the application user.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based HTML5 web message manipulation vulnerabilities is not to send a web message containing data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from compromising the user. This validation can be carried out by the document that sends the message, or by the document that receives the message, or both, depending on the trust relationship between the two documents.</p>",,,,"240"
"344",,"5246465","HTML5 web message manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>HTML5 web message manipulation arises when a script sends controllable data as a web message to another document within the browser. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to send a web message containing data that is under the attacker's control.</p>\n<p>The potential impact of the vulnerability depends on the destination document's handling of the incoming message. If the destination document trusts the sender not to transmit malicious data in the message, and handles the data in an unsafe manner, then the joint behavior of the two documents may allow an attacker to compromise the application user.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based HTML5 web message manipulation vulnerabilities is not to send a web message containing data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from compromising the user. This validation can be carried out by the document that sends the message, or by the document that receives the message, or both, depending on the trust relationship between the two documents.</p>",,,,"240"
"345",,"5246466","HTML5 web message manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>HTML5 web message manipulation arises when a script sends controllable data as a web message to another document within the browser. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the user's browser to send a web message containing data that is under the attacker's control.</p>\n<p>The potential impact of the vulnerability depends on the destination document's handling of the incoming message. If the destination document trusts the sender not to transmit malicious data in the message, and handles the data in an unsafe manner, then the joint behavior of the two documents may allow an attacker to compromise the application user.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based HTML5 web message manipulation vulnerabilities is not to send a web message containing data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from compromising the user. This validation can be carried out by the document that sends the message, or by the document that receives the message, or both, depending on the trust relationship between the two documents.</p>",,,,"240"
"346",,"5246720","HTML5 storage manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>HTML5 storage manipulation arises when a script stores controllable data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause the user's browser to store attacker-controllable data.</p>\n<p>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.</p>",,,,"220"
"347",,"5246721","HTML5 storage manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>HTML5 storage manipulation arises when a script stores controllable data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause the user's browser to store attacker-controllable data.</p>\n<p>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.</p>",,,,"220"
"348",,"5246722","HTML5 storage manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>HTML5 storage manipulation arises when a script stores controllable data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause the user's browser to store attacker-controllable data.</p>\n<p>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.</p>",,,,"220"
"349",,"5246976","Link manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:</p>\n<ul>\n<li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>",,,,"254"
"350",,"5246977","Link manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:</p>\n<ul>\n<li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>",,,,"254"
"351",,"5246978","Link manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:</p>\n<ul>\n<li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>",,,,"254"
"352",,"5246979","Link manipulation (reflected)","<p>Link manipulation occurs when an application embeds user input into the path or domain of URLs that appear within application responses.&nbsp;An attacker can use this vulnerability to construct a link that, if visited by another application user, will modify the target of URLs within the response. It may be possible to leverage this to perform various attacks, such as:</p>\n<ul>\n  <li>Manipulating the path of an on-site link that has sensitive parameters in the URL. If the response from the modified path contains references to off-site resources, then the sensitive data might be leaked to external domains via the Referer header.</li>\n  <li>Manipulating the URL targeted by a form action, making the form submission have unintended side effects.</li>\n  <li>Manipulating the URL used by a CSS import statement to point to an attacker-uploaded file, resulting in CSS injection.</li>\n  <li>Injecting on-site links containing XSS exploits, thereby bypassing browser anti-XSS defenses, since those defenses typically do not operate on on-site links.</li>\n</ul>\n<p>The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.</p>","<p>Consider using a whitelist to restrict user input to safe values. Please note that in some situations this issue will have no security impact, meaning no remediation is necessary.</p>",,,,"289"
"353",,"5246980","Link manipulation (stored)","<p>Link manipulation occurs when an application embeds user input into the path or domain of URLs that appear within application responses.&nbsp;An attacker can use this vulnerability to construct a link that, if visited by another application user, will modify the target of URLs within the response. It may be possible to leverage this to perform various attacks, such as:</p>\n<ul>\n  <li>Manipulating the path of an on-site link that has sensitive parameters in the URL. If the response from the modified path contains references to off-site resources, then the sensitive data might be leaked to external domains via the Referer header.</li>\n  <li>Manipulating the URL targeted by a form action, making the form submission have unintended side effects.</li>\n  <li>Manipulating the URL used by a CSS import statement to point to an attacker-uploaded file, resulting in CSS injection.</li>\n  <li>Injecting on-site links containing XSS exploits, thereby bypassing browser anti-XSS defenses, since those defenses typically do not operate on on-site links.</li>\n</ul>\n<p>The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.</p>\n\n<p>Stored link manipulation vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","<p>Consider using a whitelist to restrict user input to safe values. Please note that in some situations this issue will have no security impact, meaning no remediation is necessary.</p>",,,,"289"
"354",,"5247232","Document domain manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n\n<p>Document domain manipulation arises when a script uses controllable data to set the document.domain property. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the response page to set an arbitrary document.domain value.</p>\n<p>The document.domain property is used by browsers in their enforcement of the same origin policy. If two pages from different origins explicitly set the same document.domain value, then those two pages can interact in unrestricted ways. If an attacker can cause a page of a targeted application, and another page they control (either directly, or via an XSS-like vulnerability), to set the same document.domain value, then the attacker may be able to fully compromise the targeted application page via the page they already control, with the same possibilities for exploitation as regular cross-site scripting (XSS) vulnerabilities.</p>\n<p>Browsers generally enforce some restrictions on the values that can be assigned to document.domain, and may prevent the use of completely different values than the actual origin of the page. However, there are two important caveats to this. Firstly, browsers allow the use of child or parent domains, so an attacker may be able to switch the domain of the targeted application page to that of a related application with a weaker security posture. Secondly, some browser quirks enable switching to completely unrelated domains. These caveats mean that the ability to manipulate the document.domain property of a page generally represents a security vulnerability whose severity is not far behind regular XSS.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based document domain manipulation vulnerabilities is not to dynamically set the document.domain property using data that originated from any untrusted source. If it is necessary to programmatically set the document.domain property from within client-side code, then the application should employ a set list of acceptable values, and assign only from values in that list. </p>",,,,"271"
"355",,"5247233","Document domain manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>Document domain manipulation arises when a script uses controllable data to set the document.domain property. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the response page to set an arbitrary document.domain value.</p>\n<p>The document.domain property is used by browsers in their enforcement of the same origin policy. If two pages from different origins explicitly set the same document.domain value, then those two pages can interact in unrestricted ways. If an attacker can cause a page of a targeted application, and another page they control (either directly, or via an XSS-like vulnerability), to set the same document.domain value, then the attacker may be able to fully compromise the targeted application page via the page they already control, with the same possibilities for exploitation as regular cross-site scripting (XSS) vulnerabilities.</p>\n<p>Browsers generally enforce some restrictions on the values that can be assigned to document.domain, and may prevent the use of completely different values than the actual origin of the page. However, there are two important caveats to this. Firstly, browsers allow the use of child or parent domains, so an attacker may be able to switch the domain of the targeted application page to that of a related application with a weaker security posture. Secondly, some browser quirks enable switching to completely unrelated domains. These caveats mean that the ability to manipulate the document.domain property of a page generally represents a security vulnerability whose severity is not far behind regular XSS.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based document domain manipulation vulnerabilities is not to dynamically set the document.domain property using data that originated from any untrusted source. If it is necessary to programmatically set the document.domain property from within client-side code, then the application should employ a set list of acceptable values, and assign only from values in that list. </p>",,,,"271"
"356",,"5247234","Document domain manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>Document domain manipulation arises when a script uses controllable data to set the document.domain property. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause the response page to set an arbitrary document.domain value.</p>\n<p>The document.domain property is used by browsers in their enforcement of the same origin policy. If two pages from different origins explicitly set the same document.domain value, then those two pages can interact in unrestricted ways. If an attacker can cause a page of a targeted application, and another page they control (either directly, or via an XSS-like vulnerability), to set the same document.domain value, then the attacker may be able to fully compromise the targeted application page via the page they already control, with the same possibilities for exploitation as regular cross-site scripting (XSS) vulnerabilities.</p>\n<p>Browsers generally enforce some restrictions on the values that can be assigned to document.domain, and may prevent the use of completely different values than the actual origin of the page. However, there are two important caveats to this. Firstly, browsers allow the use of child or parent domains, so an attacker may be able to switch the domain of the targeted application page to that of a related application with a weaker security posture. Secondly, some browser quirks enable switching to completely unrelated domains. These caveats mean that the ability to manipulate the document.domain property of a page generally represents a security vulnerability whose severity is not far behind regular XSS.\n</p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based document domain manipulation vulnerabilities is not to dynamically set the document.domain property using data that originated from any untrusted source. If it is necessary to programmatically set the document.domain property from within client-side code, then the application should employ a set list of acceptable values, and assign only from values in that list. </p>",,,,"271"
"357",,"5247488","DOM data manipulation (DOM-based)","<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>\n<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>",,,,"93"
"358",,"5247489","DOM data manipulation (reflected DOM-based)","<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>",,,,"93"
"359",,"5247490","DOM data manipulation (stored DOM-based)","<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>\n\n<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>","<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>",,,,"93"
"360",,"5247744","CSS injection (reflected)","<p>CSS injection vulnerabilities arise when an application imports a style sheet from a user-supplied URL, or embeds user input in CSS blocks without adequate escaping. They are closely related to cross-site scripting (XSS) vulnerabilities but often trickier to exploit. </p>\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\n<ul>\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>Ensure that user input is adequately escaped before embedding it in CSS blocks, and consider using a whitelist to prevent loading of arbitrary style sheets.</p>",,,,"221"
"361",,"5247745","CSS injection (stored)","<p>CSS injection vulnerabilities arise when an application imports a style sheet from a user-supplied URL, or embeds user input in CSS blocks without adequate escaping. They are closely related to cross-site scripting (XSS) vulnerabilities but often trickier to exploit. </p>\n<p>Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p>\n<ul>\n  <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li>\n<li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul><p>Stored CSS injection vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","<p>Ensure that user input is adequately escaped before embedding it in CSS blocks, and consider using a whitelist to prevent loading of arbitrary style sheets.</p>",,,,"221"
"362",,"5248000","Client-side HTTP parameter pollution (reflected)","<p>Client-side HTTP parameter pollution (HPP) vulnerabilities arise when an application embeds user input in URLs in an unsafe manner.  An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify URLs within the response by inserting additional query string parameters and sometimes overriding existing ones. This may result in links and forms having unexpected side effects. For example, it may be possible to modify an invitation form using HPP so that the invitation is delivered to an unexpected recipient. </p>\n<p>The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.</p>","<p>Ensure that user input is URL-encoded before it is embedded in a URL.</p>",,,,"232"
"363",,"5248001","Client-side HTTP parameter pollution (stored)","<p>Client-side HTTP parameter pollution (HPP) vulnerabilities arise when an application embeds user input in URLs in an unsafe manner.  An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify URLs within the response by inserting additional query string parameters and sometimes overriding existing ones. This may result in links and forms having unexpected side effects. For example, it may be possible to modify an invitation form using HPP so that the invitation is delivered to an unexpected recipient. </p>\n<p>The security impact of this issue depends largely on the nature of the application functionality. Even if it has no direct impact on its own, an attacker may use it in conjunction with other vulnerabilities to escalate their overall severity.</p>\n\n<p>Stored client-side HTTP parameter pollution vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","<p>Ensure that user input is URL-encoded before it is embedded in a URL.</p>",,,,"232"
"364",,"5248256","Form action hijacking (reflected)","<p>Form action hijacking vulnerabilities arise when an application places user-supplied input into the action URL of an HTML form. An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify the action URL of a form to point to the attacker's server. If a user submits the form then its contents, including any input from the victim user, will be delivered directly to the attacker.</p>\n<p> Even if the user doesn't enter any sensitive information, the form may still deliver a valid CSRF token to the attacker, enabling them to perform CSRF attacks. In some cases web browsers may help exacerbate this issue by autocompleting forms with previously entered user input. </p>","<p>Consider hard-coding the form action URL, or implementing a whitelist of allowed values.</p>",,,,"146"
"365",,"5248257","Form action hijacking (stored)","<p>Form action hijacking vulnerabilities arise when an application places user-supplied input into the action URL of an HTML form. An attacker can use this vulnerability to construct a URL that, if visited by another application user, will modify the action URL of a form to point to the attacker's server. If a user submits the form then its contents, including any input from the victim user, will be delivered directly to the attacker.</p>\n<p> Even if the user doesn't enter any sensitive information, the form may still deliver a valid CSRF token to the attacker, enabling them to perform CSRF attacks. In some cases web browsers may help exacerbate this issue by autocompleting forms with previously entered user input. </p>\n\n<p>Stored form action hijacking vulnerabilities arise when the applicable input was submitted in an previous request and stored by the application.</p>","<p>Consider hard-coding the form action URL, or implementing a whitelist of allowed values.</p>",,,,"146"
"366",,"6291584","Database connection string disclosed","<p>A database connection string specifies information about a data source and the means of connecting to it. In web applications, connection strings are generally used by the application tier to connect to the back database used for storing application data. They are usually read from server-side configuration files or hard-coded into application source code.</p>","<p>It is almost never necessary for applications to disclose database connection strings to clients. The reason for the disclosure should be reviewed and addressed.</p>",,,,"152"
"367",,"6291632","Source code disclosure","<p>Source code intended to be kept server-side can sometimes end up being disclosed to users. Such code may contain sensitive information such as database passwords and secret keys, which may help malicious users formulate attacks against the application.</p>","<p>Server-side source code is normally disclosed to clients as a result of typographical errors in scripts or because of misconfiguration, such as failing to grant executable permissions to a script or directory. Review the cause of the code disclosure and prevent it from happening.</p>",,,,"144"
"368",,"6291712","Directory listing","<p>Web servers can be configured to automatically list the contents of directories that do not have an index page present. This can aid an attacker by enabling them to quickly identify the resources at a given path, and proceed directly to analyzing and attacking those resources. It particularly increases the exposure of sensitive files within the directory that are not intended to be accessible to users, such as temporary files and crash dumps.</p>\n<p>Directory listings themselves do not necessarily constitute a security vulnerability. Any sensitive resources within the web root should in any case be properly access-controlled, and should not be accessible by an unauthorized party who happens to know or guess the URL. Even when directory listings are disabled, an attacker may guess the location of sensitive files using automated tools.</p>","<p>There is not usually any good reason to provide directory listings, and disabling them may place additional hurdles in the path of an attacker. This can normally be achieved in two ways:</p>\n<ul>\n<li>Configure your web server to prevent directory listings for all paths beneath the web root; </li>\n<li>Place into each directory a default file (such as index.htm) that the web server will display instead of returning a directory listing.</li></ul>",,,,"27"
"369",,"6292224","Private IP addresses disclosed","<p>RFC 1918 specifies ranges of IP addresses that are reserved for use in private networks and cannot be routed on the public Internet. Although various methods exist by which an attacker can determine the public IP addresses in use by an organization, the private addresses used internally cannot usually be determined in the same ways.</p>\n<p>Discovering the private addresses used within an organization can help an attacker in carrying out network-layer attacks aiming to penetrate the organization's internal infrastructure. </p>","<p>There is not usually any good reason to disclose the internal IP addresses used within an organization's infrastructure. If these are being returned in service banners or debug messages, then the relevant services should be configured to mask the private addresses. If they are being used to track back-end servers for load balancing purposes, then the addresses should be rewritten with innocuous identifiers from which an attacker cannot infer any useful information about the infrastructure.</p>",,,,"71"
"370",,"6292480","Social security numbers disclosed","<p>Applications sometimes disclose sensitive personal information such as social security numbers. Responses containing social security numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a social security number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.</p>",,,,,"8"
"371",,"6292736","Credit card numbers disclosed","<p>Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.</p>",,,,,"8"
"372",,"6292816","Private key disclosed","<p>Disclosure of valid private keys may lead to unauthorized access to any systems that use them for authentication. Verify whether any keys disclosed are actually valid, and whether their disclosure within the application is appropriate.</p>",,,,,"8"
"373",,"6292992","Robots.txt file","<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>\n<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>","<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>",,,,"256"
"374",,"7340288","Cacheable HTTPS response","<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>","<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>\n<ul>\n<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>",,,,"69"
"375",,"7340544","Base64-encoded data in parameter","<p>Applications sometimes Base64-encode parameters in an attempt to obfuscate them from users or facilitate transport of binary data. The presence of Base64-encoded data may indicate security-sensitive information or functionality that is worthy of further investigation. The data should be reviewed to determine whether it contains any interesting information, or provides any additional entry points for malicious input.</p>",,,,,"8"
"376",,"8388864","Multiple content types specified","<p>If a  response specifies multiple incompatible content types, then the browser will usually analyze the response and attempt to determine the actual MIME type of its content. This can have unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>\n<p>In most cases, the presence of multiple incompatible content type statements does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>","<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>",,,,"32"
"377",,"8389376","HTML uses unrecognized charset","<p>Applications may specify a non-standard character set as a result of typographical errors within the code base, or because of intentional usage of an unusual character set that is not universally recognized by browsers. If the browser does not recognize the character set specified by the application, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a valid charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>","<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",,,,"266"
"378",,"8389632","Content type incorrectly stated","<p>If a  response specifies an incorrect content type then browsers may process the response in unexpected ways. If the  content type is specified to be a renderable text-based format, then the browser will usually attempt to interpret the response as being in that format, regardless of the actual contents of the response. Additionally, some other specified content types might sometimes be interpreted as HTML due to quirks in particular browsers. This behavior might lead to otherwise &quot;safe&quot; content such as images  being rendered as HTML, enabling cross-site scripting attacks in certain conditions.</p>\n<p>The presence of an incorrect content type statement typically only constitutes a security flaw when the affected resource is dynamically generated, uploaded by a user, or otherwise contains user input. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists.</p>","<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>\n<p>Additionally, the response header &quot;X-content-type-options: nosniff&quot; should be returned in all responses to reduce the likelihood that browsers will interpret content in a way that disregards the Content-type header.</p>",,,,"160"
"379",,"8389888","Content type is not specified","<p>If a  response does not specify a content type, then the browser will usually analyze the response and attempt to determine the MIME type of its content. This can have unexpected results, and if the content contains any user-controllable data may lead to cross-site scripting or other client-side vulnerabilities.</p>\n<p>In most cases, the absence of a content type statement does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>","<p>For every response containing a message body, the application should include a single Content-type header that correctly and unambiguously states the MIME type of the content in the response body.</p>",,,,"32"
"380",,"16777472","TLS certificate","<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>",,,,,"8"
"381",,"16777984","Strict transport security not enforced","<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>\n<p>\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>","<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>\n<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>",,,,"151"
"382",,"16778240","Mixed content","<p>The application loads pages over HTTPS that load other resources over unencrypted connections. An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with these resources, which may indirectly disclose information about the user's activity on the application itself. Furthermore, an attacker able to modify traffic could alter these resources and potentially influence the application's appearance and behavior. Due to these concerns, users' web browsers may automatically display warnings and disable affected components of the page. As a result, this vulnerability currently has more of an impact on usability than security.</p><p>To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p>","<p>Ensure that all external resources the page references are loaded using HTTPS.</p>",,,,"287"
"383",,"134217728","Extension generated issue","<p>This type of issue is used for custom issues that are generated by Burp Suite extensions.</p>",,,,,"8"