// @ts-check
/**
 *
 * @param {import('knex').Knex} knex
 */
exports.up = async (knex) => {
  if (knex.userParams.isSetup) {
    return Promise.resolve()
  }

  await knex.raw('DROP VIEW IF EXISTS public.scan_vulnerability_report;')
  await knex.raw(`
    CREATE OR REPLACE VIEW public.scan_vulnerability_report AS
    SELECT sa.scan_id,
           vu.id                                      AS vulnerability_id,
           va.severity                                AS severity,
           cvss.score                                 AS cvss_score,
           ass.id                                     AS asset_id,
           ass.name                                   AS asset_name,
           ass.type                                   AS asset_type,
           ip.address                                 AS ip_address,
           prt.number                                 AS port_number,
           prt.protocol,
           uri.uri
    FROM public.scan_asset AS sa
             INNER JOIN public.vulnerability_asset AS va ON va.id = sa.vulnerability_asset_id
             LEFT JOIN public.cvss AS cvss ON cvss.id = va.cvss_id
             LEFT JOIN public.ip AS ip ON ip.id = va.ip_id
             LEFT JOIN public.port AS prt ON prt.id = va.port_id
             LEFT JOIN public.uri AS uri ON uri.id = va.uri_id
             INNER JOIN public.vulnerability AS vu ON vu.id = va.vulnerability_id
             INNER JOIN public.asset AS ass ON ass.id = va.asset_id
    ORDER BY cvss.score DESC NULLS LAST;
  `)
}
/**
 *
 * @param {import('knex').Knex} knex
 */
exports.down = async (knex) => {
  await knex.raw('DROP VIEW IF EXISTS public.scan_vulnerability_report;')
  await knex.raw(`
    CREATE OR REPLACE VIEW public.scan_vulnerability_report AS
    SELECT sa.scan_id,
           vu.id                                      AS vulnerability_id,
           cvss.score                                 AS cvss_score,
           ass.name                                   AS asset_name,
           ass.type                                   AS asset_type,
           ip.address                                 AS ip_address,
           prt.number                                 AS port_number,
           prt.protocol,
           uri.uri
    FROM public.scan_asset AS sa
             INNER JOIN public.vulnerability_asset AS va ON va.id = sa.vulnerability_asset_id
             LEFT JOIN public.cvss AS cvss ON cvss.id = va.cvss_id
             LEFT JOIN public.ip AS ip ON ip.id = va.ip_id
             LEFT JOIN public.port AS prt ON prt.id = va.port_id
             LEFT JOIN public.uri AS uri ON uri.id = va.uri_id
             INNER JOIN public.vulnerability AS vu ON vu.id = va.vulnerability_id
             INNER JOIN public.asset AS ass ON ass.id = va.asset_id
    ORDER BY cvss.score DESC NULLS LAST;
  `)
}
