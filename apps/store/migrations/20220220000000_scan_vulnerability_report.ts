exports.up = (knex) => {
  if (knex.userParams.isSetup) {
    return Promise.resolve()
  }
  return knex.schema.createView('public.scan_vulnerability_report', (view) => {
    view.columns([
      'scan_id',
      'vulnerability_id',
      'cvss_score',
      'asset_name',
      'asset_type',
      'ip_address',
      'port_number',
      'protocol',
      'uri',
    ])
    view.as(
      knex({ sa: 'public.scan_asset' })
        .select({
          scan_id: 'sa.scan_id',
          vulnerability_id: 'vu.id',
          cvss_score: 'cvss.score',
          asset_name: 'ass.name',
          asset_type: 'ass.type',
          ip_address: 'ip.address',
          port_number: 'prt.number',
          protocol: 'prt.protocol',
          uri: 'uri.uri',
        })
        .innerJoin(
          { va: 'public.vulnerability_asset ' },
          { 'va.id': 'sa.vulnerability_asset_id' }
        )
        .leftJoin({ cvss: 'public.cvss' }, { 'cvss.id': 'va.cvss_id' })
        .leftJoin({ ip: 'public.ip' }, { 'ip.id': 'va.ip_id' })
        .leftJoin({ prt: 'public.port' }, { 'prt.id': 'va.port_id' })
        .leftJoin({ uri: 'public.uri' }, { 'uri.id': 'va.uri_id' })
        .innerJoin(
          { vu: 'public.vulnerability ' },
          { 'vu.id': 'va.vulnerability_id' }
        )
        .innerJoin({ ass: 'public.asset ' }, { 'ass.id': 'va.asset_id' })
        .orderBy('cvss.score', 'desc', 'last')
    )
  })
}
exports.down = (knex) => {
  return knex.schema.dropViewIfExists('public.scan_vulnerability_report')
}
